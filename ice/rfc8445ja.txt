RFCトランス
個人情報保護方針
連絡先
イチジク
@ tex2e
8445
RFC 8445-Interactive Connectivity Establishment（ICE）：ネットワークアドレス変換（NAT）トラバーサル日本語訳のプロトコル
URL：https：//tools.ietf.org/html/rfc8445
パッケージ：RFC 8445-Interactive Connectivity Establishment（ICE）：ネットワークアドレス変換（NAT）トラバーサルのプロトコル
翻訳：自動翻訳
インターネットエンジニアリングタスクフォース（IETF）A. ケラネン
コメントの要求：8445 C. Holmberg
廃止：5245エリクソン
カテゴリ：標準化過程J.ローゼンバーグ
ISSN：2070-1721 jdrosen.net
                                                               2018年7月
        
Interactive Connectivity Establishment（ICE）：ネットワークアドレス変換（NAT）トラバーサルのプロトコル

概要

このドキュメントでは、UDPベースの通信用のネットワークアドレス変換（NAT）トラバーサルのプロトコルについて説明します. このプロトコルは、Interactive Connectivity Establishment（ICE）と呼ばれます. ICEは、Session Traversal Utilities for NAT（STUN）プロトコルとその拡張機能であるTraversal Using Relay NAT（TURN）を利用します. 

このドキュメントはRFC5245を廃止します. 

このメモのステータス

これはインターネット標準化過程の文書です. 

このドキュメントは、インターネット技術特別調査委員会（IETF）の製品です. これは、IETFコミュニティのコンセンサスを表しています. パブリックレビューを受け、Internet Engineering Steering Group（IESG）による公開が承認されました. インターネット標準の詳細については、RFC7841のセクション2を参照してください. 

このドキュメントの現在のステータス、正誤表、およびフィードバックの提供方法に関する情報は、https：//www.rfc-editor.org/info/rfc8445で入手できます. 

著作権表示

Copyright（c）2018 IETFTrustおよびドキュメントの作成者として特定された人物. 全著作権所有. 

このドキュメントは、このドキュメントの発行日に有効なBCP 78およびIETFドキュメントに関連するIETFトラストの法的規定（https://trustee.ietf.org/license-info）の対象となります. これらのドキュメントは、このドキュメントに関するお客様の権利と制限について説明しているため、注意深く確認してください. このドキュメントから抽出されたコードコンポーネントには、Trust LegalProvisionsのセクション4.eで説明されているSimplifiedBSD Licenseテキストが含まれている必要があり、Simplified BSDLicenseで説明されているように保証なしで提供されます. 

このドキュメントには、2008年11月10日より前に公開または公開されたIETFドキュメントまたはIETF寄稿の資料が含まれている場合があります. この資料の一部の著作権を管理している人は、IETFトラストにそのような資料の変更を許可する権利を付与していない可能性があります.  IETF標準プロセスの外部. そのような資料の著作権を管理する人から適切なライセンスを取得しない限り、このドキュメントをIETF標準プロセスの外部で変更したり、その派生物をIETF標準プロセスの外部で作成したりすることはできません.  RFCとして公開するか、英語以外の言語に翻訳します. 

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   5
   2.  Overview of ICE . . . . . . . . . . . . . . . . . . . . . . .   6
     2.1.  Gathering Candidates  . . . . . . . . . . . . . . . . . .   8
     2.2.  Connectivity Checks . . . . . . . . . . . . . . . . . . .  10
     2.3.  Nominating Candidate Pairs and Concluding ICE . . . . . .  12
     2.4.  ICE Restart . . . . . . . . . . . . . . . . . . . . . . .  13
     2.5.  Lite Implementations  . . . . . . . . . . . . . . . . . .  13
   3.  ICE Usage . . . . . . . . . . . . . . . . . . . . . . . . . .  13
   4.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .  13
   5.  ICE Candidate Gathering and Exchange  . . . . . . . . . . . .  17
     5.1.  Full Implementation . . . . . . . . . . . . . . . . . . .  17
       5.1.1.  Gathering Candidates  . . . . . . . . . . . . . . . .  18
         5.1.1.1.  Host Candidates . . . . . . . . . . . . . . . . .  18
         5.1.1.2.  Server-Reflexive and Relayed Candidates . . . . .  20
         5.1.1.3.  Computing Foundations . . . . . . . . . . . . . .  21
         5.1.1.4.  Keeping Candidates Alive  . . . . . . . . . . . .  21
       5.1.2.  Prioritizing Candidates . . . . . . . . . . . . . . .  22
         5.1.2.1.  Recommended Formula . . . . . . . . . . . . . . .  22
         5.1.2.2.  Guidelines for Choosing Type and Local
                   Preferences . . . . . . . . . . . . . . . . . . .  23
       5.1.3.  Eliminating Redundant Candidates  . . . . . . . . . .  23
     5.2.  Lite Implementation Procedures  . . . . . . . . . . . . .  23
     5.3.  Exchanging Candidate Information  . . . . . . . . . . . .  24
     5.4.  ICE Mismatch  . . . . . . . . . . . . . . . . . . . . . .  26
   6.  ICE Candidate Processing  . . . . . . . . . . . . . . . . . .  26
     6.1.  Procedures for Full Implementation  . . . . . . . . . . .  26
       6.1.1.  Determining Role  . . . . . . . . . . . . . . . . . .  26
       6.1.2.  Forming the Checklists  . . . . . . . . . . . . . . .  28
         6.1.2.1.  Checklist State . . . . . . . . . . . . . . . . .  28
         6.1.2.2.  Forming Candidate Pairs . . . . . . . . . . . . .  28
         6.1.2.3.  Computing Pair Priority and Ordering Pairs  . . .  31
         6.1.2.4.  Pruning the Pairs . . . . . . . . . . . . . . . .  31
         6.1.2.5.  Removing Lower-Priority Pairs . . . . . . . . . .  31
         6.1.2.6.  Computing Candidate Pair States . . . . . . . . .  32
       6.1.3.  ICE State . . . . . . . . . . . . . . . . . . . . . .  36
       6.1.4.  Scheduling Checks . . . . . . . . . . . . . . . . . .  36
         6.1.4.1.  Triggered-Check Queue . . . . . . . . . . . . . .  36
         6.1.4.2.  Performing Connectivity Checks  . . . . . . . . .  36
     6.2.  Lite Implementation Procedures  . . . . . . . . . . . . .  38
   7.  Performing Connectivity Checks  . . . . . . . . . . . . . . .  38
     7.1.  STUN Extensions . . . . . . . . . . . . . . . . . . . . .  38
       7.1.1.  PRIORITY  . . . . . . . . . . . . . . . . . . . . . .  38
       7.1.2.  USE-CANDIDATE . . . . . . . . . . . . . . . . . . . .  38
       7.1.3.  ICE-CONTROLLED and ICE-CONTROLLING  . . . . . . . . .  39
     7.2.  STUN Client Procedures  . . . . . . . . . . . . . . . . .  39
       7.2.1.  Creating Permissions for Relayed Candidates . . . . .  39
       7.2.2.  Forming Credentials . . . . . . . . . . . . . . . . .  39
       7.2.3.  Diffserv Treatment  . . . . . . . . . . . . . . . . .  40
       7.2.4.  Sending the Request . . . . . . . . . . . . . . . . .  40
       7.2.5.  Processing the Response . . . . . . . . . . . . . . .  40
         7.2.5.1.  Role Conflict . . . . . . . . . . . . . . . . . .  40
         7.2.5.2.  Failure . . . . . . . . . . . . . . . . . . . . .  41
           7.2.5.2.1.  Non-Symmetric Transport Addresses . . . . . .  41
           7.2.5.2.2.  ICMP Error  . . . . . . . . . . . . . . . . .  41
           7.2.5.2.3.  Timeout . . . . . . . . . . . . . . . . . . .  41
           7.2.5.2.4.  Unrecoverable STUN Response . . . . . . . . .  41
         7.2.5.3.  Success . . . . . . . . . . . . . . . . . . . . .  42
           7.2.5.3.1.  Discovering Peer-Reflexive Candidates . . . .  42
           7.2.5.3.2.  Constructing a Valid Pair . . . . . . . . . .  43
           7.2.5.3.3.  Updating Candidate Pair States  . . . . . . .  44
           7.2.5.3.4.  Updating the Nominated Flag . . . . . . . . .  44
         7.2.5.4.  Checklist State Updates . . . . . . . . . . . . .  44
     7.3.  STUN Server Procedures  . . . . . . . . . . . . . . . . .  45
       7.3.1.  Additional Procedures for Full Implementations  . . .  45
         7.3.1.1.  Detecting and Repairing Role Conflicts  . . . . .  46
         7.3.1.2.  Computing Mapped Addresses  . . . . . . . . . . .  47
         7.3.1.3.  Learning Peer-Reflexive Candidates  . . . . . . .  47
         7.3.1.4.  Triggered Checks  . . . . . . . . . . . . . . . .  47
         7.3.1.5.  Updating the Nominated Flag . . . . . . . . . . .  49
       7.3.2.  Additional Procedures for Lite Implementations  . . .  49
   8.  Concluding ICE Processing . . . . . . . . . . . . . . . . . .  50
     8.1.  Procedures for Full Implementations . . . . . . . . . . .  50
       8.1.1.  Nominating Pairs  . . . . . . . . . . . . . . . . . .  50
       8.1.2.  Updating Checklist and ICE States . . . . . . . . . .  51
     8.2.  Procedures for Lite Implementations . . . . . . . . . . .  52
     8.3.  Freeing Candidates  . . . . . . . . . . . . . . . . . . .  53
       8.3.1.  Full Implementation Procedures  . . . . . . . . . . .  53
       8.3.2.  Lite Implementation Procedures  . . . . . . . . . . .  53
   9.  ICE Restarts  . . . . . . . . . . . . . . . . . . . . . . . .  53
   10. ICE Option  . . . . . . . . . . . . . . . . . . . . . . . . .  54
   11. Keepalives  . . . . . . . . . . . . . . . . . . . . . . . . .  54
   12. Data Handling . . . . . . . . . . . . . . . . . . . . . . . .  55
     12.1.  Sending Data . . . . . . . . . . . . . . . . . . . . . .  55
       12.1.1.  Procedures for Lite Implementations  . . . . . . . .  56
     12.2.  Receiving Data . . . . . . . . . . . . . . . . . . . . .  56
   13. Extensibility Considerations  . . . . . . . . . . . . . . . .  57
   14. Setting Ta and RTO  . . . . . . . . . . . . . . . . . . . . .  57
     14.1.  General  . . . . . . . . . . . . . . . . . . . . . . . .  57
     14.2.  Ta . . . . . . . . . . . . . . . . . . . . . . . . . . .  58
     14.3.  RTO  . . . . . . . . . . . . . . . . . . . . . . . . . .  58
   15. Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .  59
     15.1.  Example with IPv4 Addresses  . . . . . . . . . . . . . .  60
     15.2.  Example with IPv6 Addresses  . . . . . . . . . . . . . .  65
   16. STUN Extensions . . . . . . . . . . . . . . . . . . . . . . .  69
     16.1.  Attributes . . . . . . . . . . . . . . . . . . . . . . .  69
     16.2.  New Error-Response Codes . . . . . . . . . . . . . . . .  70
   17. Operational Considerations  . . . . . . . . . . . . . . . . .  70
     17.1.  NAT and Firewall Types . . . . . . . . . . . . . . . . .  70
     17.2.  Bandwidth Requirements . . . . . . . . . . . . . . . . .  70
       17.2.1.  STUN and TURN Server-Capacity Planning . . . . . . .  71
       17.2.2.  Gathering and Connectivity Checks  . . . . . . . . .  71
       17.2.3.  Keepalives . . . . . . . . . . . . . . . . . . . . .  72
     17.3.  ICE and ICE-Lite . . . . . . . . . . . . . . . . . . . .  72
     17.4.  Troubleshooting and Performance Management . . . . . . .  72
     17.5.  Endpoint Configuration . . . . . . . . . . . . . . . . .  73
   18. IAB Considerations  . . . . . . . . . . . . . . . . . . . . .  73
     18.1.  Problem Definition . . . . . . . . . . . . . . . . . . .  73
     18.2.  Exit Strategy  . . . . . . . . . . . . . . . . . . . . .  74
     18.3.  Brittleness Introduced by ICE  . . . . . . . . . . . . .  74
     18.4.  Requirements for a Long-Term Solution  . . . . . . . . .  75
     18.5.  Issues with Existing NAPT Boxes  . . . . . . . . . . . .  75
   19. Security Considerations . . . . . . . . . . . . . . . . . . .  76
     19.1.  IP Address Privacy . . . . . . . . . . . . . . . . . . .  76
     19.2.  Attacks on Connectivity Checks . . . . . . . . . . . . .  77
     19.3.  Attacks on Server-Reflexive Address Gathering  . . . . .  80
     19.4.  Attacks on Relayed Candidate Gathering . . . . . . . . .  80
     19.5.  Insider Attacks  . . . . . . . . . . . . . . . . . . . .  81
       19.5.1.  STUN Amplification Attack  . . . . . . . . . . . . .  81
   20. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  82
     20.1.  STUN Attributes  . . . . . . . . . . . . . . . . . . . .  82
     20.2.  STUN Error Responses . . . . . . . . . . . . . . . . . .  82
     20.3.  ICE Options  . . . . . . . . . . . . . . . . . . . . . .  82
   21. Changes from RFC 5245 . . . . . . . . . . . . . . . . . . . .  83
   22. References  . . . . . . . . . . . . . . . . . . . . . . . . .  84
     22.1.  Normative References . . . . . . . . . . . . . . . . . .  84
     22.2.  Informative References . . . . . . . . . . . . . . . . .  85
   Appendix A.  Lite and Full Implementations  . . . . . . . . . . .  89
   Appendix B.  Design Motivations . . . . . . . . . . . . . . . . .  90
     B.1.  Pacing of STUN Transactions . . . . . . . . . . . . . . .  90
     B.2.  Candidates with Multiple Bases  . . . . . . . . . . . . .  92
     B.3.  Purpose of the Related-Address and Related-Port
           Attributes  . . . . . . . . . . . . . . . . . . . . . . .  94
     B.4.  Importance of the STUN Username . . . . . . . . . . . . .  95
     B.5.  The Candidate Pair Priority Formula . . . . . . . . . . .  96
     B.6.  Why Are Keepalives Needed?  . . . . . . . . . . . . . . .  96
     B.7.  Why Prefer Peer-Reflexive Candidates? . . . . . . . . . .  97
     B.8.  Why Are Binding Indications Used for Keepalives?  . . . .  97
     B.9.  Selecting Candidate Type Preference . . . . . . . . . . .  97
   Appendix C.  Connectivity-Check Bandwidth . . . . . . . . . . . .  99
   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . . 100
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . . 100


1.はじめに

ピア間の通信セッションを確立するプロトコルには、通常、データソースとシンクのIPアドレスとポートの交換が含まれます. ただし、これは、ネットワークアドレス変換（NAT）[RFC3235]を介して操作する場合に問題を引き起こします. これらのプロトコルは、参加者間に直接データフローを作成することも目的としているため、参加者間にアプリケーション層の仲介はありません. これは、データの遅延を減らし、パケット損失を減らし、アプリケーションを展開するための運用コストを削減するために行われます. ただし、これをNATで実現することは困難です. この理由の完全な取り扱いは、この仕様の範囲を超えています. 

これらのプロトコルがNATを介して動作できるようにするために、多数のソリューションが定義されています. これらには、アプリケーション層ゲートウェイ（ALG）、ミドルボックス制御プロトコル[RFC3303]、NATを介したUDPの元の単純なトラバーサル（STUN）仕様[RFC3489]（RFC3489はRFC5389によって廃止されていることに注意）、およびレルム固有のIP [ RFC3102] [RFC3103]と、それらを機能させるために必要なセッション記述拡張機能（Real-Time Control Protocol（RTCP）[RFC3605]のSession Description Protocol（SDP）属性[RFC4566]など）. 残念ながら、これらの手法にはすべて長所と短所があり、一部のネットワークトポロジではそれぞれが最適になりますが、他のトポロジでは不適切な選択になります. その結果、管理者と実装者は、ソリューションが展開されるネットワークのトポロジについて想定しています. 

この仕様では、Interactive Connectivity Establishment（ICE）をUDPベースのデータストリームのNATトラバーサルの手法として定義しています（ただし、ICEはTCP [RFC6544]などの他のトランスポートプロトコルを処理するように拡張されています）. ICEは、複数のIPアドレスとポートを交換することで機能し、ピアツーピア接続チェックによって接続性がテストされます. IPアドレスとポートはICE使用法固有のメカニズムを使用して交換され（たとえば、オファー/アンサー交換で）、接続チェックはSTUN [RFC5389]を使用して実行されます. ICEは、STUNの拡張であるNAT（TURN）[RFC5766]の周りのリレーを使用したトラバーサルも利用します. ICEは、メディアストリームごとに複数のIPアドレスとポートを交換するため、マルチホームホストとデュアルスタックホストのアドレスを選択することもできます. このために、

付録Bは、ICEの設計時に行われた設計上の決定に関する背景情報と動機を提供します. 





2.ICEの概要

一般的なICE展開では、通信する2つのエンドポイント（ICEエージェント）があります. ICEは、別のメカニズムを介して提供されると想定されるシグナリングプロトコルのNATトラバーサルを目的としていないことに注意してください. ICEは、エージェントが相互にシグナリング接続を確立できることを前提としています. 

当初、エージェントは自身のトポロジを認識していません. 特に、エージェントはNAT（またはNATの複数の層）の背後にある場合とない場合があります. ICEを使用すると、エージェントはトポロジに関する十分な情報を検出して、データセッションを確立するための1つ以上のパスを見つけることができます. 

図1は、一般的なICEの展開を示しています. エージェントにはLとRのラベルが付いています. LとRはどちらも、それぞれのNATの背後にありますが、認識していない場合があります. NATのタイプとそのプロパティも不明です. LとRは、LとRの間にデータセッションを設定することを目的とした候補交換プロセスに関与できます. 通常、この交換は、シグナリングサーバー（SIPプロキシなど）を介して行われます. 

エージェント、シグナリングサーバー、およびNATに加えて、ICEは通常、ネットワーク内のSTUNまたはTURNサーバーと連携して使用されます. 各エージェントは、独自のSTUNまたはTURNサーバーを持つことも、同じにすることもできます. 

                               +---------+
             +--------+        |Signaling|         +--------+
             | STUN   |        |Server   |         | STUN   |
             | Server |        +---------+         | Server |
             +--------+       /           \        +--------+
                             /             \
                            /               \
                           / <- Signaling -> \
                          /                   \
                   +--------+               +--------+
                   |  NAT   |               |  NAT   |
                   +--------+               +--------+
                      /                             \
                     /                               \
                 +-------+                       +-------+
                 | Agent |                       | Agent |
                 |   L   |                       |   R   |
                 +-------+                       +-------+

                     Figure 1: ICE Deployment Scenario

ICEの背後にある基本的な考え方は次のとおりです. 各エージェントには、他のエージェントとの通信に使用できるさまざまな候補トランスポートアドレス（特定のトランスポートプロトコルのIPアドレスとポートの組み合わせ. この仕様では常にUDP）があります. これらには次のものが含まれます. 

o直接接続されたネットワークインターフェース上のトランスポートアドレス

o NATのパブリック側の変換されたトランスポートアドレス（「サーバー再帰」アドレス）

o TURNサーバーから割り当てられたトランスポートアドレス（「リレーアドレス」）

潜在的に、Lの候補トランスポートアドレスのいずれかを使用して、Rの候補トランスポートアドレスのいずれかと通信することができます. ただし、実際には、多くの組み合わせは機能しません. たとえば、LとRの両方がNATの背後にある場合、それらの直接接続されたインターフェイスアドレスが直接通信できる可能性は低くなります（これが、結局のところICEが必要な理由です！）. ICEの目的は、どのアドレスのペアが機能するかを発見することです. ICEがこれを行う方法は、1つ以上の機能が見つかるまで、考えられるすべてのペアを（慎重にソートされた順序で）体系的に試行することです. 

2.1. 候補者の収集

ICEを実行するために、ICEエージェントは1つ以上のアドレス候補を識別して収集します. 候補にはトランスポートアドレスがあります. これは、特定のトランスポートプロトコルのIPアドレスとポートの組み合わせです（ここではUDPのみを指定しています）. 候補者にはさまざまな種類があります. 物理的または論理的なネットワークインターフェイスから派生したものもあれば、STUNおよびTURNを介して検出できるものもあります. 

候補の最初のカテゴリは、ローカルインターフェイスから直接取得されたトランスポートアドレスを持つ候補です. このような候補は「ホスト候補」と呼ばれます. ローカルインターフェイスは、イーサネットまたはWi-Fiの場合もあれば、仮想プライベートネットワーク（VPN）やモバイルIP（MIP）などのトンネルメカニズムを介して取得されるものの場合もあります. すべての場合において、そのようなネットワークインターフェイスは、ポート（したがって候補）を割り当てることができるローカルインターフェイスとしてエージェントに表示されます. 

次に、エージェントはSTUNまたはTURNを使用して追加の候補を取得します. これらには2つの種類があります. NATのパブリック側の変換されたアドレス（サーバー再帰候補）とTURNサーバーのアドレス（リレー候補）です. TURNサーバーを使用する場合、両方のタイプの候補がTURNサーバーから取得されます. STUNサーバーのみが使用されている場合、サーバー反射候補のみがそれらから取得されます. これらの候補とホスト候補の関係を図2に示します. この図では、両方のタイプの候補がTURNを使用して検出されます. この図では、表記X：xはIPアドレスXとUDPポートxを意味します. 

                      To Internet

                          |
                          |
                          |  /------------  Relayed
                      Y:y | /               Address
                      +--------+
                      |        |
                      |  TURN  |
                      | Server |
                      |        |
                      +--------+
                          |
                          |
                          | /------------  Server
                   X1':x1'|/               Reflexive
                    +------------+         Address
                    |    NAT     |
                    +------------+
                          |
                          | /------------  Local
                      X:x |/               Address
                      +--------+
                      |        |
                      | Agent  |
                      |        |
                      +--------+


                     Figure 2: Candidate Relationships

エージェントがIPアドレスとポートX：xからTURN Allocate要求を送信すると、NAT（存在すると仮定）はバインディングX1 '：x1'を作成し、このサーバー再帰候補をホスト候補X：xにマッピングします. ホスト候補から送信された送信パケットは、NATによってサーバー再帰候補に変換されます. サーバー再帰候補に送信された着信パケットは、NATによってホスト候補に変換され、エージェントに転送されます. 特定のサーバー再帰候補に関連付けられているホスト候補は「ベース」です. 

注：「ベース」とは、エージェントが特定の候補者に対して送信するアドレスを指します. したがって、縮退したケースとして、ホスト候補にもベースがありますが、それはホスト候補と同じです. 

エージェントとTURNサーバーの間に複数のNATがある場合、TURN要求は各NATにバインディングを作成しますが、エージェントは最も外側のサーバー反射候補（TURNサーバーに最も近い候補）のみを検出します. エージェントがNATの背後にない場合、基本候補はサーバー反射候補と同じになり、サーバー反射候補は冗長であり、削除されます. 

次に、割り当て要求がTURNサーバーに到着します. TURNサーバーは、ローカルIPアドレスYからポートyを割り当て、割り当て応答を生成して、この中継された候補をエージェントに通知します. TURNサーバーは、Allocate要求の送信元トランスポート・アドレスをAllocate応答にコピーすることにより、サーバー再帰候補X1 '：x1'をエージェントに通知します. TURNサーバーはパケットリレーとして機能し、LとRの間でトラフィックを転送します. トラフィックをLに送信するために、RはトラフィックをY：yでTURNサーバーに送信し、TURNサーバーはそれをX1 '：x1'に転送します.  NATを通過し、そこでX：xにマップされ、Lに配信されます. 

STUNサーバーのみが使用されている場合、エージェントはSTUNバインディング要求[RFC5389]をSTUNサーバーに送信します. STUNサーバーは、バインディング要求のソーストランスポートアドレスをバインディング応答にコピーすることにより、サーバー再帰候補X1 '：x1'をエージェントに通知します. 

2.2. 接続性チェック

Lはすべての候補を収集すると、優先度の高いものから低いものの順に並べ、シグナリングチャネルを介してRに送信します. RはLから候補を受け取ると、同じ収集プロセスを実行し、独自の候補リストで応答します. このプロセスの最後に、各ICEエージェントは、その候補とそのピアの候補の両方の完全なリストを持っています. それらをペアにして、候補ペアを作成します. どのペアが機能するかを確認するために、各エージェントは一連の接続チェックをスケジュールします. 各チェックは、クライアントがローカル候補からリモート候補にSTUN要求を送信することにより、特定の候補ペアに対して実行するSTUN要求/応答トランザクションです. 

接続チェックの基本原則は単純です. 

1.候補ペアを優先順に並べ替えます. 

2.各候補ペアのchecksを優先順に送信します. 

3.他のエージェントから受け取ったchecksを確認します. 



両方のエージェントが候補ペアのチェックを実行すると、結果は4ウェイハンドシェイクになります. 

                  L                        R
                  -                        -
                  STUN request ->             \  L's
                            <- STUN response  /  check

                             <- STUN request  \  R's
                  STUN response ->            /  check

                    Figure 3: Basic Connectivity Check

STUN要求は、データに使用されるのとまったく同じIPアドレスおよびポート（RTP、RTCP、またはその他のプロトコルなど）との間で送受信されることに注意することが重要です. その結果、エージェントは、パケットを受信したポートではなく、パケットの内容を使用してSTUNとデータを逆多重化します. 

接続チェックにはSTUNバインディング要求が使用されるため、STUNバインディング応答には、エージェントとそのピア間のNATのパブリック側にあるエージェントの変換されたトランスポートアドレスが含まれます. このトランスポートアドレスが、エージェントがすでに学習した他の候補のアドレスと異なる場合、それは新しい候補（ピアリフレクティブ候補）を表し、他の候補とまったく同じようにICEによってテストされます. 

上記のアルゴリズムはすべての候補ペアを検索するため、作業ペアが存在する場合、アルゴリズムは候補が試行された順序に関係なく最終的にそれを検出します. より高速な（より良い）結果を生成するために、候補は指定された順序で並べ替えられます. 結果として得られるソートされた候補ペアのリストは、「チェックリスト」と呼ばれます. 

エージェントは、リストの次の候補ペアに対してSTUN要求を定期的に送信することにより、チェックリストを処理します. これらは「通常のチェック」と呼ばれます. STUNトランザクションが成功すると、1つ以上の候補ペアがいわゆる「有効ペア」になり、「有効リスト」と呼ばれる候補ペアリストに追加されます. 

最適化として、RがLのチェックメッセージを受信するとすぐに、Rは接続性チェックメッセージが同じ候補ペアのLに送信されるようにスケジュールします. これは「トリガーチェック」と呼ばれ、有効なペアを見つけるプロセスを加速します. 

このハンドシェイクの終了時に、LとRの両方が、メッセージをエンドツーエンドで両方向に送信（および受信）できることを認識します. 

一般に、優先度アルゴリズムは、同様のタイプの候補が同様の優先度を取得するように設計されているため、間接ルート（データリレーまたはNATのあるルート）よりも直接ルート（つまり、データリレーまたはNATのないルート）が優先されます. ただし、これらのガイドラインの範囲内で、エージェントはアルゴリズムを調整する方法についてかなりの裁量権を持っています. 

データストリームは、複数のコンポーネント（RTPやRTCPなど、独自の候補セットを必要とするデータストリームの一部）で構成されている場合があります. 

2.3. 候補ペアの指名とICEの締めくくり

ICEは、一方のICEエージェントを制御エージェントの役割に割り当て、もう一方を制御エージェントの役割に割り当てます. 制御エージェントは、データストリームの各コンポーネントについて、データに使用する有効なペア（有効なリストから）を指定します. 指名の正確なタイミングは、localの方針に基づいています. 

指名する場合、制御エージェントは、データストリームの各コンポーネントに対して少なくとも1つの有効なペアが見つかるまでチェックを続行し、次に有効なペアを選択し、属性を使用してそのペアに対してSTUN要求を送信します. それが指名されたことをピア. これを図4に示します. 

             L                        R
             -                        -
             STUN request ->             \  L's
                       <- STUN response  /  check

                        <- STUN request  \  R's
             STUN response ->            /  check

             STUN request + attribute -> \  L's
                       <- STUN response  /  check

                           Figure 4: Nomination
        
図4：指名

制御対象エージェントは、属性を使用してSTUN要求を受信すると、同じペアをチェックします（チェックが既に行われていない場合）. 上記のトランザクションが成功した場合、エージェントはペアの指定フラグを設定し、データストリームのそのコンポーネントの今後のチェックをキャンセルします. エージェントがデータストリームの各コンポーネントに指定フラグを設定すると、ペアが選択されたペアになります. その後、選択したペアのみが、そのデータストリームに関連付けられたデータの送受信に使用されます. 



2.4. ICE再起動

ICEが終了すると、いずれかのICEエージェントによって、1つまたはすべてのデータストリームに対していつでも再起動できます. これは、再起動を示す更新された候補情報を送信することによって行われます. 

2.5. Liteの実装

特定のICEエージェントは、常にパブリックインターネットに接続され、コレスポンデントからパケットを受信できるパブリックIPアドレスを持っています. これらのデバイスがICEをサポートしやすくするために、ICEは「ライト」と呼ばれる特別なタイプの実装を定義します（通常の完全な実装とは対照的です）. Liteエージェントはホスト候補のみを使用し、接続チェックを生成したり、ステートマシンを実行したりしませんが、接続チェックに応答できる必要があります. 

3. ICEの使用法

このドキュメントでは、ICEエージェント間で候補情報を交換する手段を提供するプロトコルでのICEの一般的な使用法を指定します. ICEを使用したさまざまなプロトコル（「プロトコルの使用」と呼ばれる）の具体的な詳細（つまり、候補情報のエンコード方法と実際の候補交換プロセス）は、個別の使用文書に記載されています. 

エージェントが候補情報を交換できるようにするメカニズムの1つは、SIPプロトコル[RFC3261] [ICE-SIP-SDP]の一部としてのオファー/アンサーセマンティクス（[RFC3264]に基づく）の利用です. 

[RFC7825]は、Real-Time Streaming Protocol（RTSP）のICE使用法を定義しています. ただし、ICEの使用法はRFC5245に基づいていることに注意してください. 

4.用語
キーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「NOT RECOMMENDED」、「MAY」、「OPTIONAL」 「このドキュメントでは、BCP 14 [RFC2119] [RFC8174]で説明されているように、ここに示すように、すべて大文字で表示される場合にのみ解釈されます. 

読者は、[RFC5389]で定義されている用語とUDPのNAT動作要件[RFC4787]に精通している必要があります. 

この仕様では、次の追加用語を使用しています. 

ICEセッション：ICEセッションは、すべての候補者が解放されるか、またはICEの再起動がトリガーされるまで、候補者の収集から始まり、ICEエージェント間の相互作用（候補者交換、接続性チェック、指名、キープライブ）が続くICE関連のすべてのアクションで構成されています

ICEエージェント、エージェント：ICEエージェント（単に「エージェント」と呼ばれることもあります）は、ICE候補交換に関係するプロトコル実装です. 典型的な候補者交換には2人のエージェントが関わっています. 

開始ピア、開始エージェント、開始者：開始エージェントは、ICE候補交換プロセスを開始するICEエージェントです. 

応答ピア、応答エージェント、レスポンダー：応答エージェントは、開始エージェントによって開始された候補交換プロセスを受信して​​応答するICEエージェントです. 

ICE Candidate Exchange、Candidate Exchange：ICEエージェントがICEを実行するために必要な情報（候補者やパスワードなど）を交換するプロセス. SDPエンコーディング[RFC3264]を使用したオファー/アンサーは、候補者情報の交換に使用できるプロトコルの一例です. 

ピア：セッション内のICEエージェントの1つから見ると、そのピアはもう1つのエージェントです. 具体的には、開始エージェントの観点からは、ピアが応答エージェントです. 応答エージェントの観点からは、ピアが開始エージェントです. 

トランスポートアドレス：IPアドレスとトランスポートプロトコル（UDPやTCPなど）ポートの組み合わせ. 

データ、データストリーム、データセッション：ICEを使用してデータセッションを設定する場合、データは何らかのプロトコルを使用して転送されます. メディアは通常、RTPパケットのストリームで構成されるRTPを介して転送されます. データセッションとは、ICEで作成およびテストされたパス上のピア間で交換されるデータパケットを指します. 

候補者、候補者情報：データを受信するための潜在的な連絡先となるトランスポートアドレス. 候補には、タイプ（サーバー再帰、リレー、またはホスト）、優先度、foundation、およびベースなどのプロパティもあります. 

コンポーネント：コンポーネントはデータストリームの一部です. データストリームには複数のコンポーネントが必要な場合があり、データストリーム全体が機能するには、それぞれが機能する必要があります. RTP / RTCPデータストリームの場合、RTPとRTCPが同じポートで多重化されていない限り、データストリームごとに2つのコンポーネントがあります. 1つはRTP用、もう1つはRTCP用です. コンポーネントには候補ペアがあり、他のコンポーネントでは使用できません. 

ホスト候補：ホスト上のIPアドレスから特定のポートにバインドすることによって取得される候補. これには、物理​​インターフェイスのIPアドレスと、VPNを介して取得したものなどの論理インターフェイスのIPアドレスが含まれます. 

Server-Reflexive Candidate：IPアドレスとポートがNATを介してSTUNサーバーなどのサーバーにパケットを送信した後、NATによってICEエージェントに割り当てられたバインディングである候補. 

Peer-Reflexive Candidate：IPアドレスとポートがNATを介してピアにパケットを送信した後にNATによってICEエージェントに割り当てられたバインディングである候補. 

中継候補：TURNサーバーなどの中継サーバーから取得した候補. 

ベース：ICEエージェントが特定の候補者のために送信するトランスポートアドレス. ホスト、サーバー再帰、およびピア再帰の候補の場合、ベースはホスト候補と同じです. 中継された候補の場合、ベースは中継された候補と同じです（つまり、TURNサーバーが送信元として使用するトランスポートアドレス）. 

関連アドレスとポート：候補に関連するトランスポートアドレス. 診断やその他の目的に役立ちます. 候補がサーバーまたはピアリフレクシブである場合、関連するアドレスとポートは、そのサーバーまたはピアリフレクシブ候補のベースと同じです. 候補が中継される場合、関連するアドレスとポートは、その中継された候補をクライアントに提供したAllocate応答でマップされたアドレスと等しくなります. 候補がホスト候補の場合、関連するアドレスとポートはホスト候補と同じです. 

Foundation：類似した候補をグループ化するためにフリーズアルゴリズムで使用される任意の文字列. 同じタイプ、ベースIPアドレス、プロトコル（UDP、TCPなど）、およびSTUNまたはTURNサーバーを持つ2つの候補についても同じです. これらのいずれかが異なる場合、foundationは異なります. 

ローカル候補：ICEエージェントが取得し、そのピアに送信する可能性のある候補. 

リモート候補：ICEエージェントがピアから受け取った候補. 

デフォルトの宛先/候補：データストリームのコンポーネントのデフォルトの宛先は、ICEを認識しないICEエージェントによって使用されるトランスポートアドレスです. コンポーネントのデフォルトの候補は、トランスポートアドレスがそのコンポーネントのデフォルトの宛先と一致するものです. 

候補ペア：ローカル候補とリモート候補を含むペア. 

チェック、接続性チェック、STUNチェック：接続性を検証するためのSTUNバインディングリクエスト. 小切手は、ローカル候補のベースから候補ペアのリモート候補に送信されます. 

チェックリスト：ICEエージェントがチェックを生成するために使用する候補ペアの順序付きセット. 

通常のチェック：定期的に起動するタイマーの結果としてICEエージェントによって生成され、チェックを送信するように指示する接続チェック. 

トリガーされたチェック：ピアからの接続チェックの受信の結果として生成された接続チェック. 

有効なペア：ローカル候補が成功した接続チェック応答のマップされたアドレスに等しく、リモート候補が接続チェック要求が送信された宛先アドレスに等しい候補ペア. 

有効なリスト：成功したSTUNトランザクションによって検証されたデータストリームの候補ペアの順序セット. 

チェックリストセット：すべてのチェックリストの順序付きリスト. 順序は、各ICEの使用法によって決定されます. 

完全な実装：この仕様で定義された機能の完全なセットを実行するICE実装. 

ライト実装：特定の機能を省略したICE実装. ライト実装ではないピアがICEのメリットを享受するために必要なだけ実装します. Lite実装は、ステートマシンを維持せず、接続チェックを生成しません. 

制御エージェント：候補ペアを指名するICEエージェント. どのセッションでも、常に1つの制御エージェントと1つの制御エージェントが存在します. 

被制御エージェント：制御エージェントが候補ペアを指名するのを待つICEエージェント. 

指名：ICEエージェントがデータの送受信に使用する候補ペアを制御エージェントに示す制御エージェントのプロセス. この仕様で定義されている指名プロセスは、RFC 5245では「通常の指名」と呼ばれていました. RFC5245では「積極的な指名」と呼ばれていた指名プロセスは、この仕様では非推奨になりました. 

指名、指名フラグ：候補ペアの指名が成功すると、候補ペアが指名され、その指名フラグの値がtrueに設定されます. 

選択されたペア、選択された候補ペア：データストリームのコンポーネントのデータを送受信するために使用される候補ペアは、「選択されたペア」と呼ばれます. 選択したペアがデータストリーム用に生成される前に、データストリームのコンポーネントに関連付けられた有効なペアを使用して、コンポーネントのデータを送受信できます. データストリームの各コンポーネントに指定されたペアがあると、指定されたペアがデータストリーム用に選択されたペアになります. 選択されたペアに関連付けられた候補は、「選択された候補」と呼ばれます. 

プロトコルの使用、ICEの使用法：NATトラバーサルにICEを使用するプロトコル. 使用仕様は、ここで定義された手順がそのプロトコルにどのように適用されるかに関するプロトコル固有の詳細を定義します. 

タイマーTa：新しいSTUNまたはTURNトランザクションを生成するためのタイマー. 

タイマーRTO（再送信タイムアウト）：特定のSTUNまたはTURNトランザクションの再送信タイマー. 

5. ICE候補者の収集と交換

ICE処理の一部として、開始エージェントと応答エージェントの両方が候補を収集し、冗長な候補に優先順位を付けて排除し、使用プロトコル（ICE使用法）で定義されているようにピアと候補情報を交換します. 候補エンコーディングメカニズムの詳細と候補情報交換のセマンティクスは、この仕様の範囲外です. 

5.1. 完全な実装

5.1.1. 候補者の収集

ICEエージェントは、コミュニケーションが差し迫っていると信じるときに候補者を集めます. 開始エージェントは、ユーザーインターフェイスキューまたはセッションを開始するための明示的な要求に基づいてこれを行うことができます. すべての候補者は輸送先住所を持っています. タイプとベースもあります. この仕様では、ホスト候補、サーバー再帰候補、ピア再帰候補、およびリレー候補の4つのタイプが定義および収集されます. サーバー再帰候補はSTUNまたはTURNを使用して収集され、中継された候補はTURNを介して取得されます. ピアリフレクティブ候補は、接続チェックの結果として、ICEの後のフェーズで取得されます. 

応答エージェントで候補を収集するプロセスは、開始エージェントのプロセスと同じです. 応答エージェントは、ICEセッションに関連付けられたアプリケーションについてユーザーに警告する前に、候補情報を受信するとすぐにこのプロセスを開始することをお勧めします. 

5.1.1.1. ホスト候補者

ホスト候補は、ホスト上のインターフェイス（VPNインターフェイスを含む物理または仮想）に接続されたIPアドレスのポートにバインドすることによって取得されます. 

ICEエージェントが使用したい各データストリームの各コンポーネントについて、エージェントは、以下にリストされている例外を除いて、ホストが持っている各IPアドレスで候補を取得する必要があります. エージェントは、特定のIPアドレスのUDPポートにバインドすることにより、各候補を取得します. ホスト候補（および実際にはすべての候補）は、常にそれが候補である特定のコンポーネントに関連付けられています. 

各コンポーネントには、「コンポーネントID」と呼ばれるIDが割り当てられています. RTP / RTCPデータストリームの場合、RTPとRTCPの両方が同じUDPポートで多重化されていない限り（RTP / RTCP多重化）、RTP自体のコンポーネントIDは1、RTCPのコンポーネントIDは2です. RTP/の場合RTCP多重化. コンポーネントID1は、RTPとRTCPの両方に使用されます. 
候補が取得されたとき、エージェントがRTP / RTCP多重化が使用されることを確実に知っていない限り（つまり、エージェントは他のエージェントもRTP / RTCP多重化をサポートし、使用する意思があることを知っている）、またはエージェントがサポートするだけでない限りRTP / RTCP多重化の場合、エージェントはRTCPの個別の候補を取得する必要があります. エージェントがRTCPの候補を取得し、最終的にRTP / RTCP多重化を使用する場合、エージェントはRTCP候補に対して接続チェックを実行する必要はありません. コンポーネントID2がないこと自体は、RTCP / RTP多重化の使用を意味するものではありません. これは、RTCPが使用されていないことを意味する場合もあるためです. 

エージェントがRTPとRTCPに別々の候補を使用している場合、エージェントがK個のIPアドレスを持っていれば、最終的に2 * K個のホスト候補になります. 

応答エージェントは、候補を取得するときに、通常、他のエージェントがRTP / RTCP多重化をサポートしているかどうかを認識します. その場合、RTCPの個別の候補を取得する必要はありません. ただし、コンポーネントID 2がないこと自体は、RTCP / RTP多重化の使用を意味するものではなく、RTCPが使用されていないことを意味する場合もあります. 

RTP / RTCPストリーム以外の複数のコンポーネントを使用すると、ICE処理が複雑になるため、お勧めしません. 複数のコンポーネントが必要な場合、コンポーネントIDは1から始まり、コンポーネントごとに1ずつ増加する必要があります. 

各ホスト候補のベースは、候補自体に設定されます. 

ホスト候補は、次の例外を除いて、すべてのIPアドレスから収集されます. 

oループバックインターフェイスからのアドレスを候補アドレスに含めてはなりません. 

o非推奨のIPv4互換IPv6アドレス[RFC4291]およびIPv6サイトローカルユニキャストアドレス[RFC3879]をアドレス候補に含めてはなりません（MUSTNOT）. 

o ICEを使用するアプリケーションがIPv4をサポートしていない場合（つまり、IPv6のみのアプリケーション[RFC4038]）を除いて、IPv4にマップされたIPv6アドレスをアドレス候補に含めるべきではありません. 

oロケーショントラッキングを防止するメカニズム[RFC7721]を使用して生成されたIPv6アドレスに対応する1つ以上のホスト候補を収集する場合、ロケーショントラッキングを許可するIPv6アドレスに対応するホスト候補は、同じインターフェイスで構成され、同じネットワークプレフィックスの一部を収集してはなりません.

 同様に、位置追跡を防止するメカニズムを使用して生成されたIPv6アドレスに対応するホスト候補を収集する場合、IPv6リンクローカルアドレス[RFC4291]に対応するホスト候補を収集してはなりません（MUSTNOT）. 

IPv6のデフォルトアドレス選択仕様[RFC6724]は、一時アドレス[RFC4941]が永続アドレスよりも優先されることを指定しています. 

5.1.1.2. サーバー-再帰的および中継された候補

ICEエージェントは、サーバーを反射的に中継する候補を収集する必要があります. ただし、特定のネットワークではSTUNサーバーとTURNサーバーの使用が不要であり、TURNサーバーの使用に費用がかかる場合があるため、一部の展開ではそれらを使用しないことを選択する場合があります. エージェントがサーバーリフレクティブまたはリレーされた候補を収集しない場合は、機能を実装し、構成によって無効にすることをお勧めします. これにより、将来条件が変更された場合に構成を通じて再度有効にできます. 

エージェントは、各ホスト候補を、それが構成されている、または何らかの方法で検出されたSTUNサーバーまたはTURNサーバーとペアにします. ドメイン名を構成し、[RFC5389]のDNSプロシージャ（「stun」サービスでSRVレコードを使用）を使用してSTUNサーバーを検出し、[RFC5766]のDNSプロシージャ（SRVレコードを使用する）を使用することをお勧めします.  「ターン」サービス）は、TURNサーバーを検出するために使用されます. 

複数のSTUNまたはTURNサーバーが利用可能な場合（またはDNSレコードを通じて学習され、複数の結果が返される場合）、エージェントはそれらすべての候補を収集する場合があり、少なくとも1つ（1つのSTUNサーバーと1つのTURN）の候補を収集する必要があります. サーバ）. これは、ホスト候補をSTUNまたはTURNサーバーとペアリングすることによって行われ、ペアごとに、エージェントはホスト候補からサーバーにバインディングまたは割り当て要求を送信します. STUNサーバーへのバインド要求は認証されず、応答内のALTERNATE-SERVER属性はすべて無視されます. エージェントは、[RFC5389]で定義されているバインディング要求の下位互換モードをサポートする必要があります. 割り当て要求は、他の方法でクライアントが取得した長期資格情報を使用して認証する必要があります. 

収集プロセスは、タイマーTaを使用して制御されます. Taが期限切れになるたびに、エージェントは別の新しいSTUNまたはTURNトランザクションを生成できます. このトランザクションは、回復可能なエラー（認証の失敗など）で失敗した前のトランザクションの再試行、または新しいホスト候補とSTUNまたはTURNサーバーのペアのトランザクションのいずれかです. エージェントは、有効期限ごとに1回以上トランザクションを生成するべきではありません（SHOULDNOT）. TaおよびSTUN再送信タイマーRTOの設定方法については、セクション14を参照してください. 
エージェントは、BindingまたはAllocate応答を受け取ります. 割り当て応答が成功すると、エージェントにサーバー再帰候補（マップされたアドレスから取得）とXOR-RELAYED-ADDRESS属性のリレー候補が提供されます. サーバーにそれを満たすためのリソースがないために割り当て要求が拒否された場合、エージェントは代わりにバインディング要求を送信してサーバー再帰候補を取得する必要があります. バインディング応答は、サーバー再帰候補（マップされたアドレスからも取得）のみをエージェントに提供します. サーバー再帰候補のベースは、AllocateまたはBinding要求の送信元のホスト候補です. 中継された候補のベースは、その候補自体です. 中継された候補がホスト候補と同一である場合（まれに発生する可能性があります）、中継された候補は破棄する必要があります. 

IPv6のみのエージェントがNAT64 [RFC6146]およびDNS64 [RFC6147]テクノロジーを利用するネットワーク内にある場合、IPv4のみのSTUNまたはTURNサーバーからIPv4サーバー再帰および/または中継候補を収集することもあります. IPv6のみのエージェントは、IPv6プレフィックス検出[RFC7050]を利用して、NAT64（存在する場合）によって使用されるIPv6プレフィックスを検出し、それに応じて各IPv6のみのインターフェイスのサーバー再帰候補を生成する必要があります. NAT64サーバー再帰候補は、IPv4サーバー再帰候補と同様に優先されます. 

5.1.1.3. コンピューティングのFoundations

ICEエージェントは各候補者にfoundationを割り当てます. 次のすべてが当てはまる場合、2人の候補者は同じfoundationを持っています. 

o同じタイプ（ホスト、リレー、サーバー再帰、またはピア再帰）です. 

oそれらのベースは同じIPアドレスを持っています（ポートは異なる場合があります）. 

o反射候補と中継候補の場合、それらを取得するために使用されるSTUNまたはTURNサーバーは同じIPアドレス（エージェントがSTUNまたはTURNサーバーに接続するために使用するIPアドレス）を持ちます. 

o同じトランスポートプロトコル（TCP、UDP）を使用して取得されました. 

同様に、2つの候補は、タイプが異なり、ベースのIPアドレスが異なり、それらを取得するために使用されるSTUNまたはTURNサーバーのIPアドレス（エージェントがSTUNまたはTURNサーバーに接続するために使用するIPアドレス）が異なる場合、foundationが異なります. またはそれらのトランスポートプロトコルが異なります. 

5.1.1.4.候補者を生かしておく

サーバーリフレクティブ候補とリレー候補が割り当てられると、セクション8.3で説明されているように、ICE処理が完了するまでそれらを存続させなければなりません. バインディング要求を通じて学習されたサーバー再帰候補の場合、サーバーへの追加のバインディング要求によってバインディングを存続させなければなりません. 割り当ての更新は、[RFC5766]で説明されているように、更新トランザクションを使用して行われます. 更新要求は、サーバー再帰候補も更新します. 

ホスト候補はタイムアウトしませんが、候補アドレスはいくつかの理由で変更または消失する可能性があります. ICEエージェントは、使用するインターフェイスを監視し、ベースがなくなった候補を無効にし、新しいIPアドレス（新しいインターフェイスまたは現在使用されているインターフェイス）が表示されたときに、必要に応じて新しい候補を取得する必要があります. 

5.1.2.候補者の優先順位付け

優先順位付けプロセスにより、各候補者に優先順位が割り当てられます. データストリームの各候補には、1から（2 ** 31-1）までの正の整数でなければならない一意の優先度が必要です. この優先度は、接続チェックの順序と候補の相対的な優先度を決定するためにICEによって使用されます. 優先度の高い値は、低い値よりも優先度が高くなります. 

ICEエージェントは、セクション5.1.2.1の式を使用してこの優先度を計算し、セクション5.1.2.2のガイドラインを使用してそのパラメーターを選択する必要があります. エージェントが別の式を使用することを選択した場合、エージェントがチェックで調整されないため、ICEの収束に時間がかかる場合があります. 

候補者に優先順位を付けるプロセスは、開始エージェントと応答エージェントに共通です. 

5.1.2.1. 推奨される処方

推奨される式は、候補タイプ（サーバー反射、ピア反射、リレー、およびホスト）のプリファレンス、候補が取得されたIPアドレスのプリファレンス、および次の式を使用したコンポーネントIDを組み合わせたものです. 

   優先度=（2 ^ 24）*（タイプ設定）+
              （2 ^ 8）*（地域の好み）+
              （2 ^ 0）*（256-コンポーネントID）
        
タイププリファレンスは、0（最低プリファレンス）から126（最高プリファレンス）までの整数である必要があり、同じタイプのすべての候補で同一である必要があり、異なるタイプの候補で異なる必要があります. ピアリフレクティブ候補のタイププリファレンスは、サーバーリフレクティブ候補のタイププリファレンスよりも高くなければなりません. 値を0に設定すると、このタイプの候補は最後の手段としてのみ使用されます. セクション5.1.1の手順に基づいて収集された候補者は、ピアリフレクティブ候補者になることは決してないことに注意してください. このタイプの候補は、ICEによって実行される接続チェックから学習されます. 

ローカルプリファレンスは、0（最低プリファレンス）から65535（最高プリファレンス）までの整数でなければなりません. IPアドレスが1つしかない場合、この値は65535に設定する必要があります. 同じタイプの特定のデータストリームの特定のコンポーネントに複数の候補がある場合、ローカルプリファレンスはそれぞれに対して一意である必要があります. ICEエージェントがデュアルスタックの場合、ローカルプリファレンスは[RFC8421]で説明されている現在のベストプラクティスに従って設定する必要があります. 

コンポーネントIDは、1から256までの整数でなければなりません. 

5.1.2.2. タイプとローカル設定を選択するためのガイドライン

タイププリファレンスのRECOMMENDED値は、ホスト候補の場合は126、ピア再帰候補の場合は110、サーバー再帰候補の場合は100、リレー候補の場合は0です. 

ICEエージェントがマルチホームであり、複数のIPアドレスを持っている場合は、[RFC8421]の推奨事項に従う必要があります. 複数のTURNサーバーを使用する場合、TURNサーバーから取得した候補のローカル優先度は、マルチホームローカル候補の場合と同様の方法で選択されます. ローカル設定値は、異なるサーバー間の設定を示すために使用されますが、設定は一意である必要があります. それぞれ. 

タイプ設定を選択するとき、エージェントは、遅延、パケット損失、コスト、ネットワークトポロジ、セキュリティ、プライバシーなどの要因を考慮に入れる場合があります. 

5.1.3. 冗長な候補者の排除

次に、ICEエージェント（開始および応答）は冗長な候補を排除します. 2つの候補は、同じトランスポートアドレスを持ちながらベースが異なる可能性があり、これらは冗長とは見なされません. 多くの場合、エージェントがNATの背後にない場合、サーバー再帰候補とホスト候補は冗長になります. 候補は、そのトランスポートアドレスとベースが別の候補のものと等しい場合にのみ冗長です. エージェントは、優先度の低い冗長な候補を排除する必要があります. 

5.2.Liteの実装手順

Liteの実装では、ホスト候補のみを使用します. IPアドレスファミリに関係なく、IPアドレスごとに、候補が0個または1個存在する必要があります. ライトの実装では、ICEを使用して候補の中から動的に選択することはできません. したがって、特定のIPアドレスファミリから複数の候補を含めることはお勧めしません. これは、接続チェックだけが1つのアドレスを使用するか他のアドレスを使用するかを真に判断できるためです. 代わりに、複数のパブリックIPアドレスを持つエージェントが完全なICE実装を実行して、そのアドレスを最適に使用できるようにすることをお勧めします. 

各コンポーネントには、「コンポーネントID」と呼ばれるIDが割り当てられています. RTP / RTCPデータストリームの場合、RTCPがRTPと同じポートで多重化されていない限り、RTP自体のコンポーネントIDは1、RTCPのコンポーネントIDは2です. エージェントが多重化せずにRTCPを使用している場合は、その候補を取得する必要があります.  . ただし、コンポーネントID 2がないこと自体は、RTCP / RTP多重化の使用を意味するものではありません. これは、RTCPが使用されていないことを意味する場合もあるためです. 

各候補者にはfoundationが割り当てられます. foundationは、異なるIPアドレスから割り当てられた2つの候補に対して異なる必要があります. それ以外の場合は、同じでなければなりません. IPアドレスごとに増分する単純な整数で十分です. さらに、各候補には、同じデータストリームのすべての候補の中で一意の優先順位を割り当てる必要があります. セクション5.1.2.1の式を使用して優先度を計算する場合、タイプ設定値は126に設定する必要があります. ホストがIPv4のみの場合、ローカル設定値は65535に設定する必要があります. ホストがIPv6またはデュアルスタックの場合、ローカルプリファレンス値は、RFC 6724 [RFC6724]で説明されているIPアドレスの優先値に設定する必要があります. 

次に、エージェントは各データストリームの各コンポーネントのデフォルト候補を選択します. ホストがIPv4のみの場合、各データストリームの各コンポーネントに候補は1つだけです. したがって、その候補がデフォルトです. ホストがIPv6のみの場合、デフォルトの候補は通常、グローバルスコープのIPv6アドレスになります. デュアルスタックホストは、デフォルトの候補にIPv4またはIPv6のどちらを使用するかを構成できるようにする必要があります. 構成は、現在のネットワーク環境で成功する可能性が高いと管理者が考えるものに基づく必要があります. 

このセクションの手順は、開始エージェントと応答エージェントに共通です. 

5.3.候補者情報の交換

ICEエージェント（開始および応答）は、交換される候補者に関する次の情報を必要とします. 各ICEの使用法は、使用するプロトコルと情報を交換する方法を定義する必要があります. このセクションでは、交換する必要のある情報について説明します. 

候補者：1人以上の候補者. 各候補者について：

アドレス：候補のIPアドレスとトランスポートプロトコルポート. 

トランスポート：候補者のトランスポートプロトコル. 使用プロトコルが単一のトランスポートプロトコルでのみ実行される場合、これは省略できます. 

foundation：最大32文字のシーケンス. 

コンポーネントID：候補のコンポーネントID. 使用するプロトコルがコンポーネントの概念を使用しない場合、これは省略できます. 

優先度：候補の32ビットの優先度. 

タイプ：候補者のタイプ. 

関連するアドレスとポート：候補者の関連するIPアドレスとポート. エージェントがプライバシー上の理由などでそれらを明らかにしたくない場合、これらは省略されるか、無効な値に設定される場合があります. 

拡張性パラメーター：使用プロトコルは、将来、候補ごとの新しいICEパラメーターを追加するための手段を定義する可能性があります. 

ライトまたはフル：エージェントがライトエージェントかフルエージェントか. 

接続性チェックのペーシング値：エージェントが使用する接続性チェックのペーシング値. エージェントが定義済みのデフォルト値を使用する場合は、これを省略できます. 

ユーザー名フラグメントとパスワード：接続チェックの実行に使用される値. 値は推測できないものでなければならず、パスワードの生成には少なくとも128ビットの乱数ジェネレーター出力が使用され、ユーザー名フラグメントの生成には少なくとも24ビットの出力が使用されます. 

拡張機能：新しいメディアストリームまたはセッションレベルの属性（ICEオプション）. 

使用しているプロトコルがICEの不一致に対して脆弱であり、検出できる場合（セクション5.4）、検出エージェントがこの情報をピアに伝達する方法が必要です. ブールフラグです. 

使用するプロトコルは、ICEをサポートしない古い実装との下位互換性に対処する必要がある場合とない場合があります. 非ICEへのフォールバックメカニズムがサポートされ、使用されている場合、おそらく使用プロトコルは、ICEパラメータに加えてデフォルトの候補（そのIPアドレスとポート）を伝達する方法を提供します. 

エージェントが候補情報を送信したら、各候補でSTUNパケットとデータパケットの両方を受信できるように準備する必要があります. セクション12.1で説明したように、データパケットは、データのデフォルトの宛先として表示される前に候補に送信できます. 

5.4. ICEの不一致

ALGなどの特定のミドルボックスは、ICEを破壊する方法でシグナリング情報を変更できます（たとえば、SDPでIPアドレスを書き換えることによって）. これは「ICEミスマッチ」と呼ばれます. 使用しているプロトコルがICEの不一致に対して脆弱である場合、応答エージェントはそれを検出し、ピアICEエージェントにICEの不一致について通知できる必要があります. 

各使用プロトコルは、使用プロトコルがICE不一致に対して脆弱であるかどうか、ICE不一致を検出する方法、およびICE不一致が検出されたときに特定のアクションを実行する必要があるかどうかを定義する必要があります. 

6. ICE候補処理

ICEエージェントが候補者を集め、候補者をピアと交換すると（セクション5）、ICEエージェントは自身の役割を決定します. さらに、完全な実装はチェックリストを形成し、ピアとの接続チェックの実行を開始します. 

6.1. 完全な実装の手順

6.1.1.役割の決定

セッションごとに、各ICEエージェント（開始および応答）が役割を果たします. 制御と制御の2つの役割があります. 制御エージェントは、通信に使用される最終的な候補ペアの選択に責任があります. 以下のセクションでは、制御エージェントと制御エージェントが従う実際の手順について詳しく説明します. 

役割と行動への影響を決定するためのルールは次のとおりです. 

両方のエージェントがいっぱいです. ICE処理を開始した開始エージェントが制御の役割を担う必要があり、もう一方が制御の役割を担う必要があります. 両方のエージェントがチェックリストを作成し、ICEステートマシンを実行して、接続チェックを生成します. 制御エージェントはセクション8.1のロジックを実行して、選択されたペアになるペアを指定し（指定に関連付けられた接続チェックが成功した場合）、セクション8.1.2で説明されているように両方のエージェントがICEを終了します. 

1つのエージェントがフル、1つのライト：フルエージェントが制御の役割を担う必要があり、ライトエージェントが制御の役割を担う必要があります. 完全なエージェントは、チェックリストを作成し、ICEステートマシンを実行し、接続チェックを生成します. そのエージェントは、セクション8.1のロジックを実行して、選択されたペアになるペアを指定し（指定に関連付けられた接続チェックが成功した場合）、セクション8.1.2のロジックを使用してICEを終了します. ライトの実装は、接続チェックをリッスンし、それらを受信して​​応答し、セクション8.2で説明されているようにICEを終了します. ライト実装の場合、各データストリームのICE処理の状態は実行中と見なされ、ICE全体の状態は実行中です. 

両方のライト：ICE処理を開始した開始エージェントは制御の役割を引き受けなければならず、もう一方は制御の役割を引き受けなければなりません. この場合、接続チェックは送信されません. むしろ、候補が交換されると、各エージェントは接続チェックなしでセクション8で説明されている処理を実行します. 両方のエージェントが、自分が制御されている、または制御していると信じている可能性があります. 後者の場合、競合は、候補交換を可能にするシグナリングプロトコルのグレア検出機能によって解決されます. 各データストリームのICE処理の状態は実行中と見なされ、ICE全体の状態は実行中です. 

セッションの役割が決定されると、それらはセッションの存続期間を通じて存続します. 役割はICE再起動の一部として再決定できますが（セクション9）、ICEエージェントは、次の基準の1つ以上が満たされない限り、ICE再起動の一部として役割を再決定してはなりません. 

フルがライトになります：制御エージェントがフルでライトに切り替わる場合、ピアエージェントもフルである場合はロールを再決定する必要があります. 



ロールの競合：ICEの再起動によってロールの競合が発生した場合、セクション7.3.1.1のロールの競合手順により、ロールが再決定される可能性があります. 

注：ICEの再起動によって役割の競合が発生する可能性がある特定のサードパーティコール制御（3PCC）[RFC3725]シナリオがあります. 

注：エージェントは、役割を決定する前に、フルかライトかを相互に通知する必要があります. そのメカニズムは、シグナリングプロトコルに固有であり、ドキュメントの範囲外です. 

エージェントは、ピアが役割の再決定を開始する場合、そうするための基準が満たされていない場合でも、受け入れる必要があります. これは、ピアがRFC5245に準拠している場合に発生する可能性があります. 

6.1.2. チェックリストの作成

データストリームごとに1つのチェックリストがあります. チェックリストを作成するには、開始および応答するICEエージェントが候補ペアを作成し、ペアの優先度を計算し、ペアを優先度で並べ替え、ペアを整理し、優先度の低いペアを削除し、チェックリストの状態を設定します. 候補がチェックリストに追加された場合（たとえば、ピアリフレクティブ候補が検出されたため）、エージェントは更新されたチェックリストに対してこれらの手順を再実行します. 

6.1.2.1. チェックリストの状態

各チェックリストには状態があり、チェックリストに関連付けられたデータストリームのICEチェックの状態をキャプチャします. 状態は次のとおりです. 

実行中：チェックリストはまだ完了も失敗もしていません. チェックリストは、最初は実行状態に設定されています. 

完了：チェックリストには、データストリームの各コンポーネントの指定されたペアが含まれています. 

失敗：チェックリストには、データストリームの各コンポーネントの有効なペアがなく、チェックリスト内のすべての候補ペアが失敗または成功の状態になっています. つまり、チェックリストの少なくとも1つのコンポーネントに、すべてが失敗状態にある候補ペアがあります. これは、コンポーネントが失敗したことを意味し、チェックリストが失敗したことを意味します. 

6.1.2.2.候補ペアの形成

ICEエージェントは、同じIPアドレスファミリを持つ同じデータストリームの同じコンポーネントの各ローカル候補と各リモート候補をペアにします. 一部のローカル候補がリモート候補とペアにならない可能性があり、一部のリモート候補がローカル候補とペアにならない可能性があります. これは、1つのエージェントにデータストリームのすべてのコンポーネントの候補が含まれていない場合に発生する可能性があります. これが発生した場合、そのデータストリームのコンポーネントの数は効果的に削減され、データストリームのすべてのコンポーネントにわたって各エージェントによって提供される最大コンポーネントIDの両方のエージェントにわたる最小値に等しいと見なされます. 

RTPの場合、これは、一方のエージェントがRTCPの候補を提供し、もう一方が提供しない場合に発生します. 別の例として、開始エージェントは同じポートでRTPとRTCPを多重化できます[RFC5761]. ただし、開始エージェントはピアエージェントがそのような多重化を実行できるかどうかわからないため、別々のポートにRTPとRTCPの候補が含まれます. ピアエージェントがそのような多重化を実行できる場合、候補ごとに1つのコンポーネント（RTP / RTCPマルチプレクサの組み合わせ）が含まれます. ICEは、この候補のコンポーネントが1つしかないかのように動作することになります. 

IPv6では、ホストがインターフェイスごとに複数のホスト候補を持つのが一般的です. 結果として得られる候補ペアの量を合理的に保ち、機能する可能性が非常に低い候補ペアを回避するために、IPv6リンクローカルアドレスをリンクローカルアドレス以外とペアにしないでください. 

ローカル候補とリモート候補の両方が特定のコンポーネントのデフォルト候補である候補ペアは、そのコンポーネントの「デフォルト候補ペア」と呼ばれます. これは、両方のエージェントがICEを認識していなかった場合にデータを送信するために使用されるペアです. 


図5は、トランスポートアドレス、候補、候補ペア、およびチェックリストのプロパティとそれらの間の関係を示しています. 

              +--------------------------------------------+
              |                                            |
              | +---------------------+                    |
              | |+----+ +----+ +----+ |   +Type            |
              | || IP | |Port| |Tran| |   +Priority        |
              | ||Addr| |    | |    | |   +Foundation      |
              | |+----+ +----+ +----+ |   +Component ID    |
              | |      Transport      |   +Related Address |
              | |        Addr         |                    |
              | +---------------------+   +Base            |
              |             Candidate                      |
              +--------------------------------------------+
              *                                         *
              *    *************************************
              *    *
            +-------------------------------+
            |                               |
            | Local     Remote              |
            | +----+    +----+   +default?  |
            | |Cand|    |Cand|   +valid?    |
            | +----+    +----+   +nominated?|
            |                    +State     |
            |                               |
            |                               |
            |          Candidate Pair       |
            +-------------------------------+
            *                              *
            *                  ************
            *                  *
            +------------------+
            |  Candidate Pair  |
            +------------------+
            +------------------+
            |  Candidate Pair  |
            +------------------+
            +------------------+
            |  Candidate Pair  |
            +------------------+

                 Checklist

図5：チェックリストの概念図



6.1.2.3.ペアの優先度の計算とペアの順序付け

ICEエージェントは、各候補ペアの優先度を計算します. 制御エージェントによって提供される候補の優先順位をGとします. 制御対象エージェントによって提供される候補の優先順位をDとします. ペアの優先度は次のように計算されます. 

      ペアの優先度= 2 ^ 32 * MIN（G、D）+ 2 * MAX（G、D）+（G> D？1：0）
        
エージェントは、候補ペアの優先度の高い順に各チェックリストをソートします. 2つのペアの優先度が同じである場合、それらの間の順序は任意です. 

6.1.2.4. ペアの剪定

このソートされた候補ペアのリストは、実行される接続チェックのシーケンスを決定するために使用されます. 各チェックには、ローカル候補からリモート候補へのリクエストの送信が含まれます. ICEエージェントは、再帰候補（サーバー再帰またはピア再帰）から直接要求を送信することはできず、そのベースからのみ送信するため、エージェントは次に候補ペアのソートされたリストを調べます. ローカル候補が反射的である各ペアについて、候補はそのベースで置き換えられなければなりません. 

エージェントは各チェックリストを整理します. これは、同じチェックリスト内の優先度の高い候補ペアと重複している場合に、候補ペアを削除することによって行われます. ローカル候補が同じベースを持ち、リモート候補が同一である場合、2つの候補ペアは冗長です. 結果は、そのデータストリームの「チェックリスト」と呼ばれる順序付けられた候補ペアのシーケンスです. 

6.1.2.5. 優先度の低いペアの削除

セクション19.5.1で説明されている攻撃を制限するために、ICEエージェントは、チェックリストセット内のすべてのチェックリストにわたってエージェントが実行する接続チェックの総数を制限する必要があります. これは、チェックリストセット内の候補ペアの総数を制限することによって行われます. チェックリストセットの候補ペアのデフォルトの制限は100ですが、値は構成可能である必要があります. 制限は、各チェックリスト内で、チェックリストセット内の候補ペアの総数が制限値より少なくなるまで、優先度の低い候補ペアを破棄することによって適用されます. 各チェックリストの候補ペアの数が同じ量だけ減るように、破棄は均等に行う必要があります. 

可能な場合はデフォルトよりも低い下限値を選択し、その値を実際の展開構成で作成される可能性のあるもっともらしい候補ペアの最大数に設定することをお勧めします. 構成の要件は、一度展開すると問題があることが判明した場合に、フィールドでこの値を修正するためのツールを提供することを目的としています. 

6.1.2.6. 候補ペア状態の計算

チェックリストの各候補ペアには、基礎（ペアのローカル候補とリモート候補の基礎の組み合わせ）と、次のいずれかの状態があります. 

待機中：このペアのchecksは送信されていませんが、ペアは凍結されていません. 

進行中：このペアのchecksが送信されましたが、トランザクションは進行中です. 

成功：このペアのchecksが送信され、成功した結果が生成されました. 

失敗：このペアに対してチェックが送信され、失敗しました（チェックへの応答が受信されなかったか、失敗応答が受信されました）. 

凍結：このペアのchecksは送信されておらず、ペアが凍結解除されて待機状態になるまで送信できません. 

図6に示すように、ペアは状態間を移動します. 

      +-----------+
      |           |
      |           |
      |  Frozen   |
      |           |
      |           |
      +-----------+
            |
            |unfreeze
            |
            V
      +-----------+         +-----------+
      |           |         |           |
      |           | perform |           |
      |  Waiting  |-------->|In-Progress|
      |           |         |           |
      |           |         |           |
      +-----------+         +-----------+
                                  / |
                                //  |
                              //    |
                            //      |
                           /        |
                         //         |
               failure //           |success
                     //             |
                    /               |
                  //                |
                //                  |
              //                    |
             V                      V
      +-----------+         +-----------+
      |           |         |           |
      |           |         |           |
      |   Failed  |         | Succeeded |
      |           |         |           |
      |           |         |           |
      +-----------+         +-----------+

図6：ペアステート有限ステートマシン（FSM）

チェックリストの各ペアの初期状態は、次の一連の手順を実行することによって計算されます. 

1.チェックリストは、「チェックリストセット」と呼ばれる順序付きリストに配置されます（順序は各ICEの使用法によって決定されます）. 

2. ICEエージェントは、最初にすべての候補ペアを凍結状態にします. 

3.エージェントは、チェックリストセット内のすべてのチェックリストを実行状態に設定します. 

4.各ファンデーションについて、エージェントは1つの候補ペアの状態を待機状態（フリーズ解除）に設定します. フリーズを解除する候補ペアは、そのfoundationを持つ最初のチェックリスト（使用法で定義されたチェックリストセットの順序に従って）で最初の候補ペア（コンポーネントIDが最も低い順に、次にコンポーネントIDが等しい場合は最も高い優先順位）を見つけることによって選択されます.  . 

注：上記の手順は、最初のチェックリストの候補ペアのみが最初に待機状態になったRFC5245とは異なります. これで、チェックリストがチェックリストセットの最初のものでなくても、そのfoundationを持つ最初のチェックリストの候補ペアに適用されます. 

次の表に例を示します. 

テーブルの凡例：

各行（m​​1、m2、...）は、データストリームに関連付けられたチェックリストを表します. m1は、チェックリストセットの最初のチェックリストを表します. 

各列（f1、f2、...）は基礎を表します. 特定の列内のすべての候補ペアは、同じfoundationを共有します. 

f-cpは、Frozen状態の候補ペアを表します. 

w-cpは、待機状態の候補ペアを表します. 

1.エージェントは、チェックリストセット内のすべてのペアをフリーズ状態に設定します. 

         f1 f2 f3 f4 f5
       -----------------------------
   m1 | f-cp f-cp f-cp
      |
   m2 | f-cp f-cp f-cp f-cp
      |
   m3 | f-cp f-cp
        
2.各ファンデーションについて、同じファンデーションに関連付けられた候補ペアが、チェックリストセット内の他の検査済みチェックリストのいずれかですでに待機状態になっている場合を除き、コンポーネントIDが最小の候補ペアが待機状態になります. 

         f1 f2 f3 f4 f5
       -----------------------------
   m1 | w-cp w-cp w-cp
      |
   m2 | f-cp f-cp f-cp w-cp
      |
   m3 | f-cp w-cp
        
表1：ペア状態の例

最初のチェックリスト（m1）では、同じファンデーションのペアがまだ待機状態になっていないため、各ファンデーションの候補ペアは待機状態になっています. 

2番目のチェックリスト（m2）では、ファンデーションf4の候補ペアが待機状態になります. ファンデーションf1、f2、およびf3の候補ペアは、すでに待機状態（チェックリストm1内）になっているため、凍結状態に保たれます. 

3番目のチェックリスト（m3）では、ファンデーションf5の候補ペアが待機状態になっています. ファンデーションf1の候補ペアは、そのファンデーションの候補ペアがすでに待機状態（チェックリストm1内）になっているため、凍結状態に保たれます. 

各チェックリストが処理されると、チェックリストセット内の各ファンデーションの1つの候補ペアが待機状態になります. 

6.1.3.ICE状態

ICEエージェントの状態は、チェックリストの状態によって決まります. 状態は、すべてのチェックリストが完了している場合は完了、すべてのチェックリストが失敗している場合は失敗、それ以外の場合は実行中です. 

6.1.4. スケジューリングチェック

6.1.4.1. トリガー-キューを確認

セクション6.1.2で説明されているように、ICEエージェントがチェックリストを計算し、チェックリストセットを作成すると、エージェントは接続チェック（通常およびトリガー）の実行を開始します. トリガーされた接続チェックの場合、エージェントは「トリガーされたチェックキュー」と呼ばれる各チェックリストのFIFOキューを維持します. これには、次に利用可能な機会にチェックが送信される候補ペアが含まれます. トリガーされたチェックキューは最初は空です. 

6.1.4.2. 接続チェックの実行

通常のトリガーされた接続チェックの生成は、タイマーTaによって制御されます. チェックリストセットの候補ペアの初期状態が設定されるとすぐに、セクション7の手順に従って、実行状態の最初のチェックリスト内の候補ペアのチェックが実行されます. その後、Taが次のチェックリストを起動するたびにチェックリストセットの実行状態のチェックリストが選択され、そのチェックリスト内の候補に対してチェックが実行されます. チェックリストセットの実行状態の最後のチェックリストが処理された後、最初のチェックリストが再度選択されます. 

Taが起動するたびに、ICEエージェントは、次の手順を実行して選択されたチェックリスト内の候補ペアのチェックを実行します. 

1.チェックリストに関連付けられたトリガーチェックキューに1つ以上の候補ペアが含まれている場合、エージェントはキューから最上位のペアを削除し、そのペアの接続チェックを実行し、候補ペアの状態を進行中にして、後続のステップ. 

2.待機状態の候補ペアがなく、凍結状態のペアが1つ以上ある場合、エージェントは、凍結状態の各ペアに関連付けられているファンデーションをチェックします. 特定のファンデーションで、待機状態または進行中の状態のペアが（チェックリストセットのチェックリストに）ない場合、エージェントは候補ペアの状態を待機状態にして、次のステップに進みます. 

3.待機状態の候補ペアが1つ以上ある場合、エージェントは待機状態で最も優先度の高い候補ペアを選択します（同じ優先度のペアが複数ある場合は、コンポーネントIDが最も低いペアが選択されます）. そのペアで接続チェックを実行し、候補ペアの状態を進行中にして、後続のステップを中止します. 

4.このステップに達した場合、選択されたチェックリストに対してチェックを実行できませんでした. したがって、タイマーTaが再び期限切れになるのを待たずに、実行状態の次のチェックリストを選択して、手順1に戻ります. これが実行状態のすべてのチェックリストで発生する場合、つまり接続チェックを実行する候補ペアが残っていない場合は、これらの手順を中止します. 

エージェントが接続チェックを実行する候補ペアを選択すると、エージェントはチェックを開始し、ペアのローカル候補に関連付けられたベースからペアのリモート候補にバインディング要求を送信します. セクション7.2.4. 

ローカルポリシーに基づいて、エージェントは、チェックリストセット内の1つ以上のチェックリストの接続チェックの実行をいつでも終了することを選択できます（MAY）. ただし、ICEを締結できるのは制御エージェントのみです（セクション8）. 

チェックのメッセージ整合性を計算するために、エージェントは、ピアから取得した候補情報から学習したリモートユーザ名フラグメントとパスワードを使用します. ローカルユーザー名フラグメントは、エージェントが自身の候補を直接認識しています. 

6.2. Liteの実装手順

Liteの実装では、ピアのICEサポートを確認し、ICE処理での役割を決定することを除いて、セクション6のほとんどの手順をスキップします. 

ライト実装が制御エージェントである場合（ピアICEエージェントもライト実装である場合にのみ発生します）、候補交換のペアに基づいて候補ペアを選択し（IPv4の場合、ペアは1つだけです）、次に、必要に応じて、その選択を反映する新しい候補情報でピアを更新します（IPv4のみのホストでは必要ありません）. 

7.接続性チェックの実行 

このセクションでは、接続チェックの実行方法について説明します. 

ICEエージェントは[RFC5389]に準拠している必要があります. 完全な実装はSTUNクライアントとSTUNサーバーの両方として機能しますが、ライト実装はSTUNサーバーとしてのみ機能します（接続チェックを生成しないため）. 

7.1. STUN拡張機能
ICEは、属性PRIORITY、USE-CANDIDATE、ICE-CONTROLLED、およびICE-CONTROLLINGを使用してSTUNを拡張します. これらの属性は、セクション16.1で正式に定義されています. このセクションでは、属性の使用法について説明します. 

属性は、ICE接続チェックにのみ適用できます. 

7.1.1.優先度

PRIORITY属性は、バインディングリクエストに含まれ、ローカル候補に対してセクション5.1.2のアルゴリズムによって計算された値に設定される必要がありますが、候補タイプはピアリフレクティブ候補になります. 

7.1.2. 使用-候補

制御エージェントは、候補ペアを指定するためにUSE-CANDIDATE属性を含める必要があります（セクション8.1.1）. 制御対象エージェントは、バインディング要求にUSE-CANDIDATE属性を含めてはなりません（MUSTNOT）. 

7.1.3. ICE-CONTROLLEDおよびICE-CONTROLLING

制御エージェントは、バインディング要求にICE-CONTROLLING属性を含める必要があります. 制御対象エージェントは、バインディング要求にICE-CONTROLLED属性を含める必要があります. 

いずれかの属性の内容は、ICEロールの競合が発生したときにタイブレーカー値として使用されます（セクション7.3.1.1）. 

7.2. STUNクライアントの手順

7.2.1. 中継された候補者の権限の作成

接続チェックが中継されたローカル候補を使用して送信されている場合、クライアントは、以前にアクセス許可をまだ作成していない場合は、最初にアクセス許可を作成する必要があります. リモート候補のIPアドレスに対して、指定された中継候補のアクセス許可を作成するようにTURNサーバーに指示した場合は、以前に作成されていたはずです. 権限を作成するために、ICEエージェントは[RFC5766]で定義された手順に従います. リモート候補のIPアドレスに対してパーミッションを作成する必要があります. エージェントは、ICEが完了するまでTURNチャネルの作成を延期することをお勧めします. この場合、接続チェックのアクセス許可は通常、CreatePermission要求を使用して作成されます. 確立されると、エージェントはICEが終了するまで権限をアクティブに保つ必要があります. 

7.2.2.資格情報の形成

接続性チェックのバインディング要求は、STUN短期資格情報メカニズムを利用する必要があります. 

資格情報のユーザ名は、ピアによって提供されたユーザ名フラグメントを、コロン（ "："）で区切られた要求を送信するICEエージェントのユーザ名フラグメントと連結することによって形成されます. 

パスワードは、ピアから提供されたパスワードと同じです. 

たとえば、ICEエージェントLが開始エージェントであり、ICEエージェントRが応答エージェントである場合を考えてみます. エージェントLには、候補者用のLFRAG​​のユーザー名フラグメントとLPASSのパスワードが含まれていました. エージェントRは、RFRAGのユーザー名フラグメントとRPASSのパスワードを提供しました. LからRへの接続チェックでは、ユーザー名RFRAG：LFRAG​​とパスワードRPASSを使用します. RからLへの接続チェックでは、ユーザー名LFRAG​​：RFRAGとパスワードLPASSを使用します. 応答は、要求と同じユーザー名とパスワードを使用します（USERNAME属性は応答に存在しないことに注意してください）. 

7.2.3. Diffserv処理

エージェントが送信するデータパケットでDifferentiatedServices Code Point（DSCP）マーキング[RFC2475]を使用している場合、エージェントは、送信するバインディング要求と応答に同じマーキングを適用する必要があります. 

データパケットで複数のDSCPマーキングが使用されている場合、エージェントは接続チェックで使用するためにそれらの1つを選択する必要があります. 

7.2.4. リクエストの送信
接続チェックは、ローカル候補に関連付けられたベースからリモート候補にバインディング要求を送信することによって生成されます. [RFC5389]は、バインディング要求がどのように構築および生成されるかを説明しています. 

接続チェックを実行するときは、RFC3489との下位互換性のサポートを想定してはなりません. 接続性チェックにはFINGERPRINTメカニズムを使用する必要があります. 

7.2.5.応答の処理

このセクションでは、ICE接続チェックに固有のバインディング応答を処理するための追加の手順を定義します. 

バインディング応答が受信されると、トランザクションID [RFC5389]を使用して、対応するバインディング要求に関連付けられます. RFC5389は、バインディング要求が送信された候補ペアに応答を関連付けます. その後、以下の手順に従って、役割の競合、失敗、または成功の手順に従って応答が処理されます. 

7.2.5.1.役割の競合

バインディング要求が487（ロールコンフリクト）エラー応答を生成し（セクション7.3.1.1）、ICEエージェントが要求にICE-CONTROLLED属性を含めた場合、エージェントは制御ロールに切り替えなければなりません（MUST）. エージェントがリクエストにICE-CONTROLLING属性を含めた場合、エージェントは制御された役割に切り替えなければなりません. 

エージェントがその役割を切り替えたら、エージェントは、チェックによって487エラー応答が生成された候補ペアを、ペアが属するチェックリストに関連付けられたトリガーチェックキューに追加し、候補ペアの状態を待機に設定する必要があります. トリガーされた接続チェックが後で実行されると、バインディング要求のICE-CONTROLLING / ICE-CONTROLLED属性はエージェントの新しい役割を示します. エージェントはタイブレーカーの値を変更する必要があります. 

注：優先度の値は役割に依存するため、役割の切り替えでは、エージェントがペアの優先度を再計算する必要があります（セクション6.1.2.3）. 

注：役割の切り替えは、エージェントが候補ペアを指名する責任があるかどうか、およびICEが終了した後、更新された候補情報のピアとの交換を開始する責任があるかどうかにも影響します. 

7.2.5.2.失敗

このセクションでは、候補ペアの状態が失敗に設定されている場合について説明します. 

注：接続性チェックエラーの結果としてICEエージェントが候補ペアの状態をFailedに設定した場合、エージェントは同じfoundationを持つ他の候補ペアの状態を変更しません. 

7.2.5.2.1.非対称のトランスポートアドレス

ICEエージェントは、バインディング要求と応答の送信元と宛先のトランスポートアドレスが対称であることを確認する必要があります. つまり、応答の送信元IPアドレスとポートは、バインディング要求が送信された宛先IPアドレスとポートと等しくなければならず、応答の宛先IPアドレスとポートは送信元IPアドレスとポートと等しくなければなりません. バインディングリクエストの送信元. アドレスが対称でない場合、エージェントは候補ペアの状態を失敗に設定する必要があります. 

7.2.5.2.2.ICMPエラー

ICEエージェントは、接続チェックのためのICMPエラーの処理をサポートする場合があります. エージェントがICMPエラーの処理をサポートし、バインディング要求がハードICMPエラーを生成する場合、エージェントは候補ペアの状態を失敗に設定する必要があります. 実装者は、ICMPエラーを処理する方法と処理を決定する際に、サービス拒否（DoS）攻撃の方法としてICMPエラーを使用できることに注意する必要があります. 

7.2.5.2.3. タイムアウト
バインディング要求トランザクションがタイムアウトした場合、ICEエージェントは候補ペアの状態をFailedに設定する必要があります. 

7.2.5.2.4. 回復不能なSTUN応答
バインディング要求が回復不能なSTUNエラー応答を生成する場合[RFC5389]、ICEエージェントは候補ペアの状態をFailedに設定する必要があります. 

7.2.5.3. 成功
次の各基準が当てはまる場合、接続チェックは成功したと見なされます. 

oバインディング要求は成功応答を生成しました. そして

oバインディング要求と応答の送信元と宛先のトランスポートアドレスは対称的です. 

チェックが成功したと見なされた場合、ICEエージェントは次のセクションで説明するアクションを（順番に）実行します. 

7.2.5.3.1. ピアリフレクティブ候補の発見

ICEエージェントは、STUN応答からマップされたアドレスをチェックする必要があります. トランスポートアドレスがエージェントが知っているローカル候補のいずれとも一致しない場合、マップされたアドレスは新しい候補、つまりピアリフレクティブ候補を表します. 他の候補者と同様に、ピアリフレクティブ候補者には、タイプ、ベース、優先順位、およびfoundationがあります. それらは次のように計算されます. 

oタイプはピアリフレクシブです. 

oベースは、バインディング要求の送信元の候補ペアのローカル候補です. 

o優先度は、バインディングリクエストのPRIORITY属性の値です. 

o基礎はセクション5.1.1.3で説明されています. 

次に、ピア再帰候補がデータストリームのローカル候補のリストに追加されます. ユーザー名フラグメントとパスワードは、そのデータストリームの他のすべてのローカル候補と同じです. 

セクション7.2.5.3.2の手順により有効なペアが作成されるため、ICEエージェントはピアリフレクティブ候補をリモート候補とペアにする必要はありません. エージェントがピア再帰候補を、生成される有効なペアにあるもの以外のリモート候補とペアリングすることを希望する場合、エージェントは、ピア再帰候補を含むピアに更新された候補情報を提供してもよい[MAY]. これにより、ピアリフレクティブ候補が他のすべてのリモート候補とペアになります. 

7.2.5.3.2.有効なペアの構築

ICEエージェントは、ローカル候補が応答のマップされたアドレスに等しく、リモート候補が要求の送信先の宛先アドレスに等しい候補ペアを作成します. これは「有効なペア」と呼ばれます. 

有効なペアは、接続チェックを生成したペア、チェックリスト内の別のペア、または現在チェックリストにないペアと同じである可能性があります. 

エージェントは、「有効なリスト」と呼ばれる別のリストを維持します. チェックリストセットの各チェックリストに有効なリストがあります. 有効なリストには、有効なペアが含まれます. 最初は、各有効なリストは空です. 

有効なリスト内の各有効なペアには、「指定フラグ」と呼ばれるフラグがあります. 有効なペアが有効なリストに追加されると、フラグ値は「false」に設定されます. 

有効なペアは、次のように有効なリストに追加されます. 

1.有効なペアがチェックを生成したペアと等しい場合、そのペアは、そのペアが属するチェックリストに関連付けられた有効なリストに追加されます. または

2.有効なペアがチェックリスト内の別のペアと等しい場合、そのペアはそのペアのチェックリストに関連付けられた有効なリストに追加されます. チェックを生成したペアは有効なリストに追加されません. または

3.有効なペアがどのチェックリストにも含まれていない場合、エージェントはセクション6.1.2のアルゴリズムを使用して、各候補の優先度に基づいてペアの優先度を計算します. ローカル候補者の優先順位は、そのタイプによって異なります. タイプがピアリフレクシブでない限り、優先度は候補者交換でその候補者に通知された優先度と同じです. タイプがピアリフレクシブである場合、それは、完了したばかりのバインディング要求にエージェントが配置したPRIORITY属性と同じです. リモート候補の優先順位は、ピアの候補情報から取得されます. 候補がそこに表示されない場合、チェックは新しいリモート候補へのトリガーされたチェックです. その場合、優先度は、完了したばかりのチェックをトリガーしたバインディング要求のPRIORITY属性の値と見なされます. 

注：有効なペアがどのチェックリストにも含まれないことは非常に一般的です. チェックリストには、ローカル候補が決して再帰的ではないペアがあることを思い出してください. それらのペアは、ローカル候補を反射候補のベースに変換し、冗長である場合は削除されました. バインディング要求への応答が到着すると、2つの間にNATがある場合、マップされたアドレスは再帰的になります. その場合、有効なペアには、チェックリストのどのペアとも一致しないローカル候補が含まれます. 

7.2.5.3.3.候補ペアの状態の更新

ICEエージェントは、チェックを生成した候補ペアと構築された有効なペア（異なる場合があります）の両方の状態をSucceededに設定します. 

エージェントは、同じfoundationを持つすべてのチェックリストで、他のすべての凍結候補ペアの状態を待機に設定する必要があります. 

注：特定のチェックリスト内で、同じファンデーションを持つ候補ペアは通常、異なるコンポーネントID値を持ちます. 

7.2.5.3.4.ノミネートされたフラグの更新

制御エージェントがUSE-CANDIDATE属性が設定されたバインディング要求を送信し、ICEエージェントが要求に対する正常な応答を受信した場合、エージェントはペアの指定フラグをtrueに設定します. 要求が失敗した場合（セクション7.2.5.2）、エージェントは有効なリストから候補ペアを削除し、候補ペアの状態を失敗に設定し、チェックリストの状態を失敗に設定する必要があります. 

制御対象エージェントが、エージェントによって送信されたバインディング要求への正常な応答を受信し、そのバインディング要求が、USE-CANDIDATE属性が設定された受信されたバインディング要求によってトリガーされた場合（セクション7.3.1.4）、エージェントは、の指定フラグを設定します.  trueにペアリングします. トリガーされた要求が失敗した場合、エージェントは有効なリストから候補ペアを削除し、候補ペアの状態を失敗に設定し、チェックリストの状態を失敗に設定する必要があります. 

データストリームのコンポーネントに指定されたフラグが設定されると、そのコンポーネントのICE処理が終了します（セクション8）. 

7.2.5.4.チェックリストの状態の更新

接続チェックが成功したか失敗したかに関係なく、チェックの完了にはチェックリストの状態の更新が必要になる場合があります. チェックリストセット内の各チェックリストについて、すべての候補ペアが失敗または成功状態にあり、チェックリストに関連付けられたデータストリームの各コンポーネントの有効なリストに有効なペアがない場合、の状態チェックリストはFailedに設定されています. 有効なリストの各コンポーネントに有効なペアがある場合、チェックリストの状態はSucceededに設定されます. 

7.3. STUNサーバーの手順

ICEエージェント（ライトまたはフル）は、最新の候補者交換に含まれる各候補者に基づいてバインディングリクエストを受け取る準備をしなければなりません. 

エージェントは、短期の資格情報メカニズム（つまり、MESSAGE-INTEGRITY属性）を使用して要求を認証し、メッセージの整合性チェックを実行する必要があります. 同様に、応答には短期の資格情報メカニズムを使用する必要があります. エージェントは、コロンで区切られた2つの値で構成されている場合、ユーザー名が有効であると見なす必要があります. 最初の値は、進行中のセッションの候補交換でエージェントによって生成されたユーザー名フラグメントと同じです. 開始エージェントが、ピアから候補を受信する前にバインディング要求を受信する可能性があります（実際には非常に可能性が高いです）. これが発生した場合、エージェントはすぐに応答を生成する必要があります（セクション7.3.1.2で説明されているマップされたアドレスの計算を含む）. エージェントは、この時点で応答を生成するのに十分な情報を持っています. ピアからのパスワードは必要ありません. 回答を受け取ったら、必要な残りの手順に進む必要があります. つまり、完全な実装については、セクション7.3.1.3、7.3.1.4、および7.3.1.5を参照してください. 応答の前に複数のSTUN要求が受信された場合、これにより、複数のペアがトリガーされたチェックキューにキューイングされる可能性があります. 

エージェントは、ALTERNATE-SERVERメカニズムを利用してはならず、RFC 5389で定義されている下位互換性メカニズムをサポートしてはなりません（RFC 3489のプロトコルを操作するため）. FINGERPRINTメカニズムを利用する必要があります. 

エージェントがデータパケットでDSCPマーキング[RFC2475]を使用している場合、バインディング応答に同じマーキングを適用する必要があります. 同じことが、エンドポイントがデータパケットに適用する可能性のあるレイヤ2マーキングにも当てはまります. 

7.3.1. 完全な実装のための追加手順

このサブセクションでは、完全な実装がバインディング要求を受け入れる場合に、完全な実装に適用できる追加のサーバー手順を定義します. 

7.3.1.1. 役割の競合の検出と修復

ICEの特定の使用法（3PCCなど）では、両方のICEエージェントが同じ役割を選択することになり、役割の競合が発生する可能性があります. このセクションでは、役割の競合を検出して修復するためのメカニズムについて説明します. 使用法文書では、このメカニズムが必要かどうかを指定する必要があります. 

エージェントは、ICE-CONTROLLINGまたはICE-CONTROLLED属性のいずれかのバインディング要求を調べる必要があります. 次の手順に従う必要があります. 

oエージェントが制御ロールにあり、ICE-CONTROLLING属性が要求に存在する場合：

*エージェントのタイブレーカー値がICE-CONTROLLING属性の内容以上の場合、エージェントはバインディングエラー応答を生成し、値が487（Role Conflict）のERROR-CODE属性を含みますが、その役割は保持されます. 

*エージェントのタイブレーカー値がICE-CONTROLLING属性の内容よりも小さい場合、エージェントは制御された役割に切り替わります. 

oエージェントが制御された役割にあり、ICE-CONTROLLED属性が要求に存在する場合：

*エージェントのタイブレーカー値がICE-CONTROLLED属性の内容以上の場合、エージェントは制御ロールに切り替わります. 

*エージェントのタイブレーカー値がICE-CONTROLLED属性の内容よりも小さい場合、エージェントはバインディングエラー応答を生成し、値が487（Role Conflict）のERROR-CODE属性を含みますが、その役割は保持されます. 

oエージェントが制御された役割にあり、ICE-CONTROLLING属性が要求に存在する場合、またはエージェントが制御する役割にあり、ICE-CONTROLLED属性が要求に存在する場合、競合はありません. 

役割の変更では、エージェントがペアの優先順位を再計算する必要があります（セクション6.1.2.3）. これらの優先順位は役割の関数であるためです. 役割の変更は、エージェントがICEの終了時に指名されたペアを選択し、更新された候補情報との交換を開始する責任があるかどうかにも影響します. 

エージェントが役割を変更した場合でも、エージェントがバインディング要求に対して正常な応答を生成した場合は、セクション7.3.1の残りのサブセクションに従います. 

7.3.1.2. マップされたアドレスの計算

中継された候補で受信された要求の場合、STUN処理（つまり、XOR-MAPPED-ADDRESS属性の生成）に使用される送信元トランスポートアドレスは、TURNサーバーから見たトランスポートアドレスです. バインディング要求がデータ表示を介して配信された場合、その送信元トランスポートアドレスはデータ表示メッセージのXOR-PEER-ADDRESS属性に存在します. バインディング要求がChannelDataメッセージを介して配信された場合、送信元トランスポートアドレスはチャネルにバインドされたアドレスです. 

7.3.1.3. ピアリフレクティブ候補の学習

リクエストの送信元トランスポートアドレスが既存のリモート候補と一致しない場合、それは新しいピアリフレクティブリモート候補を表します. この候補は次のように構成されています. 

oタイプはピアリフレクシブです. 

o優先度は、バインディングリクエストのPRIORITY属性の値です. 

o基礎は任意の値であり、他のすべてのリモート候補の基礎とは異なります. 後続の候補者交換にこのピアリフレクティブ候補者が含まれている場合は、候補者の実際のfoundationを示します. 

oコンポーネントIDは、リクエストの送信先であるローカル候補のコンポーネントIDです. 

この候補は、リモート候補のリストに追加されます. ただし、ICEエージェントは、この候補をローカル候補とペアリングしません. 

7.3.1.4. トリガーされたチェック

次に、エージェントは、ローカル候補がSTUN要求を受信したトランスポートアドレス（エージェントから見た場合）と、要求の送信元のトランスポートアドレス（ピアである可能性があります）に等しいリモート候補を持つペアを構築します. 学習したばかりの反射的なリモート候補）. ローカル候補は、ホスト候補（要求がリレーを介して受信されなかった場合）またはリレーされた候補（要求がリレーを介して受信された場合）のいずれかになります. ローカル候補は、サーバー再帰候補になることはできません. 両方の候補がエージェントに認識されているため、エージェントはそれらの優先順位を取得し、候補ペアの優先順位を計算できます. 次に、このペアはチェックリストで検索されます. いくつかの結果のいずれかが発生する可能性があります. 

oペアがすでにチェックリストにある場合：

*そのペアの状態がSucceededの場合、それ以上何も行われません. 

*そのペアの状態が進行中の場合、エージェントは進行中のトランザクションをキャンセルします. キャンセルとは、エージェントが接続性チェックトランザクションに関連付けられたバインディング要求を再送信せず、応答の欠如を失敗として処理せず、トランザクションのタイムアウトの間、応答を待機することを意味します. さらに、エージェントは、ペアの新しい接続チェックをトリガーするために、チェックリストに関連付けられたトリガーされたチェックリストにペアをキューに入れ、ペアの状態を待機に設定する必要があります. 新しい接続チェックを作成すると、元の接続チェックトランザクションに関連付けられたバインディング要求の再送信を待たずに、進行中のペアをできるだけ早く検証できます. 

*そのペアの状態がWaiting、Frozen、またはFailedの場合、エージェントは、トリガーするために、チェックリストに関連付けられたトリガーされたチェックリスト（まだ存在しない場合）にペアをキューに入れ、ペアの状態をWaitingに設定する必要がありますペアの新しい接続チェック. ペアの状態がFailedからWaitingに変わると、関連するチェックリストの状態も変わる可能性があることに注意してください. 

これらの手順は、両方のエージェントがNATの背後にある場合にICEを迅速に完了するために行われます. 

oペアがまだチェックリストにない場合：

*ペアは優先度に基づいてチェックリストに挿入されます. 

*その状態はWaitingに設定されています. 

*ペアはトリガーチェックキューに入れられます. 

トリガーされたchecksが送信される場合、セクション7.2.4で説明されているように作成および処理されます. これらの手順では、エージェントがピアのトランスポートアドレス、ユーザ名フラグメント、およびパスワードを知っている必要があります. リモート候補のユーザー名フラグメントは、受信したばかりのバインディング要求のUSERNAMEのコロンの後の部分と同じです. そのユーザー名フラグメントを使用して、エージェントはピアから受信した候補をチェックし（フォークの場合は複数存在する可能性があります）、このユーザー名フラグメントを見つけることができます. 次に、対応するパスワードが選択されます. 

7.3.1.5. 指名された旗の更新

制御対象エージェントがUSE-CANDIDATE属性が設定されたバインディング要求を受信し、ICEエージェントが要求を受け入れる場合、次のアクションはセクション7.3.1.4で計算されたペアの状態に基づいています. 

oこのペアの状態が成功した場合、このペアによって以前に送信されたチェックが成功した応答を生成し、有効なペアを生成したことを意味します（セクション7.2.5.3.2）. エージェントは、有効なペアの指定されたフラグ値をtrueに設定します. 

o受信したバインディング要求がトリガーされた新しいチェックがトリガーされたチェックキューにエンキューされるようにトリガーされた場合（セクション7.3.1.4）、チェックが送信され、成功した応答が生成され、有効なペアが生成された場合、エージェントは指定されたものを設定しますペアのフラグをtrueにします. 要求が失敗した場合（セクション7.2.5.2）、エージェントは有効なリストから候補ペアを削除し、候補ペアの状態を失敗に設定し、チェックリストの状態を失敗に設定する必要があります. 

被制御エージェントが制御エージェントからの要求を受け入れない場合、被制御エージェントは適切なエラーコード応答（例：400）で指名要求を拒否しなければなりません[RFC5389]. 

データストリームのコンポーネントに指定されたフラグが設定されると、そのコンポーネントのICE処理が終了します. セクション8を参照してください. 

7.3.2. Lite実装の追加手順

制御対象エージェントがUSE-CANDIDATE属性が設定されたバインディング要求を受信し、ICEエージェントが要求を受け入れる場合、エージェントは、ローカル候補が要求を受信したトランスポートアドレスを持ち、リモート候補がである候補ペアを構築します. 受信したリクエストの送信元トランスポートアドレスと同じです. この候補ペアには任意の優先順位が割り当てられ、関連するチェックリストの有効なリストに配置されます. エージェントは、そのペアの指定フラグをtrueに設定します. 

データストリームのコンポーネントに指定されたフラグが設定されると、そのコンポーネントのICE処理が終了します. セクション8を参照してください. 

8.ICE処理の終了
このセクションでは、ICEエージェントがICEを完了する方法について説明します. 

8.1. 完全な実装の手順

ICEの終了には、制御エージェントによるペアの指名と状態機構の更新が含まれます. 

8.1.1. ペアの指名

指名する前に、制御エージェントは、何らかの停止基準が満たされるまで接続チェックを続行させます. その後、評価基準に基づいて、制御エージェントは、指名のために有効なリスト内の有効なペアの中からペアを選択します. 

制御エージェントは、指名のために有効なペアを選択すると、この有効なペアを生成した接続チェックを繰り返します（チェックを生成したペアをトリガーされたチェックキューにエンキューすることにより）、今回はUSE-CANDIDATE属性を使用します（セクション7.2 .5.3.4）. 管理対象エージェントの手順は、セクション7.3.1.5で説明されています. 

最終的に、指名が成功した場合、制御エージェントと被制御エージェントの両方が、データストリームの各コンポーネントの有効なリストに単一の指名ペアを持ちます. ICEエージェントがチェックリストの状態を完了に設定すると（データストリームの各コンポーネントに指定されたペアがある場合）、そのペアはそのエージェントの選択されたペアになり、そのコンポーネントのデータの送受信に使用されます. データストリーム. 

エージェントがデータストリームの各コンポーネントに対して選択されたペアを生成できない場合、エージェントは、たとえばストリームを削除するなどして、他のエージェントに通知するための適切なアクションを実行する必要があります. 正確なアクションは、この仕様の範囲外です. 

接続性チェックを停止し、指名のためにペアを選択するための基準は、この仕様の範囲外です. それらはローカル最適化の問題です. 唯一の要件は、エージェントが最終的に1つだけの候補ペアを選択し、USE-CANDIDATE属性セットを使用してそのペアのチェックを生成する必要があることです. 

制御エージェントが候補ペアを正常に指名した後（セクション7.2.5.3.4）、エージェントはICEセッション内のデータストリームの同じコンポーネントに別のペアを指名してはなりません（MUSTNOT）. これを行うには、ICEの再起動が必要です. 

この仕様をサポートしない（つまり、RFC 5245に従って実装される）制御エージェントは、複数の候補ペアを指定する場合があります. これは、RFC 5245では「積極的な指名」と呼ばれていました. 複数の候補ペアが制御エージェントによって指名され、制御エージェントが複数の指名要求を受け入れる場合、エージェントは選択されたペアを生成し、最も高いペアを使用する必要があります. 優先. 

この仕様をサポートするエンドポイントによる「ice2」ICEオプション（セクション10）の使用は、RFC5245に従って実装された制御エージェントが積極的な指名を使用することを防ぐことになっています. 

注：RFC 5245では、「積極的な指名」を使用すると、エージェントは、ペアが最終的に選択される前に、ペアを継続的に指名して、それらのペアでデータを送信できるようになりました. この仕様では、データは、指定なしで、任意の有効なペアで常に送信できます. したがって、積極的な指名の必要はもはやありません. 

8.1.2. チェックリストとICEの状態を更新する

制御エージェントと制御エージェントの両方で、データストリームのコンポーネントの候補ペアが指定されると、データストリームに関連付けられたチェックリスト内の他のペアに影響を与える可能性があります. また、チェックリストの状態に影響を与える可能性があります. 

oデータストリームのコンポーネントの候補ペアが指定され、データストリームに関連付けられたチェックリストの状態が実行中になると、ICEエージェントは同じコンポーネントのすべての候補ペアをチェックリストとトリガーから削除する必要があります-キューを確認してください. ペアの状態が進行中の場合、エージェントは進行中のトランザクションをキャンセルします. キャンセルとは、エージェントが接続性チェックトランザクションに関連付けられたバインディング要求を再送信せず、応答の欠如を失敗として処理せず、トランザクションのタイムアウトの間、応答を待機することを意味します. 

oデータストリームの各コンポーネントの候補ペアが指定され、データストリームに関連付けられたチェックリストの状態が実行中になると、ICEエージェントはチェックリストの状態を完了に設定します. 

oデータストリームのコンポーネントの候補ペアが指定されると、エージェントは、指定されたペアおよびデータストリームに関連付けられたチェックリスト内の残りの候補ペアに対して引き続き受信する可能性のあるバインディング要求に応答し続ける必要があります. セクション7.3.1.4で定義されているように、ペアの状態がSucceededの場合、エージェントはペアのバインディング要求を受信したときにトリガーされたチェックを生成しなくなりました. 

チェックリストセット内の各チェックリストの状態が完了すると、エージェントはICEセッションの状態をCompletedに設定します. 

チェックリストの状態がFailedの場合、ICEはチェックリストに関連付けられたデータストリームのプロセスを正常に完了できませんでした. 正しい動作は、チェックリストセット内のチェックリストの状態によって異なります. 制御エージェントが、失敗したチェックリストに関連付けられたデータストリームなしでセッションを続行したい場合、および実行モードまたは完了モードのチェックリストがまだ1つ以上ある場合、エージェントはICE処理を続行させることができます. エージェントは、失敗したデータストリームを削除するために適切なアクションを実行する必要があります. 制御エージェントがセッションを続行せず、セッションを終了する必要がある場合、ICEセッションの状態はFailedに設定されます. 

チェックリストセット内の各チェックリストの状態がFailedの場合、ICEセッションの状態はFailedに設定されます. 制御エージェントがデータストリームなしでセッションを継続したい場合を除いて、セッションを終了する必要があります. 

8.2.Lite実装の手順

ICEが終了すると、セクション8.3で説明されているように、ライトICEエージェントはICEによって使用されなかったホスト候補を解放できます. 

ピアがフルエージェントの場合、ライトエージェントが候補ペアの指名要求を受け入れると、ライトエージェントはそのペアが指名されたと見なします. データストリームの各コンポーネントに指定されたペアがあると、そのペアはデータストリームのコンポーネントに選択されたペアになります. ライトエージェントがすべてのデータストリームのすべてのコンポーネントに対して選択されたペアを生成すると、ICEセッション状態は完了に設定されます. 

ピアがライトエージェントの場合、エージェントは、ローカル候補と、同じデータストリームであり、同じコンポーネント、トランスポートプロトコル、およびIPアドレスファミリを持つリモート候補をペアにします. 各データストリームの各コンポーネントについて、候補ペアが1つしかない場合、そのペアが有効なリストに追加されます. 複数のペアがある場合、エージェントはRFC 6724 [RFC6724]の手順に従ってペアを選択し、それを有効なリストに追加することをお勧めします. 

すべてのデータストリームのすべてのコンポーネントに1つのペアがある場合、ICE処理の状態は完了です. それ以外の場合、制御エージェントは、更新された候補リストを送信して、異なる候補ペアを選択する異なるエージェントを調整する必要があります. ICE処理は、更新された候補者交換が完了した後にのみ完了します. 

8.3. 候補者を解放する
8.3.1. 完全な実装手順
このセクションのルールでは、エージェントが選択された候補にならなかった（つまり、選択されたペアに関連付けられていない）候補の小切手の送受信を安全に停止できる場合と、候補を解放する場合について説明します. 

チェックリストが完了状態に達すると、エージェントはさらに3秒間待機する必要があります. その後、選択された候補になったもの以外のすべてのローカル候補に対するチェックへの応答またはトリガーされたチェックの生成を停止できます. 特定のローカル候補の使用がすべてのICEセッションで終了すると（候補は、フォークシナリオなど、複数のICEセッションで使用される場合があります）、エージェントはその候補を解放できます. 3秒の遅延は、積極的な指名が使用されている場合を処理し、ICEが完了した後、選択されたペアをすばやく変更できます. 

サーバー再帰候補の解放は決して明示的ではありません. キープアライブの欠如によって発生します. 

8.3.2. Liteの実装手順
ライト実装では、ICE処理が、それらの候補を使用するすべてのICEセッションで完了状態に達するとすぐに、選択された候補にならなかった候補を解放できます. 

9.ICEが再起動します
ICEエージェントは、既存のデータストリームに対してICEを再起動できます（MAY）. ICEを再起動すると、エージェントの役割を除く、データストリームの以前のすべての状態がフラッシュされます. ICEの再起動と新しいデータセッションの唯一の違いは、再起動中も既存のデータセッションを使用してデータを送信し続けることができ、新しいデータセッションでは常に役割を決定する必要があることです. 

次のアクションは、ICEリスタートを使用することによってのみ実行できます（エージェントは、ICEリスタートを使用する必要があります）. 

oデータストリームの宛先を変更します. 

oライト実装から完全実装に変更します. 

o完全な実装からライトな実装に変更します. 

ICEを再起動するには、エージェントは、再起動するデータストリームのパスワードとユーザー名フラグメントの両方を変更する必要があります. 

ICEが再起動されると、新しいICEセッションの候補セットには、現在のICEセッションで使用されている候補の一部、なし、またはすべてが含まれる場合があります. 

セクション6.1.1で説明されているように、エージェントは、役割の再決定を必要とする特定の基準が満たされない限り、ICEの再起動の一部として役割を再決定してはなりません（MUSTNOT）. 

10.ICEオプション
このセクションでは、新しいICEオプション「ice2」を定義します. ICEエージェントが候補交換に「ice2」を含む場合、ICEオプションはそれがこの仕様に準拠していることを示します. たとえば、エージェントはRFC 5245で定義されている積極的な指名手順を使用しません. さらに、RFC 5245に準拠するピアが、不明な受信ピアに対してRFC 5245のセクション14で要求されているように、積極的な指名も使用しないようにします.  ICEオプション. 

この仕様に準拠するエージェントは、「ice2」オプションを使用して準拠についてピアに通知する必要があります. 

注：「ice2」オプションのエンコーディング、およびそれをピアに伝送するために使用されるメッセージは、プロトコル固有です. SDP [RFC4566]のエンコーディングは、[ICE-SIP-SDP]で定義されています. 

11.キープアライブ
すべてのエンドポイントは、データセッションごとにキープアライブを送信する必要があります. これらのキープアライブは、データセッションでNATバインディングを存続させるという目的を果たします. キープアライブは、ピアでサポートされている形式を使用して送信する必要があります. ICEエンドポイントはUDPストリームのSTUNベースのキープアライブを可能にするため、ICEエージェントが完全なICE実装であり、ICEをサポートするピア（ライトまたはフル）と通信している場合は、STUNキープアライブを使用する必要があります. 

エージェントは、過去Tr秒間にそのペアでパケットが送信されなかった場合、データの送信に使用される各候補ペアでキープアライブを送信する必要があります. エージェントは15秒のTr値を使用する必要があります. エージェントはより大きな値を使用できますが、15秒未満の値を使用してはなりません. 

選択したペアがデータストリーム用に生成されると、キープアライブはそれらのペアでのみ送信されます. 

データストリームが削除された場合、エージェントはデータストリームでのキープアライブの送信を停止する必要があります. ICEセッションが終了した場合、エージェントはすべてのデータストリームでキープアライブの送信を停止する必要があります. 

エージェントは、たとえば構成やネットワーク/ NAT特性に基づいて、Trに別の値を使用できます（MAY）. たとえば、エージェントが介在するNATのバインディングライフタイムを動的に検出する方法を持っている場合、その値を使用してTrを決定できます. より制御されたネットワーク環境にICEを展開する管理者は、Trを環境内で可能な限り長い期間に設定する必要があります. 

STUNがキープアライブに使用されている場合、STUNバインディング表示が使用されます[RFC5389]. 表示は、認証メカニズムを利用してはなりません. 逆多重化を支援するためにFINGERPRINT属性を含める必要がありますが、他の属性を含めるべきではありません. これは、NATバインディングを存続させるためにのみ使用されます. バインディング表示は、データに使用されているのと同じローカルおよびリモートの候補を使用して送信されます. バインディング表示はキープアライブに使用されますが、エージェントは接続チェックも受信できるように準備する必要があります. 接続チェックを受信すると、[RFC5389]で説明されているように応答が生成されますが、それ以外の場合はICE処理に影響はありません. 

エージェントは、デフォルトでSTUNキープアライブを使用する必要があります. 個々のICE使用法およびICE拡張機能は、使用法/拡張機能固有のキープアライブを指定できます（MAY）. 

12.データ処理
12.1. データの送信
ICEエージェントは、データストリーム用に選択されたペアが生成される前に、任意の有効なペアでデータを送信できます（MAY）. 

選択したペアがデータストリーム用に生成されると、エージェントはそれらのペアでのみデータを送信する必要があります. 

エージェントは、ローカル候補のベースからリモート候補にデータを送信します. ローカルで中継された候補の場合、データは[RFC5766]で定義された手順を使用して、ベース（TURNサーバーにあります）を介して転送されます. 

ローカル候補が中継候補である場合、エージェントがTURNサーバー上にリモート候補に向けてチャネルを作成することをお勧めします. これは、[RFC5766]のセクション11で定義されているチャネル作成の手順を使用して行われます. 

データストリームのコンポーネント用に選択されたペアは次のとおりです. 

oそのデータストリームのチェックリストの状態が実行中であり、ICEの再起動のためにそのコンポーネントに対して以前に選択されたペアがない場合は空

oデータストリームのチェックリストの状態が実行中であり、ICEの再起動によりそのコンポーネントに対して以前に選択されたペアがあった場合、データストリームのコンポーネントに対して以前に選択されたペアに等しい

エージェントがデータストリームに関連付けられたコンポーネントごとに選択されたペアを生成できない限り、エージェントはそのデータストリームに関連付けられたコンポーネントのデータを送信し続けてはなりません（MUSTNOT）. 

12.1.1. Lite実装の手順

ライト実装は、そのデータストリームの各コンポーネントの候補ペアを含む有効なリストが得られるまで、データを送信してはなりません（MUSTNOT）. それが発生すると、ICEエージェントはデータパケットの送信を開始できます（MAY）. これを行うために、ペアのリモート候補にデータを送信し（パケットの宛先アドレスとポートをそのリモート候補と同じに設定）、データの送信に使用される候補ペアに関連付けられたベースからデータを送信します. 中継された候補の場合、データはエージェントから送信され、[RFC5766]で定義された手順を使用して、ベース（TURNサーバーにあります）を介して転送されます. 

12.2. データ受信中

ICEエージェントは有効な候補ペアを使用してのみデータを送信できますが（選択したペアが生成されると、選択したペアでのみ）、ICE実装はデフォルトで、最も多く提供されている候補のいずれかに関するデータを受信できるように準備する必要があります. ピアとの最近の候補者交換. ICEの使用法では、これとは異なるルールを定義できます. たとえば、データストリーム用に選択したペアが生成されるまでデータが送信されないように定義します. 

エージェントが特定のRTP / RTCPデータストリームの新しい送信元または宛先IPアドレスを持つRTPパケットを受信した場合、エージェントはジッターバッファを再調整することをお勧めします. 

RFC 3550 [RFC3550]のセクション8.2では、同期ソース（SSRC）の衝突とループを検出するためのアルゴリズムについて説明しています. これらのアルゴリズムは、部分的には、同じSSRCで異なる送信元トランスポートアドレスを確認することに基づいています. ただし、ICEを使用する場合、データストリームが候補間で切り替わるときに、このような変更が発生することがあります. エージェントは、メディアデータ送信を進めるSTUN交換の結果として、データストリームが同じピアからのものであると判断できます. したがって、送信元トランスポートアドレスに変更があったが、メディアデータパケットが同じピアエージェントから送信された場合、これをSSRC衝突として処理してはなりません（MUSTNOT）. 

13.拡張性に関する考慮事項

この仕様は、セッション内の両方のICEエージェントが、データ用に選択された候補ペアのセットに到達するためにどのように調整するかについて、非常に具体的な選択を行います. タイマーの微調整のような単純な変更であろうと、優先度アルゴリズムの改良のような大きな変更であろうと、将来の仕様ではこれらのアルゴリズムを変更する必要があると予想されます. このような変更が行われる場合、セッション内の2つのエージェント間の相互運用性を提供することが重要です. 

まず、ICEはICEオプションの概念を提供します. ICEの各拡張または変更は、ICEオプションに関連付けられています. エージェントがそのような拡張または変更をサポートする場合、候補交換の一部としてピアエージェントにICEオプションを提供します. 

相互運用性を実現する上での複雑さの1つは、ICEが両方のエージェントで実行される分散アルゴリズムに依存して、合意された候補ペアのセットに収束することです. 2つのエージェントが異なるアルゴリズムを実行する場合、同じ候補ペアでの収束を保証するのは難しい場合があります. セクション8で説明する指名手順は、選択アルゴリズムを制御エージェントに完全に委任することにより、緊密な調整の必要性の一部を排除し、両方のエージェントが異なるペア優先順位付けアルゴリズムを使用する場合でも、ICEは完全に収束します. このような収束の鍵の1つは、トリガーされたチェックです. これにより、指定されたペアが両方のエージェントによって検証されます. 

ICEは、RTPを超えた他のデータストリームやUDPを超えたトランスポートプロトコルにも拡張可能です. 非RTPデータストリーム用のICEの拡張機能では、使用するコンポーネントの数を指定し、最も重要なコンポーネントIDの1から始まるコンポーネントIDを割り当てる必要があります. 新しいトランスポートプロトコルの仕様は、ICE処理のさまざまなステップがUDPとどのように異なるかを定義する必要があります. 

14.TaとRTOの設定
14.1. 一般
ICE収集フェーズ（セクション5.1.1）中およびICEが接続チェックを実行している間（セクション7）、ICEエージェントはSTUNおよびTURNトランザクションをトリガーします. これらのトランザクションは、Taで示されるレートでペースが調整され、各トランザクションの再送信間隔は、STUNトランザクション（RTO）[RFC5389]の再送信タイマーに基づいて計算されます. 

このセクションでは、ICE収集フェーズ中およびICEが接続チェックを実行しているときにTa値とRTO値がどのように計算されるかについて説明します. 

注：以前は、RFC 5245では、ICEがリアルタイムデータストリーム（RTPなど）に使用されたかどうかに応じて、TaとRTOを計算するためのさまざまな式が定義されていました. 

以下の式により、エージェントは再送信を実行する前に、接続チェックごとに最初のパケットを送信するという動作になります. これは、RTO（再送信間隔を表す）の式で確認できます. これらの式は、実行されるチェックの数であるNに比例します. この結果、ICEはほぼ一定のレートを維持しますが、パケット損失の影響を受けやすくなります. 接続チェックで最初の単一パケットが失われると、そのペアの検証に時間がかかる可能性があります. 代わりに、優先度の低いチェック（ただし、パケット損失がなかったチェック）の方がはるかに高い可能性があります. 最初に完了します. これにより、ICEのパフォーマンスが最適化されず、優先度の高いペアよりも優先度の低いペアが選択されます. 

14.2. タ
ICEエージェントはデフォルトのTa値である50ミリ秒を使用する必要がありますが、関連するデータの特性に基づいて別の値を使用する場合があります. 

エージェントがデフォルト値以外のTa値を使用したい場合、エージェントはICEセッションの確立中に提案された値をピアに示さなければなりません（MUST）. 両方のエージェントは、提案された値のより高い値を使用する必要があります. エージェントが値を提案しない場合、どちらの値が高いかを比較するときに、そのエージェントにデフォルト値が使用されます. 

各エージェントに選択されたTa値に関係なく、すべてのエージェントからのすべてのトランザクションの組み合わせ（特定の実装が複数の同時エージェントを実行している場合）は、5ミリ秒ごとに1回以上送信してはなりません（ペーシングに1つのグローバルTa値があるかのように）すべてのエージェント）. ICEで5ミリ秒の値を使用する背景については、付録B.1を参照してください. 

注：付録Cは、さまざまなTa値を使用した必要な帯域幅の例を示しています. 

14.3. RTO
ICE収集フェーズでは、ICEエージェントは次の式を使用してRTO値を計算する必要があります. 

     RTO = MAX（500ms、Ta *（Num-Of-Cands））
        
Num-Of-Cands：サーバーリフレクティブおよびリレー候補の数

接続性チェックの場合、エージェントは次の式を使用してRTO値を計算する必要があります. 

     RTO = MAX（500ms、Ta * N *（待機中+進行中の数））
        
N：実行する接続チェックの総数. 

Num-Waiting：待機状態に設定されたチェックリスト内のチェックの数. 

Num-In-Progress：進行中の状態で設定されたチェックリスト内のチェックの数. 

Waiting状態とIn-Progress状態のチェックの数が変わると、RTOはトランザクションごとに異なることに注意してください. 

エージェントは、上記以外のメカニズムを使用してRTO値を計算できます（MAY）. エージェントは、500ミリ秒未満のRTO値を使用してはなりません（MUSTNOT）. 

15.例
このセクションでは、2つのICEの例を示します. 1つはIPv4アドレスを使用し、もう1つはIPv6アドレスを使用します. 

理解を容易にするために、トランスポートアドレスは、ニーモニック名を持つ変数を使用してリストされています. 名前の形式はentity-type-seqnoです. 「entity」は、トランスポートアドレスがオンになっているIPアドレスを持つエンティティを指し、「L」、「R」、「STUN」、または「NAT」のいずれかです. タイプは、パブリックのトランスポートアドレスの場合は「PUB」、プライベートのトランスポートアドレスの場合は「PRIV」です[RFC1918]. 最終的に、

seq-noは、特定のエンティティの同じタイプのトランスポートアドレスごとに異なるシーケンス番号です. 各変数にはIPアドレスとポートがあり、それぞれvarname.IPとvarname.PORTで示されます. ここで、varnameは変数の名前です. 

コールフロー自体では、STUNメッセージにいくつかの属性の注釈が付けられています. 「S =」属性は、メッセージの送信元トランスポートアドレスを示します. 「D =」属性は、メッセージの宛先トランスポートアドレスを示します. 「MA =」属性はSTUNバインディング応答メッセージで使用され、マップされたアドレスを参照します. 「USE-CAND」は、USE-CANDIDATE属性の存在を意味します. 

コールフローの例では、STUN認証操作を省略し、2つの完全な実装間の単一のデータストリームに焦点を当てています. 

15.1. IPv4アドレスの例
以下の例では、図7に示すトポロジを使用しています. 

                                  + ------- +
                                  |スタン|
                                  |サーバー|
                                  + ------- +
                                      |
                           + --------------------- +
                           | |
                           | インターネット|
                           | |
                           + --------------------- +
                             | |
                             | |
                      + --------- + |
                      | NAT | |
                      + --------- + |
                           | |
                           | |
                        + ----- + + ----- +
                        | L | | R |
                        + ----- + + ----- +
        
図7：トポロジの例

この例では、ICEエージェントLおよびRは完全なICE実装です. 両方のエージェントは単一のIPv4アドレスを持ち、両方とも同じSTUNサーバーで構成されています. NATには、エンドポイントに依存しないマッピングプロパティとアドレスに依存するフィルタリングプロパティがあります. ICEエージェント、STUNサーバー、およびNATのIPアドレスを以下に示します. 

   エンティティIPアドレスニーモニック名
   --------------------------------------------------
   ICEエージェントL：10.0.1.1 L-PRIV-1
   ICEエージェントR：192.0.2.1 R-PUB-1
   STUNサーバー：192.0.2.2 STUN-PUB-1
   NAT（パブリック）：192.0.2.3 NAT-PUB-1
        
             L NAT STUN R
             | STUN割り当て. | | |
             |（1）STUN Req | | |
             | S = $ L-PRIV-1 | | |
             | D = $ STUN-PUB-1 | | |
             | -------------> | | |
             | |（2）STUN Req | |
             | | S = $ NAT-PUB-1 | |
             | | D = $ STUN-PUB-1 | |
             | | -------------> | |
             | |（3）STUN Res | |
             | | S = $ STUN-PUB-1 | |
             | | D = $ NAT-PUB-1 | |
             | | MA = $ NAT-PUB-1 | |
             | | <------------- | |
             |（4）STUN Res | | |
             | S = $ STUN-PUB-1 | | |
             | D = $ L-PRIV-1 | | |
             | MA = $ NAT-PUB-1 | | |
             | <------------- | | |
             |（5）Lの候補情報| |
             | -------------------------------------------> |
             | | | | 気絶
             | | | | 割り当てます. 
             | | |（6）STUN Req |
             | | | S = $ R-PUB-1 |
             | | | D = $ STUN-PUB-1 |
             | | | <------------- |
             | | |（7）STUN Res |
             | | | S = $ STUN-PUB-1 |
             | | | D = $ R-PUB-1 |
             | | | MA = $ R-PUB-1 |
             | | | -------------> |
        
             |（8）Rの候補情報| |
             | <------------------------------------------- |
             | | （9）バインド要件|開始
             | | S = $ R-PUB-1 |接続性
             | | D = $ L-PRIV-1 |チェック
             | | <------------------- |
             | | ドロップ|
             |（10）バインド要件| | |
             | S = $ L-PRIV-1 | | |
             | D = $ R-PUB-1 | | |
             | -------------> | | |
             | |（11）バインド要件| |
             | | S = $ NAT-PUB-1 | |
             | | D = $ R-PUB-1 | |
             | | ----------------------------> |
             | |（12）バインド解像度| |
             | | S = $ R-PUB-1 | |
             | | D = $ NAT-PUB-1 | |
             | | MA = $ NAT-PUB-1 | |
             | | <---------------------------- |
             |（13）バインド解像度| | |
             | S = $ R-PUB-1 | | |
             | D = $ L-PRIV-1 | | |
             | MA = $ NAT-PUB-1 | | |
             | <------------- | | |
             |データ| | |
             | ===========================================> |
             | | | |
             | |（14）バインド要件| |
             | | S = $ R-PUB-1 | |
             | | D = $ NAT-PUB-1 | |
             | | <---------------------------- |
             |（15）バインド要件|              | |
             | S = $ R-PUB-1 | | |
             | D = $ L-PRIV-1 | | |
             | <------------- | | |
             |（16）バインド解像度| | |
             | S = $ L-PRIV-1 | | |
             | D = $ R-PUB-1 | | |
             | MA = $ R-PUB-1 | | |
             | -------------> | | |
             | |（17）バインド解像度| |
             | | S = $ NAT-PUB-1 | |
             | | D = $ R-PUB-1 | |
             | | MA = $ R-PUB-1 | |
             | | ----------------------------> |
             |データ| | |
             | <=========================================== |
        
             | | | |
                                ...... 
             | | | |
             |（18）バインド要件| | |
             | S = $ L-PRIV-1 | | |
             | D = $ R-PUB-1 | | |
             | USE-CAND | | |
             | -------------> | | |
             | |（19）バインド要件| |
             | | S = $ NAT-PUB-1 | |
             | | D = $ R-PUB-1 | |
             | | USE-CAND | |
             | | ----------------------------> |
             | |（20）バインド解像度| |
             | | S = $ R-PUB-1 | |
             | | D = $ NAT-PUB-1 | |
             | | MA = $ NAT-PUB-1 | |
             | | <---------------------------- |
             |（21）バインド解像度| | |
             | S = $ R-PUB-1 | | |
             | D = $ L-PRIV-1 | | |
             | MA = $ NAT-PUB-1 | | |
             | <------------- | | |
             | | | |
        
図8：フローの例

メッセージ1〜4：エージェントLは、ローカルIPアドレスからホスト候補を収集し、そこからSTUNバインディング要求をSTUNサーバーに送信します. リクエストはNATバインディングを作成します. バインディングのNATパブリックIPアドレスは、エージェントLのサーバー再帰候補になります. 

メッセージ5：エージェントLは、ICEの使用に関連付けられたシグナリングプロトコルを使用して、ローカル候補情報をエージェントRに送信します. 

メッセージ6〜7：エージェントRは、ローカルIPアドレスからホスト候補を収集し、そこからSTUNバインディング要求をSTUNサーバーに送信します. エージェントRはNATの背後にないため、Rのサーバー再帰候補はホスト候補と同一になります. 

メッセージ8：エージェントRは、ICEの使用に関連付けられたシグナリングプロトコルを使用して、ローカル候補情報をエージェントLに送信します. 

両方のエージェントが完全なICE実装であるため、開始エージェント（エージェントL）が制御エージェントになります. 

エージェントLとRの両方が候補をペアにします. 両方のエージェントには、最初は2つのペアがあります. ただし、エージェントLは、サーバー再帰候補を含むペアを削除するため、1つ（L1）になります. エージェントLでは、このペアのローカル候補は$ L_PRIV_1で、リモート候補は$ R_PUB_1です. エージェントRには、2つのペアがあります. 最も優先度の高いペア（R1）のローカル候補は$ R_PUB_1とリモート候補の$ L_PRIV_1であり、2番目のペア（R2）のローカル候補は$ R_PUB_1とリモート候補の$ NAT_PUB_1です. ペアを以下に示します（ペア番号は参照のみを目的としています）. 

                            ペア
   ENTITYローカルリモートペア＃有効
   -------------------------------------------------- --------------------------------
   ICEエージェントL：L_PRIV_1 R_PUB_1 L1
        
ICEエージェントR：R_PUB_1 L_PRIV_1 R1 R_PUB_1 NAT_PUB_1 R2

メッセージ9：エージェントRがペア＃2の接続チェックを開始します. ペアのリモート候補はエージェントLのプライベートアドレスであるため、要求をRからLにルーティングできず、ネットワークによってドロップされるため、チェックは成功しません. 

メッセージ10-13：エージェントLは、ペアL1の接続チェックを開始します. チェックは成功し、Lは新しいペア（L2）を作成します. 新しいペアのローカル候補は$ NAT_PUB_1であり、リモート候補は$ R_PUB_1です. ペア（L2）がエージェントLの有効なリストに追加されます. エージェントLは、必要に応じてペア（L2）でデータを送受信できるようになりました. 

                            ペア
   ENTITYローカルリモートペア＃有効
   -------------------------------------------------- --------------------------------
   ICEエージェントL：L_PRIV_1 R_PUB_1 L1
                            NAT_PUB_1 R_PUB_1 L2 X
        
ICEエージェントR：R_PUB_1 L_PRIV_1 R1 R_PUB_1 NAT_PUB_1 R2

メッセージ14〜17：エージェントRがエージェントLからバインディング要求を受信すると（メッセージ11）、トリガーされた接続チェックを開始します. このペアは、エージェントRの既存のペア（R2）の1つと一致します. チェックが成功し、ペア（R2）がエージェントRの有効なリストに追加されます. エージェントRは、必要に応じてペア（R2）でデータを送受信できるようになりました. 

                            ペア
   ENTITYローカルリモートペア＃有効
   -------------------------------------------------- --------------------------------
   ICEエージェントL：L_PRIV_1 R_PUB_1 L1
                            NAT_PUB_1 R_PUB_1 L2 X
        
ICEエージェントR：R_PUB_1 L_PRIV_1 R1 R_PUB_1 NAT_PUB_1 R2 X

メッセージ18-21：ある時点で、制御エージェント（エージェントL）は、有効なリストでペア（L2）を指定することを決定します. ペア（L2）で接続チェックを実行し、バインディング要求にUSE-CANDIDATE属性を含めます. チェックが成功すると、エージェントLはペア（L2）の指定フラグ値を「true」に設定し、エージェントRは一致するペア（R2）の指定フラグ値を「true」に設定します. ストリームに関連付けられているコンポーネントがなくなると、指定されたペアが選択されたペアになります. その結果、このストリームの処理は完了状態に移行します. ICEプロセスも完了状態に移行します. 

15.2. IPv6アドレスの例
以下の例では、図9に示すトポロジを使用しています. 

                                + ------- +
                                |スタン|
                                |サーバー|
                                + ------- +
                                    |
                         + --------------------- +
                         | |
                         | インターネット|
                         | |
                         + --------------------- +
                            | |
                            | |
                            | |
                            | |
                            | |
                            | |
                            | |
                         + ----- + + ----- +
                         | L | | R |
                         + ----- + + ----- +
        
図9：トポロジの例

この例では、ICEエージェントLおよびRは完全なICE実装です. 両方のエージェントは単一のIPv6アドレスを持ち、両方とも同じSTUNサーバーで構成されています. ICEエージェントとSTUNサーバーのIPアドレスを以下に示します. 

   ENTITYIPアドレスニーモニック名
   --------------------------------------------------
   ICEエージェントL：2001：db8 :: 3 L-PUB-1
   ICEエージェントR：2001：db8 :: 5 R-PUB-1
   STUNサーバー：2001：db8 :: 9 STUN-PUB-1
        
             LスタンR
             | STUN割り当て. | |
             |（1）STUN Req | |
             | S = $ L-PUB-1 | |
             | D = $ STUN-PUB-1 | |
             | ----------------------------> | |
             |（2）STUN Res | |
             | S = $ STUN-PUB-1 | |
             | D = $ L-PUB-1 | |
             | MA = $ L-PUB-1 | |
             | <---------------------------- | |
             |（3）Lの候補情報| |
             | -------------------------------------------> |
             | | | 気絶
             | | | 割り当てます. 
             | |（4）STUN Req |
             | | S = $ R-PUB-1 |
             | | D = $ STUN-PUB-1 |
             | | <------------- |
             | |（5）STUN Res |
             | | S = $ STUN-PUB-1 |
             | | D = $ R-PUB-1 |
             | | MA = $ R-PUB-1 |
             | | -------------> |
             |（6）Rの候補情報| |
             | <------------------------------------------- |
             |（7）バインド要件| |
             | S = $ L-PUB-1 | |
             | D = $ R-PUB-1 | |
             | -------------------------------------------> |
             |（8）バインド解像度| |
             | S = $ R-PUB-1 | |
             | D = $ L-PUB-1 | |
             | MA = $ L-PUB-1 | |
             | <------------------------------------------- |
        
             |データ| |
             | ===========================================> |
             | | |
             |（9）バインド要件| |
             | S = $ R-PUB-1 | |
             | D = $ L-PUB-1 | |
             | <------------------------------------------- |
             |（10）バインド解像度| |
             | S = $ L-PUB-1 | |
             | D = $ R-PUB-1 | |
             | MA = $ R-PUB-1 | |
             | -------------------------------------------> |
             |データ| |
             | <=========================================== |
             | | |
                                ...... 
             | | |
             |（11）バインド要件| |
             | S = $ L-PUB-1 | |
             | D = $ R-PUB-1 | |
             | USE-CAND | |
             | -------------------------------------------> |
             |（12）バインド解像度| |
             | S = $ R-PUB-1 | |
             | D = $ L-PUB-1 | |
             | MA = $ L-PUB-1 | |
             | <------------------------------------------- |
             | | | |
        
図10：フローの例

メッセージ1-2：エージェントLは、ローカルIPアドレスからホスト候補を収集し、そこからSTUNバインディング要求をSTUNサーバーに送信します. エージェントLはNATの背後にないため、Lのサーバー再帰候補はホスト候補と同一になります. 

メッセージ3：エージェントLは、ICEの使用に関連付けられたシグナリングプロトコルを使用して、ローカル候補情報をエージェントRに送信します. 

メッセージ4-5：エージェントRは、ローカルIPアドレスからホスト候補を収集し、そこからSTUNバインディング要求をSTUNサーバーに送信します. エージェントRはNATの背後にないため、Rのサーバー再帰候補はホスト候補と同一になります. 

メッセージ6：エージェントRは、ICEの使用に関連付けられたシグナリングプロトコルを使用して、ローカル候補情報をエージェントLに送信します. 

両方のエージェントが完全なICE実装であるため、開始エージェント（エージェントL）が制御エージェントになります. 

エージェントLとRの両方が候補をペアにします. 両方のエージェントは、最初はそれぞれ1つのペアを持っています. エージェントLでは、ペア（L1）のローカル候補は$ L_PUB_1で、リモート候補は$ R_PUB_1です. エージェントRでは、ペア（R1）のローカル候補は$ R_PUB_1で、リモート候補は$ L_PUB_1です. ペアを以下に示します（ペア番号は参照のみを目的としています）. 

                            ペア
   ENTITYローカルリモートペア＃有効
   -------------------------------------------------- --------------------------------
   ICEエージェントL：L_PUB_1 R_PUB_1 L1
        
ICEエージェントR：R_PUB_1 L_PUB_1 R1

メッセージ7〜8：エージェントLは、ペアL1の接続チェックを開始します. チェックが成功し、ペア（L1）がエージェントLの有効なリストに追加されます. エージェントLは、必要に応じてペア（L1）でデータを送受信できるようになりました. 

                            ペア
   ENTITYローカルリモートペア＃有効
   -------------------------------------------------- --------------------------------
   ICEエージェントL：L_PUB_1 R_PUB_1 L1 X
        
ICEエージェントR：R_PUB_1 L_PUB_1 R1

メッセージ9-10：エージェントRがエージェントLからバインディング要求を受信すると（メッセージ7）、トリガーされた接続チェックを開始します. このペアは、エージェントRの既存のペア（R1）と一致します. チェックが成功し、ペア（R1）がエージェントRの有効なリストに追加されます. エージェントRは、必要に応じてペア（R1）でデータを送受信できるようになりました. 

                            ペア
   ENTITYローカルリモートペア＃有効
   -------------------------------------------------- --------------------------------
   ICEエージェントL：L_PUB_1 R_PUB_1 L1 X
        
ICEエージェントR：R_PUB_1 L_PUB_1 R1 X

メッセージ11〜12：ある時点で、制御エージェント（エージェントL）は、有効なリストでペア（L1）を指定することを決定します. ペア（L1）で接続チェックを実行し、バインディング要求にUSE-CANDIDATE属性を含めます. チェックが成功すると、エージェントLはペア（L1）の指定フラグ値を「true」に設定し、エージェントRは一致するペア（R1）の指定フラグ値を「true」に設定します. 

ストリームに関連付けられているコンポーネントがなくなると、指定されたペアが選択されたペアになります. その結果、このストリームの処理は完了状態に移行します. ICEプロセスも完了状態に移行します. 

16.STUN拡張機能
16.1. 属性
この仕様では、PRIORITY、USE-CANDIDATE、ICE-CONTROLLED、およびICE-CONTROLLINGの4つのSTUN属性を定義しています. 

PRIORITY属性は、ピア再帰候補がこのチェックによって検出される場合に、その候補に関連付けられる優先度を示します. これは32ビットの符号なし整数であり、属性値は0x0024です. 

USE-CANDIDATE属性は、このチェックの結果の候補ペアがデータの送信に使用されることを示します. 属性にコンテンツがありません（属性の長さフィールドがゼロです）. それは旗として機能します. 属性値は0x0025です. 

ICE-CONTROLLED属性は、バインディング要求に存在します. この属性は、クライアントが現在制御されている役割にあると信じていることを示します. 属性の内容は、乱数を含むネットワークバイトオーダーの64ビット符号なし整数です. この番号は、「タイブレーカー値」と呼ばれる場合に、役割の競合を解決するために使用されます. ICEエージェントは、487応答を受信した場合を除き、ICEセッション内のすべてのストリームに対して、すべてのバインディング要求に同じ番号を使用する必要があります. 受信した場合は、番号を変更する必要があります（セクション7.2.5.1）. エージェントは、ICEの再起動が発生したときに番号を変更できます（MAY）. 

ICE-CONTROLLING属性は、バインディング要求に存在します. この属性は、クライアントが現在制御ロールにあると信じていることを示します. 属性の内容は、乱数を含むネットワークバイトオーダーの64ビット符号なし整数です. ICE-CONTROLLED属性については、番号は役割の競合を解決するために使用されます. エージェントは、487応答を受信した場合を除き、ICEセッション内のすべてのストリームに対して、すべてのバインディング要求に同じ番号を使用する必要があります. 受信した場合は、番号を変更する必要があります（セクション7.2.5.1）. エージェントは、ICEの再起動が発生したときに番号を変更できます（MAY）. 

16.2. 新しいエラー応答コード
この仕様は、単一のエラー応答コードを定義します. 

487（ロールの競合）：バインディング要求にICE-CONTROLLINGまたはICE-CONTROLLED属性のいずれかが含まれており、サーバーと競合したICEロールを示しています. リモートサーバーは、クライアントとサーバーのタイブレーカー値を比較し、クライアントが役割を切り替える必要があると判断しました. 

17.運用上の考慮事項
このセクションでは、エンドポイントでICEが使用されるネットワークを運用している事業者に関連する問題について説明します. 

17.1. NATとファイアウォールの種類
ICEは、既存のNATおよびファイアウォール機器と連携するように設計されています. したがって、ICEの展開を容易にするために、既存のファイアウォールおよびNAT機器を交換または再構成する必要はありません. 実際、ICEは、Voice over IP（VoIP）オペレーターがファイアウォールやNATなどのIPネットワークインフラストラクチャを制御できない環境に展開するために開発されました. 

とはいえ、ICEは、NATデバイスが「動作」に準拠し、[RFC4787]および[RFC5382]で定義されている推奨事項を満たしている環境で最適に機能します. 動作に準拠したNATを備えたネットワークでは、ICEはTURNサーバーを必要とせずに機能するため、音声品質が向上し、通話のセットアップ時間が短縮され、ネットワークオペレータに要求される帯域幅が削減されます. 

17.2. 帯域幅の要件
ICEの展開には、オペレーターが考慮する必要のある利用可能なネットワーク容量とのいくつかの相互作用があります. 

17.2.1. STUNおよびTURNサーバー-キャパシティプランニング
何よりもまず、ICEは、通常はデータセンターに配置されるTURNサーバーとSTUNサーバーを利用します. STUNサーバーは比較的少ない帯域幅を必要とします. 各データストリームのコンポーネントごとに、各クライアントからSTUNサーバーへの1つ以上のSTUNトランザクションがあります. 基本的な音声のみのIPv4VoIP展開では、コールごとに4つのトランザクションがあります（発信者と着信者の両方に対して、RTP用に1つ、RTCP用に1つ）. 各トランザクションは単一の要求と単一の応答であり、前者は20バイトの長さで、後者は28バイトです. 

したがって、システムにN人のユーザーがいて、それぞれが忙しい時間に4回の呼び出しを行う場合、これにはN * 1.7bpsが必要になります. 100万人のユーザーの場合、これは1.7 Mbpsであり、非常に少数です（比較的言えば）. 

TURNトラフィックはより重要です. TURNサーバーは、実際のデータのトラフィックに加えて、STUNボリュームに等しいトラフィックボリュームを認識します（実際、TURNサーバーが展開されている場合は、別個のSTUNサーバーは必要ありません）. データリレーにTURNを必要とする呼び出しの量は、ネットワークトポロジに大きく依存し、時間の経過とともに変化する可能性があります. 100％動作に準拠したNATを備えたネットワークでは、それは正確にゼロです. 

上記の計画に関する考慮事項は、マルチメディアシナリオ（音声会議やビデオ会議など）やセッションの参加者数が増えると、より重要になります. 

17.2.2. 収集と接続チェック
候補を収集して接続チェックを実行するプロセスは、帯域幅を大量に消費する可能性があります. ICEは、これら両方のプロセスのペースを調整するように設計されています. 収集フェーズと接続チェックフェーズは、ICEプロセスが終了したときにデータトラフィック自体が消費するのとほぼ同じ帯域幅でトラフィックを生成することを目的としています. これは、ネットワークが特定のタイプ（音声、ビデオ、またはテキストのみ）の通信トラフィックをサポートするように設計されている場合、そのデータのICEチェックをサポートするのに十分な容量があることを確認するために行われました. ICEが終了すると、後続のICEキープアライブにより、後で合計帯域幅使用率がわずかに増加します. ただし、これは通常、ごくわずかな増加になります. 

収集フェーズとチェックフェーズによる輻輳は、ペーシングを使用しない展開では問題になることが証明されています. 通常、アクセスリンクは、エンドポイントが送信できる限りの速さでネットワークにチェックを殺到したため、混雑していました. したがって、ネットワークオペレーターは、ICE実装がペーシング機能をサポートしていることを確認する必要があります. このペーシングにより、コールセットアップ時間が長くなりますが、ICEネットワークが使いやすくなり、展開が容易になります. 

17.2.3. キープアライブ
STUNキープアライブ（STUNバインディング表示の形式）は、データセッションの途中で送信されます. ただし、実際のデータトラフィックがない場合にのみ送信されます. 連続メディアを使用し、音声アクティビティ検出（VAD）を使用しない展開、またはVADを短い間隔（最大1秒）のコンフォートノイズとともに使用する展開では、キープアライブは使用されず、帯域幅の使用量は増加しません. VADがコンフォートノイズなしで使用されている場合、キープアライブは無音期間中に送信されます. これには、音声があるときに送信される20〜30ミリ秒ごとのパケットよりもはるかに少ない15〜20秒ごとの単一のパケットが含まれます. したがって、キープアライブはキャパシティプランニングに実際の影響を与えません. 

17.3. ICEおよびICE-Lite
ICEとICE-liteを組み合わせて使用​​する展開は、相互に連携します. それらはそうするように明示的に設計されています. 

ただし、ICE-liteは限られたユースケースでのみ展開できます. これらのケース、およびそうすることに伴う警告は、付録Aに記載されています. 

17.4. トラブルシューティングとパフォーマンス管理
ICEはエンドツーエンドの接続チェックを利用し、処理の多くをエンドポイントに配置します. これはネットワークオペレーターに課題をもたらします-彼らはどのようにICE展開をトラブルシューティングできますか？ICEのパフォーマンスをどのようにして知ることができますか？

ICEには、これらの問題に対処するのに役立つ機能が組み込まれています. 通常、ネットワークオペレーターのデータセンターに展開されているシグナリングサーバーは、ICEパラメーターを伝達する候補交換のコンテンツを確認します. これらのパラメーターには、各候補のタイプ（ホスト、サーバー再帰、またはリレー）と、それらに関連するアドレスが含まれます. ICE処理が完了すると、更新された候補交換が行われ、選択されたアドレス（およびそのタイプ）が通知されます. この更新されたシグナリングは、ICE処理の結果についてネットワーク機器（シグナリングに接続された診断ツールなど）を教育する目的で正確に実行されます. 

その結果、シグナリングサーバーによって生成されたログを通じて、ネットワークオペレーターは、各コールに使用されている候補のタイプと、ICEによって選択されたアドレスを監視できます. これは、ICEのパフォーマンスを評価するのに役立つ主要な情報です. 

17.5. エンドポイント構成
ICEは、エンドポイントに構成されているいくつかのデータに依存しています. この構成データには、タイマー、TURNサーバーの資格情報、およびSTUNサーバーとTURNサーバーのホスト名が含まれます. ICE自体は、この構成のメカニズムを提供しません. 代わりに、この情報は、エンドポイント内の他のすべてのパラメーターを構成するために使用されるメカニズムに関連付けられていると想定されます. SIP電話の場合、構成フレームワーク[RFC6080]などの標準ソリューションが定義されています. 

18.IABの考慮事項
IABは、「一方的な自己アドレス修正」（UNSAF）の問題を研究しました. これは、ICEエージェントが協調プロトコルリフレクションメカニズムを介してNATの反対側にある別のレルムでアドレスを決定しようとする一般的なプロセスです[ RFC3424]. ICEは、このタイプの機能を実行するプロトコルの例です. 興味深いことに、ICEのプロセスは一方的なものではなく、二国間のものであり、その違いはIABによって提起された問題に大きな影響を及ぼします. 実際、ICEは、UNSAFプロトコルではなく、Bilateral Self-Address Fixing（B-SAF）プロトコルと見なすことができます. とにかく、IABは、この目的のために開発されたプロトコルが特定の一連の考慮事項を文書化することを義務付けています. このセクションはそれらの要件を満たしています. 

18.1. 問題の定義
RFC 3424から、UNSAF提案は以下を提供する必要があります. 

UNSAF提案で解決される特定の限定された範囲の問題の正確な定義. 他の問題を解決するために、短期間の修正を一般化するべきではありません. このような一般化は、想定される短期的な修正への長期的な依存と使用につながります. つまり、「短期的」と呼ぶのはもはや正確ではありません. 

ICEによって解決されている特定の問題は次のとおりです. 

2つのピアが、通信に使用できるトランスポートアドレスのセットを決定するための手段を提供します. 

エージェントが通信したい別のピアが到達可能なアドレスを決定する手段を提供します. 

18.2. 出口戦略
RFC 3424から、UNSAF提案は以下を提供する必要があります. 

出口戦略/移行計画の説明. より良い短期的な修正は、適切な技術が展開されるにつれて自然に使用が少なくなる修正です. 

ICE自体は簡単に段階的に廃止されることはありません. ただし、グローバルに接続されたインターネットでも、ルーターの障害によって接続が一時的に中断されたかどうかを検出する手段として機能する場合などに役立ちます. ICEは、NATとは関係のない特定のセキュリティ攻撃の防止にも役立ちます. ただし、ICEが行うことは、他のUNSAFメカニズムの段階的廃止を支援することです. ICEはこれらのメカニズムの中から効果的に選択し、より良いメカニズムを優先し、より悪いメカニズムを優先します. IPv6が導入されるとNATが消滅し始めると、ネイティブホスト候補への優先度の高い接続が存在するため、サーバー再帰候補とリレー候補（両方の形式のUNSAFアドレス）が使用されることはありません. したがって、サーバーの使用量はますます少なくなり、使用量がゼロになったときに最終的に削除できます. 

実際、ICEはIPv4からIPv6への移行を支援できます. 2つのデュアルスタックホストがSIPと通信するときにIPv6とIPv4のどちらを使用するかを決定するために使用できます（IPv6が使用されます）. また、6to4接続とネイティブv6接続の両方を備えたネットワークが、ピアとの通信時に使用するアドレスを決定できるようにすることもできます. 

18.3. ICEによって導入された脆性
RFC 3424から、UNSAF提案は以下を提供する必要があります. 

システムをより「脆弱」にする可能性のある特定の問題についての議論. たとえば、複数のネットワークレイヤーでデータを使用するアプローチでは、依存関係が増え、デバッグの課題が増え、移行が困難になります. 

ICEは実際に既存のUNSAFメカニズムから脆弱性を取り除きます. 特に、古典的なSTUN（RFC 3489 [RFC3489]で説明されている）には、いくつかの脆弱性があります. それらの1つは、ICEエージェントが背後にあるNATのタイプを分類しようとする必要がある検出プロセスです. このプロセスはエラーが発生しやすいです. ICEでは、その検出プロセスは単に使用されません. アドレスの有効性を一方的に評価するのではなく、その有効性はピアへの接続を測定することによって動的に決定されます. 接続を決定するプロセスは非常に堅牢です. 

従来のSTUNやその他の一方的なメカニズムの脆弱性のもう1つのポイントは、追加のサーバーに完全に依存していることです. ICEは、一方的なアドレスを割り当てるためにサーバーを利用しますが、可能であれば、エージェントが直接接続できるようにします. したがって、場合によっては、STUNサーバーに障害が発生しても、ICEが使用されているときに通話を進行させることができます. 

従来のSTUNの脆弱性のもう1つのポイントは、STUNサーバーがパブリックインターネット上にあることを前提としていることです. 興味深いことに、ICEではそれは必要ありません. さまざまなアドレスレルムに多数のSTUNサーバーが存在する可能性があります. ICEは、使用可能なアドレスを提供したアドレスを検出します. 

従来のSTUNの脆弱性の最も厄介な点は、すべてのネットワークトポロジで機能するとは限らないことです. 各エージェントとSTUNサーバーの間に共有NATがある場合、従来のSTUNが機能しない可能性があります. ICEを使用すると、その制限がなくなります. 

Classic STUNでは、セキュリティに関する考慮事項もいくつか紹介されています. 幸い、これらのセキュリティ上の考慮事項もICEによって軽減されます. 

その結果、ICEは従来のSTUNで導入された脆弱性を修復するのに役立ち、システムに追加の脆弱性を導入することはありません. 

これらの改善のペナルティは、ICEがセッションの確立時間を増やすことです. 

18.4. 長期的なソリューションの要件
RFC 3424から、UNSAF提案は以下を提供する必要があります. 

長期的で健全な技術ソリューションの要件を特定します. 適切な長期的な解決策を見つけるプロセスに貢献します. 

RFC3489からの結論は変更されていません. ただし、ICEは長期的なソリューションの一部になる可能性があると考えているため、実際に役立つと感じています. 

18.5. 既存のNAPTボックスに関する問題
RFC 3424から、UNSAF提案は以下を提供する必要があります. 

指摘された実際的な問題が既存の展開されたNA [P] Tおよび経験レポートに与える影響についての議論. 

現在、「汎用」ALG機能を提供しようとする多くのNATボックスが市場に展開されています. これらの汎用ALGは、パケット内のテキスト形式またはバイナリ形式のIPアドレスを検索し、バインディングと一致する場合はそれらを書き換えます. これは古典的なSTUNを妨害します. ただし、STUN [RFC5389]の更新では、これらのバイナリアドレスを汎用ALGから隠すエンコーディングが使用されています. 

既存のNAPTボックスには、非決定論的で、通常、UDPベースのバインディングの有効期限が短くなっています. これには、これらのバインディングを維持するために定期的なキープアライブを送信する実装が必要です. ICEはデフォルトの15秒を使用しますが、これは非常に控えめな見積もりです. 最終的に、NATボックスが動作に準拠するようになると[RFC4787]、この最小キープアライブは決定論的になります. 

よく知られている、そしてICEタイマーは調整することができます. 最小キープアライブ間隔を検出して制御する方法があると、さらに優れたものになります. 

19.セキュリティに関する考慮事項
19.1. IPアドレスのプライバシー
候補をプローブするプロセスは、クライアントとそのピアの送信元アドレスをネットワーク上のリスニング攻撃者に明らかにし、候補を交換するプロセスは、ネゴシエーションを見ることができる攻撃者にアドレスを明らかにします. VPNユーザーのローカルインターフェイスを介して収集されたサーバー再帰アドレスなどの一部のアドレスは、機密情報である可能性があります. これらの潜在的な攻撃を軽減できない場合、ICEの使用法は、ネゴシエーションおよび/またはプロービングプロセスに公開されるアドレスを制御するためのメカニズムを定義できます. 個々の実装には、どのアドレスを公開するかを制御するための実装固有のルールがある場合もあります. たとえば、[WebRTC-IP-HANDLING]は、WebRTCアプリケーションのICEを介してIPアドレスを公開する際のプライバシーの側面に関する追加情報を提供します. 

ピアによって提供された候補のタイプ、およびそれらの候補に対して実行された接続テストの結果に基づいて、ピアは、たとえば、異なるタイミングがピアに明らかであるかどうかなど、ローカルネットワークの特性を判断できる場合があります. 制限内で、ピアはローカルネットワークをプローブできる可能性があります. 

ICEシステムで発生する可能性のある攻撃にはいくつかの種類があります. サブセクションでは、これらの攻撃とその対策について検討します. 

19.2. 接続チェックへの攻撃
攻撃者は、STUN接続チェックを妨害しようとする可能性があります. 最終的に、これらの攻撃はすべて、ICEエージェントをだまして、接続チェックの結果について何か間違ったことを考えさせます. 攻撃の種類に応じて、攻撃者はさまざまな機能を備えている必要があります. 場合によっては、攻撃者は接続チェックのパス上にいる必要があります. その他の場合、攻撃者は、STUN接続チェックを生成できる限り、パス上にいる必要はありません. 接続チェックへの攻撃は通常、ネットワークエンティティによって実行されますが、攻撃者がエンドポイントを制御できる場合は、接続チェック攻撃をトリガーできる可能性があります. 攻撃者が試みて引き起こす可能性のある誤った結論は次のとおりです. FalseInvalid：攻撃者は、エージェントのペアをだまして、候補ペアが無効であると思わせることができます. 

False Valid：攻撃者は、エージェントのペアをだまして、候補のペアが有効ではないのに有効であると思わせることができます. これにより、エージェントはセッションを続行できますが、データを受信できなくなる可能性があります. 

False Peer-Reflexive Candidate：攻撃者は、予期されていないときに、エージェントに新しいピアリフレクティブ候補を発見させることができます. これは、盗聴やその他の目的で、データストリームをDoSターゲットまたは攻撃者にリダイレクトするために使用できます. 

False候補に対してFalse有効：攻撃者は、実際にはそのエージェントにルーティングされないアドレスを持つ候補が存在することをエージェントにすでに確信させています（たとえば、偽のピア再帰候補または偽のサーバー再帰候補を注入することによって）. 次に、攻撃者は攻撃を開始し、エージェントにこの候補が有効であると信じ込ませます. 

攻撃者が偽のピアリフレクティブ候補または偽の候補に対して偽の有効を引き起こす可能性がある場合、[RFC5389]で説明されている攻撃のいずれかを開始できます. 

誤った無効な結果を強制するには、攻撃者はエージェントの1つからの接続チェックが送信されるのを待つ必要があります. その場合、攻撃者は、回復不能なエラー応答（400など）を含む偽の応答を挿入するか、エージェントに到達しないように応答をドロップする必要があります. ただし、候補は実際には有効であるため、元の要求がピアエージェントに到達し、成功応答になる可能性があります. 攻撃者は、DoS攻撃、レイヤー2ネットワークの中断、または別の手法によって、このパケットまたはその応答を強制的にドロップする必要があります. これを行わない場合、成功応答も発信者に到達し、攻撃の可能性を警告します. 攻撃者が偽の応答を生成する機能は、STUNの短期資格情報メカニズムによって軽減されます. この応答を処理するには、攻撃者はパスワードを必要とします. 候補交換シグナリングが保護されている場合、攻撃者はパスワードを持たず、その応答は破棄されます. 

なりすましICMPハードエラー（タイプ3、コード2〜4）を使用して、誤った無効な結果を作成することもできます. ICEエージェントがこれらのICMPエラーへの応答を実装する場合、攻撃者は接続チェックを送信するエージェントに配信されるICMPメッセージを生成することができます. エージェントによるICMPエラーメッセージの検証は、その唯一の防御策です. タイプ3コード= 4の場合、接続チェックがDF = 0で送信されない限り、外部IPヘッダーは検証を提供しません. ホストによって発信されたコード2または3の場合、アドレスは、リモートエージェントのホスト、再帰、またはリレー候補のIPアドレスのいずれかであることが期待されます. ICMPメッセージには、エラーをトリガーするメッセージのIPヘッダーとUDPヘッダーが含まれます. これらのフィールドも検証する必要があります. IP宛先とUDP宛先ポートは、ターゲット候補のアドレスとポート、または候補のベースアドレスのいずれかと一致する必要があります. 送信元IPアドレスとポートは、接続チェックを送信するエージェントの同じベースアドレスの任意の候補にすることができます. したがって、候補者の交換にアクセスできる攻撃者は、必要な情報を入手できます. したがって、検証は弱い防御であり、スプーフィングされたICMP攻撃の送信は、送信元アドレスの検証なしでネットワーク内のノードからのオフパス攻撃者に対しても可能です. 

偽の有効な結果を強制することも同様に機能します. 攻撃者は、各エージェントからのバインディングリクエストを待ち、偽の成功応答を挿入する必要があります. この場合も、STUNの短期資格情報メカニズムにより、攻撃者が有効な成功応答を挿入するために、攻撃者はパスワードを必要とします. あるいは、攻撃者は（たとえば、トンネリングメカニズムを使用して）有効な成功応答をルーティングできます. これは通常、ネットワークによってドロップまたは拒否されますが、エージェントに送信されます. 

偽のピアリフレクティブ候補の結果を強制するには、偽の要求または応答、あるいはリプレイを使用します. 最初に、偽の要求と応答のケースを検討します. 攻撃者は、偽の候補の送信元IPアドレスとポートを使用して1つのエージェントにバインディング要求を送信する必要があります. さらに、攻撃者は他のエージェントからのバインディングリクエストを待ち、偽の候補を含むXOR-MAPPED-ADDRESS属性を使用して偽の応答を生成する必要があります. ここで説明する他の攻撃と同様に、この攻撃はSTUNメッセージの整合性メカニズムと安全な候補交換によって軽減されます. 

パケットリプレイで誤ったピアリフレクティブ候補の結果を強制することは異なります. 攻撃者は、エージェントの1人が小切手を送信するまで待機します. この要求を傍受し、偽の送信元IPアドレスを持つ他のエージェントに向けて再生します. また、DoS攻撃を開始してパケットをドロップするか、レイヤー2メカニズムを使用してパケットを強制的にドロップすることにより、元の要求がリモートエージェントに到達しないようにする必要があります. 整合性チェックに合格したため、再生されたパケットは他のエージェントで受信され、受け入れられます（整合性チェックは送信元IPアドレスとポートをカバーできず、カバーしません）. その後、応答されます. この応答には、偽の候補を含むXOR-MAPPED-ADDRESSが含まれ、その偽の候補に送信されます. 次に、攻撃者はそれを受信し、発信者に中継する必要があります. 

次に、他のエージェントは、その誤った候補に対する接続チェックを開始します. この検証は成功する必要があります. これには、攻撃者が偽の候補に対して偽の有効を強制する必要があります. この目標を達成するための偽の要求または応答の注入は、STUNおよび候補交換の整合性メカニズムを使用して防止されます. したがって、この攻撃はリプレイを通じてのみ開始できます. これを行うには、攻撃者はこの偽の候補に対するチェックを傍受し、他のエージェントに対して再生する必要があります. 次に、応答をインターセプトし、それを再生する必要があります. 

この攻撃は、攻撃者が偽の候補者によって識別されない限り、開始するのが非常に困難です. これは、攻撃者が2つの異なるホストから送信されたパケットを傍受して再生する必要があるためです. 両方のエージェントが異なるネットワーク上にある場合（たとえば、パブリックインターネット全体）、この攻撃は、ネットワークの異なる部分にある2つの異なるエンドポイントに対して同時に発生する必要があるため、調整が難しい場合があります. 

攻撃者自体が偽の候補者によって識別された場合、攻撃の調整が容易になります. ただし、データパスが保護されている場合（たとえば、Secure Real-time Transport Protocol（SRTP）[RFC3711]を使用）、攻撃者はデータパケットを処理できず、破棄することしかできず、事実上無効になります. データストリーム. ただし、この攻撃では、接続チェックがターゲットに到達するのをブロックするために、エージェントがパケットを中断する必要があります. その場合、目標がデータストリームを中断することである場合、ICEを攻撃するよりも、同じメカニズムでデータストリームを中断する方がはるかに簡単です. 

19.3. サーバーへの攻撃-再帰アドレス収集
ICEエンドポイントは、STUNサーバーからサーバー再帰候補を収集するためにSTUNバインディング要求を利用します. これらの要求は、いかなる方法でも認証されません. 結果として、攻撃者がクライアントに偽のサーバー反射候補を提供するために採用できる手法は多数あります. 

o攻撃者はDNSを危険にさらし、DNSクエリが不正なSTUNサーバーアドレスを返す可能性があります. そのサーバーは、クライアントに偽のサーバー再帰候補を提供できます. この攻撃はDNSセキュリティによって軽減されますが、DNSSECはそれに対処する必要はありません. 

o STUNメッセージを監視できる攻撃者（Wi-Fiなどの共有ネットワークセグメント上の攻撃者など）は、有効でクライアントに受け入れられる偽の応答を挿入する可能性があります. 

o攻撃者は、STUNサーバーを危険にさらし、マップされたアドレスが正しくない応答を送信させる可能性があります. 

これらの攻撃によって学習された誤ってマップされたアドレスは、ICEセッションの確立時にサーバー再帰候補として使用されます. この候補が実際にデータに使用されるためには、攻撃者は接続チェックも攻撃する必要があり、特に、偽の候補に対して偽の有効を強制する必要があります. この攻撃は、偽のアドレスが第三者（イニシエーター、レスポンダー、攻撃者のいずれでもない）を識別する場合、開始するのが非常に困難です. これは、セッション内の各ICEエージェントによって生成されたチェックを攻撃する必要があり、攻撃者を識別する場合はSRTPによって防止されるためです. 自体. 

攻撃者が接続チェックを攻撃しないことを選択した場合、攻撃者が実行できる最悪の事態は、サーバー再帰候補が使用されないようにすることです. ただし、ピアエージェントに、攻撃を受けているエージェントが到達可能な候補が少なくとも1つある場合、STUN接続チェック自体が、データ交換に使用できるピア再帰候補を提供します. ピアリフレクティブ候補は、一般的にサーバーリフレクティブ候補よりも優先されます. そのため、STUNアドレス収集のみに対する攻撃は、通常、セッションにまったく影響を与えません. 

19.4. 中継された候補者の集まりへの攻撃
攻撃者は、中継された候補の収集を妨害しようとし、クライアントに誤った中継された候補があると信じ込ませる可能性があります. TURNサーバーとの交換は、長期の資格情報を使用して認証されます. その結果、偽の応答または要求の注入は機能しません. さらに、バインド要求とは異なり、割り当て要求は、送信元IPアドレスとポートがクライアントにリレーされた候補を提供するために使用されないため、変更された送信元IPアドレスとポートを使用したリプレイ攻撃の影響を受けません. 

攻撃者がクライアントに誤って中継された候補を信じさせたとしても、接続チェックにより、そのような候補は成功した場合にのみ使用されます. したがって、攻撃者は、上記のように、偽の候補に対して偽の有効なものを起動する必要があります. これは、調整が非常に難しい攻撃です. 

19.5. インサイダー攻撃
攻撃者が偽の候補情報またはSTUNメッセージを挿入しようとするサードパーティである攻撃に加えて、攻撃者がICE交換の認証された有効な参加者である場合、ICEで攻撃が発生する可能性があります. 

19.5.1. スタン増幅攻撃
STUN増幅攻撃は、攻撃者が他のエージェントに音声パケットを攻撃対象に向けさせる「ボイスハンマー」攻撃に似ています. ただし、音声パケットがターゲットに送信される代わりに、STUN接続チェックがターゲットに送信されます. 攻撃者は多数の候補、たとえば50を送信します. 応答エージェントは候補情報を受信して​​チェックを開始します. チェックはターゲットに向けられているため、応答を生成することはありません. WebRTCの場合、ユーザーがフェッチした悪意のあるJavaScriptコードによってバックグラウンドでトリガーされる可能性があるため、ユーザーはこの攻撃が進行中であることに気付かない可能性があります. 回答者は、Ta msごとに新しい接続チェックを開始します（たとえば、Ta = 50ms）. しかしながら、候補数が多いため、再送タイマーが大きく設定されています. 結果として、パケットはTaミリ秒ごとに1つの間隔で送信され、その後は間隔を増やして送信されます. したがって、STUNはデータが送信されるよりも速い速度でパケットを送信せず、ICEがセッションで失敗するまで、STUNパケットは短時間しか持続しません. それにもかかわらず、これは増幅メカニズムです. 

増幅を排除することは不可能ですが、さまざまなヒューリスティックによって音量を下げることができます. ICEエージェントは、実行する接続チェックの総数を100に制限する必要があります. さらに、エージェントは、受け入れる候補の数を制限する場合があります. 

多くの場合、これらの種類の攻撃を回避したいプロトコルは、イニシエーターに次のメッセージを送信する前に応答を待機させる. ただし、ICEの場合、これは不可能です. 次の2つのケースを区別することはできません. 

oイニシエーターが、応答しない無防備なターゲットに対してDoS攻撃を開始するために使用されているため、応答がありませんでした. 

oイニシエーターがIPアドレスとポートに到達できないため、応答がありませんでした. 

2番目のケースでは、次の機会に別の小切手が送信されますが、前者のケースでは、それ以上の小切手は送信されません. 

20.IANAの考慮事項
元のICE仕様では、4つのSTUN属性と1つの新しいSTUNエラー応答が登録されていました. STUN属性とエラー応答がここに再現されています. さらに、この仕様は新しいICEオプションを登録します. 

20.1. STUN属性
IANAは4つのSTUN属性を登録しています. 

0x0024優先度0x0025使用候補0x8029ICE-CONTROLLED 0x802A ICE-CONTROLLING

20.2. STUNエラー応答
IANAは、次のSTUNエラー応答コードを登録しました. 

487ロールの競合：クライアントは、サーバーのロールと競合するICEロール（制御または制御）をアサートしました. 

20.3. ICEオプション
IANAは、[RFC6336]で定義されている手順に従って、「Interactive Connectivity Establishment（ICE）」レジストリの「ICEOptions」サブレジストリに次のICEオプションを登録しました. 

ICEオプション名：ice2

連絡先：名前：IESG電子メール：iesg@ietf.org

コントローラーの変更：IESG

説明：ICEオプションは、ICEオプションを使用するICEエージェントがRFC8445に従って実装されていることを示します. 

参照：RFC 8445

21. RFC5245からの変更
この更新されたICE仕様の目的は、次のとおりです. 

o RFC5245の手順を明確にします. 

o RFC 5245で発見された欠陥と、RFC 5245に基づいてICEアプリケーションを実装および展開したコミュニティからのフィードバックにより、技術的な変更を加えます. 

o SIPおよびSDPプロシージャを削除して、プロシージャをシグナリングプロトコルから独立させます. シグナリングプロトコルに固有の手順は、個別の使用法ドキュメントで定義されます. [ICE-SIP-SDP]は、SIPおよびSDPでのICEの使用法を定義します. 

次の技術的な変更が行われました. 

o積極的な指名が削除されました. 

o候補ペアの状態を計算し、接続チェックをスケジュールする手順が変更されました. 

oTaおよびRTOの計算手順が変更されました. 

o ActiveChecklistとFrozenチェックリストの定義が削除されました. 

o'ice2'ICEオプションが追加されました. 

oIPv6の考慮事項が変更されました. 

oキープアライブのno-opでの使用、および非ICEピアでのキープアライブは削除されました. 

22.参考文献
22.1. 規範的参考文献
[RFC2119] Bradner、S. 、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ rfc2119>. 

[RFC4941] Narten、T.、Draves、R. 、およびS. Krishnan、「IPv6でのステートレスアドレス自動構成のプライバシー拡張」、RFC 4941、DOI 10.17487 / RFC4941、2007年9月、<https：//www.rfc-editor .org / info / rfc4941>. 

[RFC5389] Rosenberg、J.、Mahy、R.、Matthews、P. 、およびD. Wing、「Session Traversal Utilities for NAT（STUN）」、RFC 5389、DOI 10.17487 / RFC5389、2008年10月、<https：// www.rfc-editor.org/info/rfc5389>. 

[RFC5766] Mahy、R.、Matthews、P. 、およびJ. Rosenberg、「NAT周辺のリレーを使用したトラバーサル（TURN）：NATのセッショントラバーサルユーティリティへのリレー拡張（STUN）」、RFC 5766、DOI 10.17487 / RFC5766、4月2010、<https://www.rfc-editor.org/info/rfc5766>. 

[RFC6336] Westerlund、M. and C. Perkins、 "IANA Registry for Interactive Connectivity Establishment（ICE）Options"、RFC 6336、DOI 10.17487 / RFC6336、2011年7月、<https://www.rfc-editor.org/info / rfc6336>. 

[RFC6724] Thaler、D.、Ed. 、Draves、R.、Matsumoto、A.、and T. Chown、 "Default Address Selection for Internet Protocol Version 6（IPv6）"、RFC 6724、DOI 10.17487 / RFC6724、2012年9月、<https://www.rfc-editor.org/info/rfc6724>. 

[RFC8174] Leiba、B. 、「RFC 2119キーワードにおける大文字と小文字のあいまいさ」、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>. 

22.2. 有益な参考文献
[ICE-SIP-SDP] Petit-Huguenin、M.、Nandakumar、S. 、およびA. Keranen、「Interactive Connectivity Establishment（ICE）のSession Description Protocol（SDP）オファー/アンサー手順」、進行中の作業、ドラフト- ietf-mmusic-ice-sip-sdp-21、2018年6月. 

[RFC1918] Rekhter、Y.、Moskowitz、B.、Karrenberg、D.、de Groot、G.、and E. Lear、 "Address Allocation for Private Internets"、BCP 5、RFC 1918、DOI 10.17487 / RFC1918、1996年2月、<https://www.rfc-editor.org/info/rfc1918>. 

[RFC2475] Blake、S.、Black、D.、Carlson、M.、Davies、E.、Wang、Z. 、およびW. Weiss、「An Architecture for Differentiated Services」、RFC 2475、DOI 10.17487 / RFC2475、12月1998年、<https://www.rfc-editor.org/info/rfc2475>. 

[RFC3102] Borella、M.、Lo、J.、Grabelsky、D. 、およびG. Montenegro、「Realm Specific IP：Framework」、RFC 3102、DOI 10.17487 / RFC3102、2001年10月、<https：//www.rfc -editor.org/info/rfc3102>. 

[RFC3103] Borella、M.、Grabelsky、D.、Lo、J. 、およびK. Taniguchi、「Realm Specific IP：Protocol Specification」、RFC 3103、DOI 10.17487 / RFC3103、2001年10月、<https：// www.  rfc-editor.org/info/rfc3103>. 

[RFC3235] Senie、D. 、「Network Address Translator（NAT）-Friendly Application Design Guidelines」、RFC 3235、DOI 10.17487 / RFC3235、2002年1月、<https://www.rfc-editor.org/info/rfc3235> . 

[RFC3261] Rosenberg、J.、Schulzrinne、H.、Camarillo、G.、Johnston、A.、Peterson、J.、Sparks、R.、Handley、M. 、およびE. Schooler、「SIP：SessionInitiationProtocol」 、RFC 3261、DOI 10.17487 / RFC3261、2002年6月、<https://www.rfc-editor.org/info/rfc3261>. 

[RFC3264] Rosenberg、J. およびH. Schulzrinne、「Session Description Protocol（SDP）を使用したオファー/アンサーモデル」、RFC 3264、DOI 10.17487 / RFC3264、2002年6月、<https://www.rfc-editor.org / info / rfc3264>. 

[RFC3303] Srisuresh、P.、Kuthan、J.、Rosenberg、J.、Molitor、A. 、およびA. Rayhan、「Middlebox通信アーキテクチャとフレームワーク」、RFC 3303、DOI 10.17487 / RFC3303、2002年8月、<https： //www.rfc-editor.org/info/rfc3303>. 

[RFC3424] Daigle、L.、Ed. およびIAB、「ネットワークアドレス変換全体でのUNilateral Self-Address Fixing（UNSAF）に関するIABの考慮事項」、RFC 3424、DOI 10.17487 / RFC3424、2002年11月、<https://www.rfc-editor.org/info/rfc3424>. 

[RFC3489] Rosenberg、J.、Weinberger、J.、Huitema、C. 、およびR. Mahy、「STUN-ネットワークアドレス変換器（NAT）を介したユーザーデータグラムプロトコル（UDP）の単純なトラバーサル」、RFC 3489、DOI 10.17487 / RFC3489、2003年3月、<https://www.rfc-editor.org/info/rfc3489>. 

[RFC3550] Schulzrinne、H.、Casner、S.、Frederick、R. 、およびV. Jacobson、「RTP：A Transport Protocol for Real-Time Applications」、STD 64、RFC 3550、DOI 10.17487 / RFC3550、2003年7月、 <https://www.rfc-editor.org/info/rfc3550>. 

[RFC3605] Huitema、C. 、「Session Description Protocol（SDP）のReal Time Control Protocol（RTCP）属性」、RFC 3605、DOI 10.17487 / RFC3605、2003年10月、<https://www.rfc-editor.org/ info / rfc3605>. 

[RFC3711] Baugher、M.、McGrew、D.、Naslund、M.、Carrara、E. 、およびK. Norrman、「The Secure Real-time Transport Protocol（SRTP）」、RFC 3711、DOI 10.17487 / RFC3711、3月2004年、<https://www.rfc-editor.org/info/rfc3711>. 

[RFC3725] Rosenberg、J.、Peterson、J.、Schulzrinne、H. 、およびG. Camarillo、「Session Initiation Protocol（SIP）におけるサードパーティのコール制御（3pcc）の現在のベストプラクティス」、BCP 85、RFC 3725 、DOI 10.17487 / RFC3725、2004年4月、<https://www.rfc-editor.org/info/rfc3725>. 

[RFC3879] Huitema、C. およびB. Carpenter、「Deprecating Site Local Addresses」、RFC 3879、DOI 10.17487 / RFC3879、2004年9月、<https://www.rfc-editor.org/info/rfc3879>. 

[RFC4038] Shin、MK. 、Ed. 、Hong、YG. 、Hagino、J.、Savola、P.、and E. Castro、 "Application Aspects of IPv6 Transition"、RFC 4038、DOI 10.17487 / RFC4038、March 2005、 <https://www.rfc-editor.org/info/rfc4038>. 

[RFC4091] Camarillo、G. およびJ. Rosenberg、「Session Description Protocol（SDP）Grouping Frameworkの代替ネットワークアドレスタイプ（ANAT）セマンティクス」、RFC 4091、DOI 10.17487 / RFC4091、2005年6月、<https：// www.rfc-editor.org/info/rfc4091>. 

[RFC4092] Camarillo、G. およびJ. Rosenberg、「Session Description Protocol（SDP）Alternative Network Address Types（ANAT）Semantics in the Session Initiation Protocol（SIP）」、RFC 4092、DOI 10.17487 / RFC4092、2005年6月、<https://www.rfc-editor.org/info/rfc4092>. 

[RFC4103] Hellstrom、G. and P. Jones、 "RTP Payload for Text Conversation"、RFC 4103、DOI 10.17487 / RFC4103、June 2005、<https://www.rfc-editor.org/info/rfc4103>. 

[RFC4291] Hinden、R. and S. Deering、「IP Version 6 Addressing Architecture」、RFC 4291、DOI 10.17487 / RFC4291、2006年2月、<https://www.rfc-editor.org/info/rfc4291>. 

[RFC4566] Handley、M.、Jacobson、V. 、およびC. Perkins、「SDP：Session Description Protocol」、RFC 4566、DOI 10.17487 / RFC4566、2006年7月、<https://www.rfc-editor.org/ info / rfc4566>. 

[RFC4787] Audet、F.、Ed. およびC.Jennings、「ユニキャストUDPのネットワークアドレス変換（NAT）動作要件」、BCP 127、RFC 4787、DOI 10.17487 / RFC4787、2007年1月、<https://www.rfc-editor.org/info/rfc4787> . 

[RFC5245] Rosenberg、J. 、「Interactive Connectivity Establishment（ICE）：A Protocol for Network Address Translator（NAT）Traversal for Offer / Answer Protocols」、RFC 5245、DOI 10.17487 / RFC5245、2010年4月、<https：// www .rfc-editor.org / info / rfc5245>. 

[RFC5382] Guha、S.、Ed. 、Biswas、K.、Ford、B.、Sivakumar、S.、and P. Srisuresh、 "NAT Behavioral Requirements for TCP"、BCP 142、RFC 5382、DOI 10.17487 / RFC5382、 2008年10月、<https://www.rfc-editor.org/info/rfc5382>. 

[RFC5761] Perkins、C. およびM. Westerlund、「単一ポートでのRTPデータと制御パケットの多重化」、RFC 5761、DOI 10.17487 / RFC5761、2010年4月、<https://www.rfc-editor.org/info / rfc5761>. 

[RFC6080] Petrie、D. and S. Channabasappa、Ed. 、 "A Framework for Session Initiation Protocol User Agent Profile Delivery"、RFC 6080、DOI 10.17487 / RFC6080、March 2011、<https：//www.rfc-editor.  org / info / rfc6080>. 

[RFC6146] Bagnulo、M.、Matthews、P. 、およびI. van Beijnum、「Stateful NAT64：Network Address and Protocol Translation from IPv6 Clients to IPv4 Servers」、RFC 6146、DOI 10.17487 / RFC6146、2011年4月、<https： //www.rfc-editor.org/info/rfc6146>. 

[RFC6147] Bagnulo、M.、Sullivan、A.、Matthews、P. 、およびI. van Beijnum、「DNS64：IPv6クライアントからIPv4サーバーへのネットワークアドレス変換のためのDNS拡張」、RFC 6147、DOI 10.17487 / RFC6147、4月2011、<https://www.rfc-editor.org/info/rfc6147>. 

[RFC6298] Paxson、V.、Allman、M.、Chu、J. 、およびM. Sargent、「Computing TCP's Retransmission Timer」、RFC 6298、DOI 10.17487 / RFC6298、2011年6月、<https：//www.rfc- editor.org/info/rfc6298>. 

[RFC6544] Rosenberg、J.、Keranen、A.、Lowekamp、B. 、およびA. Roach、「Interactive Connectivity Establishment（ICE）を使用したTCP候補」、RFC 6544、DOI 10.17487 / RFC6544、2012年3月、<https：/ /www.rfc-editor.org/info/rfc6544>. 

[RFC6928] Chu、J.、Dukkipati、N.、Cheng、Y. 、およびM. Mathis、「Increasing TCP's Initial Window」、RFC 6928、DOI 10.17487 / RFC6928、2013年4月、<https：//www.rfc- editor.org/info/rfc6928>. 

[RFC7050] Savolainen、T.、Korhonen、J. 、およびD. Wing、「IPv6アドレス合成に使用されるIPv6プレフィックスの発見」、RFC 7050、DOI 10.17487 / RFC7050、2013年11月、<https：//www.rfc -editor.org/info/rfc7050>. 

[RFC7721] Cooper、A.、Gont、F. 、およびD. Thaler、「IPv6アドレス生成メカニズムのセキュリティとプライバシーに関する考慮事項」、RFC 7721、DOI 10.17487 / RFC7721、2016年3月、<https：//www.rfc- editor.org/info/rfc7721>. 

[RFC7825] Goldberg、J.、Westerlund、M. 、およびT. Zeng、「リアルタイムストリーミングプロトコル（RTSP）によって制御されるメディアのネットワークアドレス変換（NAT）トラバーサルメカニズム」、RFC 7825、DOI 10.17487 / RFC7825 、2016年12月、<https://www.rfc-editor.org/info/rfc7825>. 

[RFC8421] Martinsen、P.、Reddy、T. 、およびP. Patil、「Interactive Connectivity Establishment（ICE）Multihomed and IPv4 / IPv6 Dual-Stack Guidelines」、RFC 8421、DOI 10.17487 / RFC8421、2018年7月、<https： //www.rfc-editor.org/info/rfc8421>. 

[WebRTC-IP-HANDLING] Uberti、J. and G. Shieh、 "WebRTC IP Address Handling Requirements"、Work in Progress、draft-ietf-rtcweb-ip-handling-09、2018年6月. 

付録A.Liteおよび完全な実装
ICEでは、2種類の実装が可能です. 完全な実装は、セッション内の制御および制御された役割をサポートし、アドレス収集を実行することもできます. 対照的に、ライト実装は、STUNチェックにほとんど応答しない最小限の実装であり、セッション内の制御された役割のみをサポートします. 

ICEは、どちらかのエンドポイントにメリットをもたらすために、両方のエンドポイントがそれをサポートする必要があるため、ネットワークでのICEの増分展開はより複雑です. 多くのセッションには、それ自体がNATの背後になく、NATトラバーサルを心配するエンドポイントが含まれていません. 非常に一般的なケースは、NATトラバーサルを必要とする1つのエンドポイント（VoIPハードフォンやソフトフォンなど）がこれらのデバイスの1つに電話をかけることです. 電話機が完全なICE実装をサポートしている場合でも、他のデバイスがそれをサポートしていない場合、ICEはまったく使用されません. ライトの実装により、これらのデバイスの低コストのエントリポイントが可能になります. それらがライト実装をサポートすると、完全な実装はそれらに接続し、ICEの完全な利点を得ることができます. 

したがって、ライトの実装は、*常に*パブリックインターネットに接続され、任意のコレスポンデントからパケットを受信できるパブリックIPアドレスを持つデバイスにのみ適しています. ライト実装がNATの背後に配置されている場合、ICEは機能しません. 

ICEを使用すると、ライト実装で単一のIPv4ホスト候補と複数のIPv6アドレスを使用できます. その場合、候補ペアは、RFC 6724のような静的アルゴリズムを使用して、制御エージェントによって選択されます. これは、この仕様で推奨されています. ただし、アドレス選択の静的メカニズムは、実際のトポロジを反映したり、接続性を実際に保証したりすることができないため、常にエラーが発生しやすくなります. それらは常にヒューリスティックです. したがって、ICEエージェントがIPv4アドレスとIPv6アドレスのどちらかを選択するためだけにICEを実装していて、そのIPアドレスがNATの背後にない場合でも、可能な限り最も堅牢な形式のアドレス選択を提供するために、完全なICEの使用をお勧めします. 

完全な実装への足がかりを提供するために、この仕様にliteの実装が追加されたことに注意することが重要です. 常に単一のIPv4アドレスでパブリックインターネットに接続されているデバイスの場合でも、実現可能であれば完全な実装が望ましいです. 完全な実装では、NATトラバーサルとは関係のないICEのセキュリティ上の利点も得られます. 最後に、今日パブリックアドレスを持っていることに気付いたデバイスは、明日ネットワークに配置され、NATの背後に配置されることがよくあります. デバイスまたは製品が常にパブリックインターネットで使用されるかどうかを、デバイスまたは製品の存続期間にわたって明確に知ることは困難です. 完全な実装により、通信が常に機能することが保証されます. 

付録B.設計の動機
ICEには、それ自体は単純かもしれませんが、複雑または非自明な思考やユースケースから派生した多くの規範的な動作が含まれており、さらに議論する価値があります. これらの設計の動機は、実装の目的で理解する必要がないため、ここで説明します. この付録は非規範的です. 

B.1. STUNトランザクションのペーシング
候補を収集し、接続を確認するために使用されるSTUNトランザクションは、Taミリ秒ごとに1つの新しいトランザクションのおよその速度でペースアウトされます. 次に、各トランザクションには、Taの関数でもある再送信タイマーRTOがあります. なぜこれらのトランザクションのペースが調整され、なぜこれらの式が使用されるのですか？

これらのSTUNリクエストの送信は、多くの場合、クライアントとSTUNサーバー間のNATデバイスにバインディングを作成する効果があります. 多くのNATデバイスには、新しいバインディングを作成する速度に上限があることが経験からわかっています. この仕様の作業中のIETFICE WGでの議論は、5ミリ秒に1回が十分にサポートされていると結論付けました. これが、Taの下限が5ミリ秒である理由です. さらに、ネットワーク上でのこれらのパケットの送信は帯域幅を利用するため、ICEエージェントによってレート制限される必要があります. [RFC5245]の以前のドラフトバージョンに基づく展開は、ネットワークに悪影響を与えるだけでなく、レートに制約のあるアクセスリンクを過負荷にし、全体的なパフォーマンスを低下させる傾向がありました. 結果として、ペーシングにより、NATデバイスが過負荷にならないようにし、トラフィックが適切なレートで維持されます. 

「合理的な」レートの定義は、データが流れ始めたら、STUNはRTP自体が使用するよりも多くの帯域幅を使用してはならないということです. Taの式は、STUNパケットがTa秒ごとに送信された場合、すべてのデータストリームで合計されたRTPパケットと同じ量の帯域幅を消費するように設計されています. もちろん、STUNには再送信があり、それらのペースも調整したいと考えています. このため、RTOは、最後のトランザクションで最初のSTUN要求が発生するのと同じように、最初のトランザクションで最初の再送信が発生するように設定されています. 絵画的に：

最初のパケットは再送信します

                    | |
                    | |
             ------- + ------ ------- + ------
            / \ / \
           / \ / \
        
           +-+ +-+ +-+ +-+ +-+ +-+
           | A1 | | B1 | | C1 | | A2 | | B2 | | C2 |
           +-+ +-+ +-+ +-+ +-+ +-+
        
        --- + ------- + ------- + ------- + ------- + ------- + ------ ------時間
           0 Ta 2Ta 3Ta 4Ta 5Ta
        
この図では、送信されるトランザクションが3つあります（たとえば、候補を収集する場合、3つのホスト候補/ STUNサーバーのペアがあります）. これらはトランザクションA、B、およびCです. 再送信タイマーは、最初のトランザクション（パケットA2）の最初の再送信が時刻3Taに送信されるように設定されます. 

STUNは再送信で指数バックオフを使用するため、最初の再送信後の後続の再送信は、Taミリ秒間隔よりもさらに少ない頻度で発生します. 

5ミリ秒のグローバル最小ペーシング間隔のこのメカニズムは、一般にトランスポートプロトコルには適用できませんが、次の理由に基づいてICEに適用できます. 

oトランスポートプロトコルに一般的に適用される次のルールから始めます. 

1. MaxBytesを、[RFC6928]のセクション2で定義されているように、起動時にネットワークで未処理であることが許可されている最大バイト数とします. これは14600である必要があります. 

2. HTOをトランザクションタイムアウトとします. RTTがわかっている場合は2 * RTT、それ以外の場合は500ミリ秒にする必要があります. これは、[RFC5389]からのSTUNメッセージのRTOと[RFC6298]の1秒であるTCP初期RTOに基づいています. 

3. MinPacingをトランザクション間の最小ペーシング間隔である5ミリ秒とします（上記を参照）. 

oエージェントは通常ICEトランザクション（特に接続チェック）のRTTを知らないことに注意してください. つまり、HTOはほとんどの場合500ミリ秒になります. 

o5ミリ秒のMinPacingと500ミリ秒のHTOが最大100パケット/ HTOを与えることに注意してください. これは、120バイト未満の一般的なICEチェックでは、ネットワーク内の最大12000の未処理バイトを意味し、表現された最大値よりも少なくなります. ルール1による. 

oしたがって、ICEの場合、ルールセットはMinPacingルールのみになります. これは、グローバルTa値を持つことと同じです. 

B.2. 複数の拠点を持つ候補者
セクション5.1.3では、同じトランスポートアドレスとベースを持つ候補を削除する方法について説明します. ただし、トランスポートアドレスは同じで、ベースが異なる候補は冗長ではありません. ICEエージェントが、IPアドレスとポートは同じでベースが異なる2つの候補を持つことができるのはいつですか. 図11のトポロジーを考えてみましょう. 

          + ---------- +
          | STUN Srvr |
          + ---------- +
               |
               |
             -----
           // \\
          | |
         | B：net10 |
          | |
           \\ //
             -----
               |
               |
          + ---------- +
          | NAT |
          + ---------- +
               |
               |
             -----
           // \\
          | A |
         | 192.168 / 16 |
          | |
           \\ //
             -----
               |
               |
               | 192.168.1.100 -----
          + ---------- + // \\ + ---------- +
          | | | | | |
          | イニシエーター| --------- | C：net10 | ----------- | レスポンダー|
          | | 10.0.1.100 | | 10.0.1.101 | |
          + ---------- + \\ // + ---------- +
                                   -----
        
図11：異なるベースを持つ同一の候補

この場合、開始エージェントはマルチホームです. ネット10のプライベートネットワークであるネットワークCに1つのIPアドレス10.0.1.100があります. 応答エージェントはこの同じネットワーク上にあります. 開始エージェントは、ネットワークA（192.168 / 16）にも接続されており、IPアドレスは192.168.1.100です. このネットワークにはNATがあり、別のネット10プライベートネットワークであるネットワークBに接続していますが、ネットワークCには接続されていません. ネットワークBにはSTUNサーバーがあります. 

開始エージェントは、ネットワークC（10.0.1.100:2498）のIPアドレスでホスト候補を取得し、ネットワークA（192.168.1.100:3344）のIPアドレスでホスト候補を取得します. 192.168.1.100:3344から構成済みのSTUNサーバーに対してSTUNクエリを実行します. このクエリはNATを通過し、NATはたまたまバインディング10.0.1.100:2498を割り当てます. STUNサーバーはこれをSTUNバインディング応答に反映します. これで、開始エージェントは、ホスト候補（10.0.1.100:2498）と同一のトランスポートアドレスを持つサーバー再帰候補を取得しました. ただし、サーバー再帰候補のベースは192.168.1.100:3344であり、ホスト候補のベースは10.0.1.100:2498です. 

B.3. 関連アドレスおよび関連ポート属性の目的
候補属性には、ICE自体ではまったく使用されない2つの値（関連するアドレスと関連するポート）が含まれています. なぜ彼らは存在するのですか？

それを含める動機は2つあります. 1つ目は診断です. さまざまなタイプの候補者間の関係を知ることは非常に役立ちます. これを含めることにより、ICEエージェントは、どの中継候補がどの反射候補に関連付けられているかを知ることができ、反射候補は特定のホスト候補に関連付けられます. 1つの候補のチェックが成功したが、他の候補は成功しなかった場合、これはネットワークで何が起こっているかについての有用な診断を提供します. 

2番目の理由は、オフパスのサービス品質（QoS）メカニズムに関係しています. ICEがPacketCable2.0などの環境で使用される場合、プロキシは通常のSIP操作を実行することに加えて、SIPメッセージ内のSDPを検査し、データトラフィックのIPアドレスとポートを抽出します. 次に、ポリシーサーバーを介して、ネットワーク内のアクセスルーターと対話し、データフローの保証されたQoSを確立できます. このQoSは、RTPトラフィックを5タプルに基づいて分類し、保証レートを提供するか、DSCPを適切にマークすることによって提供されます. 住宅用NATが存在し、中継された候補がデータ用に選択されると、この中継された候補は実際のTURNサーバー上のトランスポートアドレスになります. そのアドレスは、QoS処理のためにパケットを分類するために使用されるアクセスルーターの実際のトランスポートアドレスについては何も述べていません. むしろ、TURNサーバーに対するサーバー反射の候補が必要です. SDPで変換を実行することにより、プロキシはそのトランスポートアドレスを使用して、アクセスルータにQoSを要求できます. 

B.4. STUNユーザー名の重要性
ICEでは、短期の資格情報機能を使用して、STUNでメッセージの整合性を使用する必要があります. 実際の短期資格情報は、候補者交換でユーザー名フラグメントを交換することによって形成されます. このメカニズムの必要性は、単なるセキュリティを超えています. そもそもICEが正しく動作するために必要です. 

ICEエージェントL、R、およびZについて考えてみます. LおよびRは、10.0.0.0 / 8を使用している民間企業1内にあります. Zは、同じく10.0.0.0/8を使用している民間企業2内にあります. 結局のところ、RとZはどちらもIPアドレス10.0.1.1を持っています. Lは候補をZに送信します. Zはホスト候補でLに応答します. この場合、それらの候補は10.0.1.1:8866および10.0.1.1:8877です. 結局のところ、Rは同時にセッションに参加しており、ホスト候補として10.0.1.1:8866と10.0.1.1:8877も使用しています. これは、Rが、Zと同様に、これらのポートでSTUNメッセージを受け入れる準備ができていることを意味します. LはSTUNリクエストを10.0.1.1:8866に送信し、別のリクエストを10.0.1.1:8877に送信します. ただし、これらは期待どおりにZに移動しません. 代わりに、彼らはRに行きます！Rが返信しただけの場合、LはZに接続できると信じますが、実際にはまったく別のユーザーRに接続できます. これを修正するには、STUNの短期資格情報メカニズムが使用されます. ユーザー名のフラグメントは十分にランダムです. したがって、RがZと同じ値を使用する可能性はほとんどありません. その結果、資格情報が無効であるため、RはSTUN要求を拒否します. 本質的に、STUNユーザー名フラグメントは、候補交換の一部として確立された特定のセッションにバインドされた一時的なホスト識別子の形式を提供します. 

IPアドレスが一意でないことによる不幸な結果は、上記の例では、RがICEエージェントでさえない可能性があることです. それは任意のホストである可能性があり、STUNパケットが送信されるポートはそのホスト上の任意のエフェメラルポートである可能性があります. このソケットでパケットをリッスンしているアプリケーションがあり、使用されているプロトコルに関係なく不正な形式のパケットを処理する準備ができていない場合、そのアプリケーションの動作に影響を与える可能性があります. 幸い、交換されるポートは一時的なものであり、通常は動的範囲または登録済み範囲から取得されるため、ポートがホストRでサーバーを実行するために使用されるのではなく、プロトコルのエージェント側である可能性が高くなります. これにより、この範囲でのポート使用の一時的な性質により、割り当てられたポートにヒットする可能性が低くなります. ただし、問題が発生する可能性はありますが、そして、ネットワーク展開者はそれに備える必要があります. これはICEに固有の問題ではないことに注意してください. 漂遊パケットは、あらゆるタイプのプロトコル、特にパブリックインターネット上のプロトコルで、いつでもポートに到着する可能性があります. そのため、この要件は、インターネットアプリケーションの一般的な設計ガイドラインを言い換えているだけです. どのポートでも不明なパケットに備えてください. 

B.5. 候補ペア優先式
候補ペアの優先順位は奇妙な形をしています. それは：

      ペアの優先度= 2 ^ 32 * MIN（G、D）+ 2 * MAX（G、D）+（G> D？1：0）
        
どうしてこれなの？候補ペアがこの値に基づいてソートされる場合、結果のソートにはMAX / MINプロパティがあります. これは、ペアが最初に2つの優先順位の最小値の減少値に基づいてソートされることを意味します. 最小優先度の値が同じであるペアの場合、最大優先度を使用してそれらの間で並べ替えます. 最大優先度と最小優先度が同じである場合、式の最後の部分で、制御エージェントの優先度がタイブレーカーとして使用されます. 単一の候補の優先度は常に2 * 32未満であるため、係数2 * 32が使用されます. その結果、ペアの優先度は2つのコンポーネントの優先度の「連結」になります. これにより、MAX / MINソートが作成されます. MAX / MINは、特定のICEエージェントについて、すべての優先度の高い候補が試行されるまで、優先度の低い候補が使用されないことを保証します. 

B.6. キープアライブが必要なのはなぜですか？
候補ペアでデータが流れ始めた後も、セッションの間、中間NATでバインディングを存続させる必要があります. 通常、データストリームパケット自体（RTPなど）はこの目的を満たします. ただし、いくつかのケースはさらに議論する価値があります. まず、SIPなどの一部のRTPの使用法では、データストリームを「保留」にすることができます. これは、RFC 3264 [RFC3264]で定義されているように、SDPの「sendonly」または「inactive」属性を使用して実現されます. RFC 3264は、これらの場合にデータの送信を停止するように実装に指示します. ただし、そうすると、NATバインディングがタイムアウトし、データが保留から外れることがなくなります. 

次に、テキスト会話のペイロード形式[RFC4103]などの一部のRTPペイロード形式では、パケットの送信頻度が非常に低いため、間隔がNATバインディングタイムアウトを超える場合があります. 

第3に、無音抑制が使用されている場合、無音が長期間続くと、NATバインディングがタイムアウトするのに十分な時間、データ送信が停止する可能性があります. 

これらの理由により、データパケット自体は信頼できません. ICEは、STUNバインディング表示を利用して単純な定期的なキープアライブを定義します. これにより、帯域幅要件が非常に予測可能になり、QoS予約に対応できるようになります. 

B.7. なぜピアリフレクティブ候補を好むのですか？
セクション5.1.2では、候補者のタイプと地域の好みに基づいて候補者の優先順位を計算する手順について説明します. このセクションでは、ピア再帰候補のタイプ設定が常にサーバー再帰よりも高い必要があります. 何故ですか？その理由は、セクション19のセキュリティの考慮事項に関係しています. 攻撃者がICEエージェントに、偽のピア再帰候補ではなく、偽のサーバー再帰候補を使用させる方がはるかに簡単です. その結果、バインディング要求を使用したアドレス収集に対する攻撃は、ピアリフレクティブ候補を優先することによってICEによって阻止されます. 

B.8. キープアライブにバインディング表示が使用されるのはなぜですか？
データキープアライブについては、セクション11で説明します. これらのキープアライブは、両方のエンドポイントがICE対応の場合にSTUNを利用します. ただし、（応答を生成する）バインディング要求トランザクションを使用するのではなく、キープアライブは表示を使用します. 何故ですか？

主な理由は、ネットワークのQoSメカニズムに関係しています. データが流れ始めると、ネットワーク要素はデータストリームがかなり規則的な構造であると想定し、一定の間隔で定期的なパケットを利用し、ジッターの可能性があります. ICEエージェントがデータパケットを送信していて、バインディングリクエストを受信した場合、ICEエージェントはそのデータパケットとともに応答パケットを生成する必要があります. これにより、データパケットを伝送する5タプルの実際の帯域幅要件が増加し、それらのパケットの配信にジッターが発生します. 分析によると、これは、データにかなりタイトなパケットスケジューラを使用する特定のレイヤ2アクセスネットワークでの懸念事項です. 

さらに、Binding Indicationを使用すると、整合性を無効にできるため、パフォーマンスが向上する可能性があります. これは、公衆交換電話網（PSTN）ゲートウェイやセッションボーダーコントローラー（SBC）などの大規模なエンドポイントに役立ちます. 

B.9. 候補タイプ設定の選択
タイプとローカルプリファレンス値を選択するための1つの基準は、TURNサーバー、VPNサーバーなどのトンネルサービス、またはNATなどのデータ仲介装置の使用です. データ仲介者の場合、データがその候補者に送信されると、受信される前に最初にデータ仲介者を通過します. データ仲介を含む候補の1つのタイプは、中継された候補です. もう1つのタイプは、VPNインターフェイスから取得されるホスト候補です. データがデータ仲介を介して転送される場合、送信と受信の間の遅延にプラスまたはマイナスの影響を与える可能性があります. 追加のルーターホップが発生する可能性があるため、パケット損失が増加する場合と増加しない場合があります. データはプロバイダーによって実行されるデータ仲介者にルーティングされ、データ仲介者から直接戻されるため、サービスの提供コストが増加する可能性があります. 

プリファレンスを選択するためのもう1つの基準は、IPアドレスファミリです. ICEはIPv4とIPv6の両方で動作します. デュアルスタックホストがIPv6よりも接続を優先するが、v6ネットワークが切断された場合にIPv4にフォールバックできるようにする移行メカニズムを提供します. 実装は、[RFC8421]のガイドラインに従って、壊れたパスが存在する場合の接続チェックフェーズでの過度の遅延を回避する必要があります. 

好みを選択するためのもう1つの基準は、トポロジー認識です. これは、仲介業者を利用する候補者にとって有益です. そのような場合、ICEエージェントは、仲介者がそれ自体にトポロジ的に近接しているという知識を事前に構成または動的に検出した場合、それを使用して、より近い仲介者から取得した候補に、より高いローカルプリファレンスを割り当てることができます. 

設定を選択するためのもう1つの基準は、セキュリティまたはプライバシーです. ユーザーがテレコミューターであり、したがって企業ネットワークとローカルホームネットワークに接続している場合、ユーザーは、企業内で通信するときに企業ネットワーク上に維持するために、音声トラフィックをVPNまたは同様のトンネル経由でルーティングすることを好む場合があります. ただし、企業外のユーザーと通信する場合は、ローカルネットワークを使用できます. このような場合、VPNアドレスのローカルプリファレンスは他のどのアドレスよりも高くなります. 

付録C.接続性-帯域幅を確認する
次の表は、IPv4およびIPv6の場合、さまざまなTa値（ミリ秒単位）とさまざまなufragサイズ（バイト単位）を使用して、接続チェックを実行するために必要な帯域幅を示しています. 

結果は、2016年4月11日にJusin Uberti（Google）によって提供されました. 

                     IPバージョン：IPv4
                     パケット長（バイト）：108 + ufrag
                          |
                       ms | 4 8 12 16
                     ----- | ------------------------
                      500 | 1.86k 1.98k 2.11k 2.24k
                      200 | 4.64k 4.96k 5.28k 5.6k
                      100 | 9.28k 9.92k 10.6k 11.2k
                       50 | 18.6k 19.8k 21.1k 22.4k
                       20 | 46.4k 49.6k 52.8k 56.0k
                       10 | 92.8k 99.2k 105k 112k
                        5 | 185k 198k 211k 224k
                        2 | 464k 496k 528k 560k
                        1 | 928k 992k 1.06M 1.12M
        
                     IPバージョン：IPv6
                     パケット長（バイト）：128 + ufrag
                          |
                       ms | 4 8 12 16
                     ----- | ------------------------
                      500 | 2.18k 2.3k 2.43k 2.56k
                      200 | 5.44k 5.76k 6.08k 6.4k
                      100 | 10.9k 11.5k 12.2k 12.8k
                       50 | 21.8k 23.0k 24.3k 25.6k
                       20 | 54.4k 57.6k 60.8k 64.0k
                       10 | 108k 115k 121k 128k
                        5 | 217k 230k 243k 256k
                        2 | 544k 576k 608k 640k
                        1 | 1.09M 1.15M 1.22M 1.28M
        
図12：接続性-帯域幅の確認

謝辞

このドキュメントのテキストのほとんどは、元のICE仕様であるRFC 5245からのものです. 著者は、そのドキュメントに貢献してくれたすべての人に感謝します. 仕様のこの改訂への追加の貢献については、Emil Ivov、Paul Kyzivat、Pal-Erik Martinsen、Simon Perrault、Eric Rescorla、Thomas Stach、Peter Thatcher、Martin Thomson、Justin Uberti、Suhas Nandakumar、Taylor Brandstetter、 Peter Saint-Andre、Harald Alvestrand、RomanShpount. ベンキャンベルはADレビューを行いました. StephenFarrellがsec-dirレビューを行いました. スチュワートブライアントは、gen-artレビューを行いました. 秦私たちはops-dirレビューを行いました. MagnusWesterlundがtsv-artレビューを行いました. 

著者の住所

Ari Keranen Ericsson Hirsalantie 11 02420Jorvasフィンランド

   Eメール：ari.keranen@ericsson.com
        
Christer Holmberg Ericsson Hirsalantie 11 02420Jorvasフィンランド

   Eメール：christer.holmberg@ericsson.com
        
ジョナサンローゼンバーグjdrosen.netモンマス、ニュージャージー州アメリカ合衆国

   Eメール：jdrosen@jdrosen.net
   URI：http：//www.jdrosen.net
        