Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   5
   2.  Overview of ICE . . . . . . . . . . . . . . . . . . . . . . .   6
     2.1.  Gathering Candidates  . . . . . . . . . . . . . . . . . .   8
     2.2.  Connectivity Checks . . . . . . . . . . . . . . . . . . .  10
     2.3.  Nominating Candidate Pairs and Concluding ICE . . . . . .  12
     2.4.  ICE Restart . . . . . . . . . . . . . . . . . . . . . . .  13
     2.5.  Lite Implementations  . . . . . . . . . . . . . . . . . .  13
   3.  ICE Usage . . . . . . . . . . . . . . . . . . . . . . . . . .  13
   4.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .  13
   5.  ICE Candidate Gathering and Exchange  . . . . . . . . . . . .  17
     5.1.  Full Implementation . . . . . . . . . . . . . . . . . . .  17
       5.1.1.  Gathering Candidates  . . . . . . . . . . . . . . . .  18
         5.1.1.1.  Host Candidates . . . . . . . . . . . . . . . . .  18
         5.1.1.2.  Server-Reflexive and Relayed Candidates . . . . .  20
         5.1.1.3.  Computing Foundations . . . . . . . . . . . . . .  21
         5.1.1.4.  Keeping Candidates Alive  . . . . . . . . . . . .  21
       5.1.2.  Prioritizing Candidates . . . . . . . . . . . . . . .  22
         5.1.2.1.  Recommended Formula . . . . . . . . . . . . . . .  22
         5.1.2.2.  Guidelines for Choosing Type and Local
                   Preferences . . . . . . . . . . . . . . . . . . .  23
       5.1.3.  Eliminating Redundant Candidates  . . . . . . . . . .  23
     5.2.  Lite Implementation Procedures  . . . . . . . . . . . . .  23
     5.3.  Exchanging Candidate Information  . . . . . . . . . . . .  24
     5.4.  ICE Mismatch  . . . . . . . . . . . . . . . . . . . . . .  26
   6.  ICE Candidate Processing  . . . . . . . . . . . . . . . . . .  26
     6.1.  Procedures for Full Implementation  . . . . . . . . . . .  26
       6.1.1.  Determining Role  . . . . . . . . . . . . . . . . . .  26
       6.1.2.  Forming the Checklists  . . . . . . . . . . . . . . .  28
         6.1.2.1.  Checklist State . . . . . . . . . . . . . . . . .  28
         6.1.2.2.  Forming Candidate Pairs . . . . . . . . . . . . .  28
         6.1.2.3.  Computing Pair Priority and Ordering Pairs  . . .  31
         6.1.2.4.  Pruning the Pairs . . . . . . . . . . . . . . . .  31
         6.1.2.5.  Removing Lower-Priority Pairs . . . . . . . . . .  31
         6.1.2.6.  Computing Candidate Pair States . . . . . . . . .  32
       6.1.3.  ICE State . . . . . . . . . . . . . . . . . . . . . .  36
       6.1.4.  Scheduling Checks . . . . . . . . . . . . . . . . . .  36
         6.1.4.1.  Triggered-Check Queue . . . . . . . . . . . . . .  36
         6.1.4.2.  Performing Connectivity Checks  . . . . . . . . .  36
     6.2.  Lite Implementation Procedures  . . . . . . . . . . . . .  38
   7.  Performing Connectivity Checks  . . . . . . . . . . . . . . .  38
     7.1.  STUN Extensions . . . . . . . . . . . . . . . . . . . . .  38
       7.1.1.  PRIORITY  . . . . . . . . . . . . . . . . . . . . . .  38
       7.1.2.  USE-CANDIDATE . . . . . . . . . . . . . . . . . . . .  38
       7.1.3.  ICE-CONTROLLED and ICE-CONTROLLING  . . . . . . . . .  39
     7.2.  STUN Client Procedures  . . . . . . . . . . . . . . . . .  39
       7.2.1.  Creating Permissions for Relayed Candidates . . . . .  39
       7.2.2.  Forming Credentials . . . . . . . . . . . . . . . . .  39
       7.2.3.  Diffserv Treatment  . . . . . . . . . . . . . . . . .  40
       7.2.4.  Sending the Request . . . . . . . . . . . . . . . . .  40
       7.2.5.  Processing the Response . . . . . . . . . . . . . . .  40
         7.2.5.1.  Role Conflict . . . . . . . . . . . . . . . . . .  40
         7.2.5.2.  Failure . . . . . . . . . . . . . . . . . . . . .  41
           7.2.5.2.1.  Non-Symmetric Transport Addresses . . . . . .  41
           7.2.5.2.2.  ICMP Error  . . . . . . . . . . . . . . . . .  41
           7.2.5.2.3.  Timeout . . . . . . . . . . . . . . . . . . .  41
           7.2.5.2.4.  Unrecoverable STUN Response . . . . . . . . .  41
         7.2.5.3.  Success . . . . . . . . . . . . . . . . . . . . .  42
           7.2.5.3.1.  Discovering Peer-Reflexive Candidates . . . .  42
           7.2.5.3.2.  Constructing a Valid Pair . . . . . . . . . .  43
           7.2.5.3.3.  Updating Candidate Pair States  . . . . . . .  44
           7.2.5.3.4.  Updating the Nominated Flag . . . . . . . . .  44
         7.2.5.4.  Checklist State Updates . . . . . . . . . . . . .  44
     7.3.  STUN Server Procedures  . . . . . . . . . . . . . . . . .  45
       7.3.1.  Additional Procedures for Full Implementations  . . .  45
         7.3.1.1.  Detecting and Repairing Role Conflicts  . . . . .  46
         7.3.1.2.  Computing Mapped Addresses  . . . . . . . . . . .  47
         7.3.1.3.  Learning Peer-Reflexive Candidates  . . . . . . .  47
         7.3.1.4.  Triggered Checks  . . . . . . . . . . . . . . . .  47
         7.3.1.5.  Updating the Nominated Flag . . . . . . . . . . .  49
       7.3.2.  Additional Procedures for Lite Implementations  . . .  49
   8.  Concluding ICE Processing . . . . . . . . . . . . . . . . . .  50
     8.1.  Procedures for Full Implementations . . . . . . . . . . .  50
       8.1.1.  Nominating Pairs  . . . . . . . . . . . . . . . . . .  50
       8.1.2.  Updating Checklist and ICE States . . . . . . . . . .  51
     8.2.  Procedures for Lite Implementations . . . . . . . . . . .  52
     8.3.  Freeing Candidates  . . . . . . . . . . . . . . . . . . .  53
       8.3.1.  Full Implementation Procedures  . . . . . . . . . . .  53
       8.3.2.  Lite Implementation Procedures  . . . . . . . . . . .  53
   9.  ICE Restarts  . . . . . . . . . . . . . . . . . . . . . . . .  53
   10. ICE Option  . . . . . . . . . . . . . . . . . . . . . . . . .  54
   11. Keepalives  . . . . . . . . . . . . . . . . . . . . . . . . .  54
   12. Data Handling . . . . . . . . . . . . . . . . . . . . . . . .  55
     12.1.  Sending Data . . . . . . . . . . . . . . . . . . . . . .  55
       12.1.1.  Procedures for Lite Implementations  . . . . . . . .  56
     12.2.  Receiving Data . . . . . . . . . . . . . . . . . . . . .  56
   13. Extensibility Considerations  . . . . . . . . . . . . . . . .  57
   14. Setting Ta and RTO  . . . . . . . . . . . . . . . . . . . . .  57
     14.1.  General  . . . . . . . . . . . . . . . . . . . . . . . .  57
     14.2.  Ta . . . . . . . . . . . . . . . . . . . . . . . . . . .  58
     14.3.  RTO  . . . . . . . . . . . . . . . . . . . . . . . . . .  58
   15. Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .  59
     15.1.  Example with IPv4 Addresses  . . . . . . . . . . . . . .  60
     15.2.  Example with IPv6 Addresses  . . . . . . . . . . . . . .  65
   16. STUN Extensions . . . . . . . . . . . . . . . . . . . . . . .  69
     16.1.  Attributes . . . . . . . . . . . . . . . . . . . . . . .  69
     16.2.  New Error-Response Codes . . . . . . . . . . . . . . . .  70
   17. Operational Considerations  . . . . . . . . . . . . . . . . .  70
     17.1.  NAT and Firewall Types . . . . . . . . . . . . . . . . .  70
     17.2.  Bandwidth Requirements . . . . . . . . . . . . . . . . .  70
       17.2.1.  STUN and TURN Server-Capacity Planning . . . . . . .  71
       17.2.2.  Gathering and Connectivity Checks  . . . . . . . . .  71
       17.2.3.  Keepalives . . . . . . . . . . . . . . . . . . . . .  72
     17.3.  ICE and ICE-Lite . . . . . . . . . . . . . . . . . . . .  72
     17.4.  Troubleshooting and Performance Management . . . . . . .  72
     17.5.  Endpoint Configuration . . . . . . . . . . . . . . . . .  73
   18. IAB Considerations  . . . . . . . . . . . . . . . . . . . . .  73
     18.1.  Problem Definition . . . . . . . . . . . . . . . . . . .  73
     18.2.  Exit Strategy  . . . . . . . . . . . . . . . . . . . . .  74
     18.3.  Brittleness Introduced by ICE  . . . . . . . . . . . . .  74
     18.4.  Requirements for a Long-Term Solution  . . . . . . . . .  75
     18.5.  Issues with Existing NAPT Boxes  . . . . . . . . . . . .  75
   19. Security Considerations . . . . . . . . . . . . . . . . . . .  76
     19.1.  IP Address Privacy . . . . . . . . . . . . . . . . . . .  76
     19.2.  Attacks on Connectivity Checks . . . . . . . . . . . . .  77
     19.3.  Attacks on Server-Reflexive Address Gathering  . . . . .  80
     19.4.  Attacks on Relayed Candidate Gathering . . . . . . . . .  80
     19.5.  Insider Attacks  . . . . . . . . . . . . . . . . . . . .  81
       19.5.1.  STUN Amplification Attack  . . . . . . . . . . . . .  81
   20. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  82
     20.1.  STUN Attributes  . . . . . . . . . . . . . . . . . . . .  82
     20.2.  STUN Error Responses . . . . . . . . . . . . . . . . . .  82
     20.3.  ICE Options  . . . . . . . . . . . . . . . . . . . . . .  82
   21. Changes from RFC 5245 . . . . . . . . . . . . . . . . . . . .  83
   22. References  . . . . . . . . . . . . . . . . . . . . . . . . .  84
     22.1.  Normative References . . . . . . . . . . . . . . . . . .  84
     22.2.  Informative References . . . . . . . . . . . . . . . . .  85
   Appendix A.  Lite and Full Implementations  . . . . . . . . . . .  89
   Appendix B.  Design Motivations . . . . . . . . . . . . . . . . .  90
     B.1.  Pacing of STUN Transactions . . . . . . . . . . . . . . .  90
     B.2.  Candidates with Multiple Bases  . . . . . . . . . . . . .  92
     B.3.  Purpose of the Related-Address and Related-Port
           Attributes  . . . . . . . . . . . . . . . . . . . . . . .  94
     B.4.  Importance of the STUN Username . . . . . . . . . . . . .  95
     B.5.  The Candidate Pair Priority Formula . . . . . . . . . . .  96
     B.6.  Why Are Keepalives Needed?  . . . . . . . . . . . . . . .  96
     B.7.  Why Prefer Peer-Reflexive Candidates? . . . . . . . . . .  97
     B.8.  Why Are Binding Indications Used for Keepalives?  . . . .  97
     B.9.  Selecting Candidate Type Preference . . . . . . . . . . .  97
   Appendix C.  Connectivity-Check Bandwidth . . . . . . . . . . . .  99
   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . . 100
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . . 100


1.はじめに 

ピア間で通信セッションを確立するプロトコルには、通常、データソースとシンクのIPアドレスとポートの交換が含まれます.ただし、これは、ネットワークアドレス変換器（NAT）[RFC3235]を介して操作する場合に課題をもたらします.これらのプロトコルは、参加者間で直接データフローを作成しようとするため、参加者間のアプリケーション層の仲介はありません.これは、データ遅延を減らし、パケット損失を減らし、アプリケーションを展開する運用コストを削減するために行われます.ただし、NATを使用してこれを達成することは困難です.この理由の完全な取り扱いは、この仕様の範囲外です.

これらのプロトコルがNATを介して動作できるようにするための多数のソリューションが定義されています.これらには、アプリケーション層ゲートウェイ（ALG）、ミドルボックス制御プロトコル[RFC3303]、元のUDPスルーNAT（STUN）仕様[RFC3489]（RFC 3489はRFC 5389に廃止されていることに注意）、およびレルム固有IP [ [RFC3102] [RFC3103]およびそれらを機能させるために必要なセッション記述拡張（たとえば、リアルタイム制御プロトコル（RTCP）[RFC3605]のセッション記述プロトコル（SDP）属性[RFC4566]）.残念ながら、これらの技術にはすべて長所と短所があり、ネットワークトポロジによっては最適化されますが、他のネットワークトポロジでは適切な選択ができません.その結果、管理者と実装者は、ソリューションが展開されるネットワークのトポロジについて推測を行っています.

この仕様では、UDPベースのデータストリームのNATトラバーサルの技術として、Interactive Connectivity Establishment（ICE）を定義しています（ただし、ICE [TCP] [RFC6544]などの他のトランスポートプロトコルを処理するために拡張されています）.ICEは、複数のIPアドレスとポートを交換することで機能し、それらはピアツーピア接続チェックによって接続性がテストされます.IPアドレスとポートは、ICE使用固有のメカニズム（たとえば、オファー/アンサー交換）を使用して交換され、接続チェックはSTUN [RFC5389]を使用して実行されます.ICEは、STUNの拡張であるNAT（TURN）[RFC5766]の周りのリレーを使用したトラバーサルも利用します.ICEは各メディアストリームに対して多数のIPアドレスとポートを交換するため、マルチホームホストおよびデュアルスタックホストのアドレス選択も可能です.このために、

付録Bは、ICEを設計する際に下された設計決定に関する背景情報と動機を提供します. 





2. ICEの概要 

一般的なICE展開では、通信する2つのエンドポイント（ICEエージェント）があります.ICEは、別のメカニズムを介して提供されると想定される、シグナリングプロトコルのNATトラバーサルを目的としていないことに注意してください.ICEは、エージェントが互いに信号接続を確立できると想定しています.

最初は、エージェントは自分のトポロジーを知らない.特に、エージェントはNAT（または複数のNAT層）の背後にある場合とそうでない場合があります.ICEを使用すると、エージェントはトポロジに関する十分な情報を検出して、データセッションを確立できる1つ以上のパスを潜在的に見つけることができます.

図1は、一般的なICE展開を示しています.エージェントにはLとRというラベルが付いています.LとRは、それぞれのNATの背後にありますが、認識していない場合があります.NATのタイプとそのプロパティも不明です.LとRは、LとR間のデータセッションをセットアップすることを目的とする候補交換プロセスに関与できます.通常、この交換は、シグナリングサーバー（たとえば、SIPプロキシ）を介して行われます.

通常、エージェント、シグナリングサーバー、およびNATに加えて、ICEはネットワーク内のSTUNまたはTURNサーバーと連携して使用されます.各エージェントは、独自のSTUNまたはTURNサーバーを持つことも、同じサーバーにすることもできます.

+ --------- + + -------- + |シグナリング| + -------- + | スタン| |サーバー| | スタン| | サーバー| + --------- + | サーバー| + -------- + / \ + -------- + / \ / \ / <-シグナリング-> \ / \ + -------- + + ---- ---- + | NAT | | NAT | + -------- + + -------- + / \ / \ + ------- + + ------- + | エージェント| | エージェント| | L | | R | + ------- + + ------- +

図1：ICE展開シナリオ 

ICEの背後にある基本的な考え方は次のとおりです.各エージェントには、他のエージェントと通信するために使用できるさまざまな候補トランスポートアドレス（この仕様では常にUDPである特定のトランスポートプロトコルのIPアドレスとポートの組み合わせ）があります.これらには以下が含まれます.

o直接接続されたネットワークインターフェイスのトランスポートアドレス 

o NATのパブリック側の変換されたトランスポートアドレス（「サーバー再帰」アドレス） 

o TURNサーバーから割り当てられたトランスポートアドレス（「リレーアドレス」） 

潜在的に、Lの候補トランスポートアドレスのいずれかを使用して、Rの候補トランスポートアドレスのいずれかと通信できます.ただし、実際には、多くの組み合わせは機能しません.たとえば、LとRの両方がNATの背後にある場合、直接接続されたインターフェイスアドレスが直接通信できる可能性は低いです（これが、ICEが必要な理由です！）.ICEの目的は、どのアドレスのペアが機能するかを発見することです.ICEがこれを行う方法は、機能する1つ以上を見つけるまで、考えられるすべてのペアを体系的に（慎重にソートされた順序で）試行することです.

2.1.候補者の収集

ICEを実行するために、ICEエージェントは1つ以上のアドレス候補を識別して収集します.候補にはトランスポートアドレスがあります-特定のトランスポートプロトコルのIPアドレスとポートの組み合わせ（ここではUDPのみが指定されています）.候補にはさまざまな種類があります.物理または論理ネットワークインターフェイスから派生したものもあれば、STUNおよびTURNを介して検出可能なものもあります.

候補の最初のカテゴリは、ローカルインターフェイスから直接取得したトランスポートアドレスを持つものです.このような候補は「ホスト候補」と呼ばれます.ローカルインターフェイスは、イーサネットまたはWi-Fiであるか、仮想プライベートネットワーク（VPN）やモバイルIP（MIP）などのトンネルメカニズムを介して取得されるものです.すべての場合において、このようなネットワークインターフェースは、ポート（および候補）を割り当てることができるローカルインターフェースとしてエージェントに見えます.

次に、エージェントはSTUNまたはTURNを使用して追加の候補を取得します.これらには2つのフレーバーがあります.NATのパブリック側の変換済みアドレス（サーバー再帰候補）とTURNサーバーのアドレス（中継候補）です.TURNサーバーを使用すると、両方のタイプの候補がTURNサーバーから取得されます.STUNサーバーのみが使用されている場合、サーバー反射型の候補のみがそれらから取得されます.これらの候補とホスト候補の関係を図2に示します.この図では、両方のタイプの候補がTURNを使用して検出されます.図では、表記X：xはIPアドレスXとUDPポートxを意味します.

インターネットへ 

| | | / ------------リレーされたY：y | /住所+ -------- + | | | TURN | | サーバー| | | + -------- + | | | / ------------サーバーX1 '：x1' | /再帰+ ------------ +アドレス| NAT | + ------------ + | | / ------------ローカルX：x | /アドレス+ -------- + | | | エージェント| | | + -------- +



図2：候補者の関係 

エージェントがIPアドレスとポートX：xからTURN Allocate要求を送信すると、NAT（1つがあると仮定）はバインディングX1 '：x1'を作成し、このサーバー反射候補をホスト候補X：xにマッピングします.ホスト候補から送信された発信パケットは、NATによってサーバー反射候補に変換されます.サーバー反射候補に送信された着信パケットは、NATによってホスト候補に変換され、エージェントに転送されます.特定のサーバー反射候補に関連付けられているホスト候補は「ベース」です.

注：「ベース」とは、特定の候補者に対してエージェントが送信するアドレスを指します.したがって、退化したケースとして、ホスト候補にもベースがありますが、ホスト候補と同じです.

エージェントとTURNサーバーの間に複数のNATがある場合、TURN要求は各NATでバインディングを作成しますが、最も外側のサーバー反射候補（TURNサーバーに最も近い候補）のみがエージェントによって検出されます.エージェントがNATの背後にない場合、ベース候補はサーバー反射候補と同じになり、サーバー反射候補は冗長であり、除去されます.

次に、割り当て要求がTURNサーバーに到着します.TURNサーバーは、ローカルIPアドレスYからポートyを割り当て、Allocate応答を生成して、このリレーされた候補をエージェントに通知します.TURNサーバーは、Allocate要求のソーストランスポートアドレスをAllocate応答にコピーすることにより、エージェントにサーバー反射候補X1 '：x1'を通知します.TURNサーバーはパケットリレーとして機能し、LとRの間でトラフィックを転送します.Lにトラフィックを送信するために、RはY：yのTURNサーバーにトラフィックを送信し、TURNサーバーはそれをX1 '：x1'に転送します. NATを通過し、そこでX：xにマッピングされ、Lに配信されます.

STUNサーバーのみが使用される場合、エージェントはSTUNバインディング要求[RFC5389]をSTUNサーバーに送信します.STUNサーバーは、Binding要求のソーストランスポートアドレスをBinding応答にコピーすることにより、エージェントにサーバー反射候補X1 '：x1'を通知します.

2.2.接続性チェック

Lは、すべての候補を収集すると、最高から最低の優先順位でそれらを並べ替え、シグナリングチャネルを介してRに送信します.RはLから候補を受け取ると、同じ収集プロセスを実行し、独自の候補リストで応答します.このプロセスの最後に、各ICEエージェントには、候補者とピアの候補者の完全なリストがあります.それらはペアになり、候補ペアになります.どのペアが機能するかを確認するために、各エージェントは一連の接続チェックをスケジュールします.各チェックは、ローカル候補からリモート候補にSTUN要求を送信することにより、クライアントが特定の候補ペアに対して実行するSTUN要求/応答トランザクションです.

接続性チェックの基本原則は簡単です. 

1.候補ペアを優先順に並べ替えます. 

2.各候補者ペアに優先順位で小切手を送信します. 

3.他のエージェントから受信した確認を確認します. 



両方のエージェントが候補ペアのチェックを実行すると、結果は4ウェイハンドシェイクになります. 

LR--STUNリクエスト-> \ Lの<-STUNレスポンス/チェック 

<-STUNリクエスト\ RのSTUNレスポンス-> /チェック 

図3：基本的な接続チェック 

STUN要求は、データ（RTP、RTCP、または他のプロトコルなど）に使用されるのとまったく同じIPアドレスおよびポートとの間で送受信されることに注意することが重要です.その結果、エージェントは、受信したポートではなくパケットのコンテンツを使用して、STUNとデータを逆多重化します.

STUNバインディング要求は接続チェックに使用されるため、STUNバインディング応答には、エージェントとそのピア間のNATのパブリック側にあるエージェントのトランスポートアドレスが含まれます.このトランスポートアドレスが、エージェントがすでに学習した他の候補のアドレスと異なる場合、それは新しい候補（ピア反射候補）を表し、他の候補とまったく同じようにICEによってテストされます.

上記のアルゴリズムはすべての候補ペアを検索するため、作業ペアが存在する場合、アルゴリズムは候補が試行された順序に関係なく最終的にそれを見つけます.より速く（より良い）結果を生成するために、候補は指定された順序でソートされます.ソートされた候補ペアの結果のリストは、「チェックリスト」と呼ばれます.

エージェントは、リスト上の次の候補ペアに対するSTUN要求を定期的に送信することにより、チェックリストを処理します.これらは「通常のチェック」と呼ばれます.STUNトランザクションが成功すると、1つ以上の候補ペアがいわゆる「有効なペア」になり、「有効なリスト」と呼ばれる候補ペアのリストに追加されます.

最適化として、RはLのチェックメッセージを取得するとすぐに、接続候補チェックメッセージが同じ候補ペアのLに送信されるようにスケジュールします.これは「トリガーチェック」と呼ばれ、有効なペアを見つけるプロセスを高速化します.

このハンドシェイクの終わりに、LとRは両方とも、メッセージをエンドツーエンドで双方向に送信（および受信）できることを知っています. 

一般に、優先度アルゴリズムは、同様のタイプの候補が同様の優先度を取得するように設計されているため、より多くの直接ルート（つまり、データリレーまたはNATのないルート）が間接ルート（データリレーまたはNATのあるルート）よりも優先されます.ただし、これらのガイドラインでは、エージェントはアルゴリズムの調整方法についてかなりの裁量権を持っています.

データストリームは、複数のコンポーネント（RTPやRTCPなどの独自の候補セットを必要とするデータストリームの一部）で構成される場合があります. 

2.3.候補ペアの指名とICEの終了

ICEは、一方のICEエージェントを制御エージェントの役割に割り当て、もう一方を制御エージェントの役割に割り当てます.データストリームの各コンポーネントに対して、制御エージェントは、データに使用される有効なペア（有効なリストから）を指定します.指名の正確なタイミングは、現地の方針に基づいています.

指名するとき、制御エージェントは、データストリームの各コンポーネントの少なくとも1つの有効なペアが見つかるまでチェックを続行させ、次に有効なペアを選択し、そのペアに対してSTUN要求を送信します.ノミネートされたピア.これを図4に示します.

LR--STUNリクエスト-> \ Lの<-STUNレスポンス/チェック 

<-STUNリクエスト\ RのSTUNレスポンス-> /チェック 

STUNリクエスト+属性-> \ Lの<-STUNレスポンス/チェック 

図4：ノミネート 

制御されたエージェントは、属性を持つSTUN要求を受信すると、同じペアをチェックします（チェックがまだ実行されていない場合）.上記のトランザクションが成功すると、エージェントはペアに指定されたフラグを設定し、データストリームのそのコンポーネントの今後のチェックをキャンセルします.エージェントがデータストリームの各コンポーネントに指定フラグを設定すると、ペアは選択されたペアになります.その後、選択したペアのみが、そのデータストリームに関連付けられたデータの送受信に使用されます.





2.4.ICE再起動

ICEが終了すると、いずれかのICEエージェントが1つまたはすべてのデータストリームに対していつでも再起動できます.これは、再起動を示す更新された候補情報を送信することにより行われます.

2.5.Liteの実装

特定のICEエージェントは常にパブリックインターネットに接続され、通信員からパケットを受信できるパブリックIPアドレスを持ちます.これらのデバイスがICEをサポートしやすくするために、ICEは「ライト」と呼ばれる特別なタイプの実装を定義します（通常の完全な実装とは対照的です）.Liteエージェントはホスト候補のみを使用し、接続チェックを生成したり、状態マシンを実行したりしませんが、接続チェックに応答できる必要があります.

3. ICEの使用 

このドキュメントは、ICEエージェント間で候補者情報を交換する手段を提供するプロトコルでICEの一般的な使用を指定します.ICEを使用するさまざまなプロトコル（「プロトコルを使用する」と呼ばれる）の特定の詳細（候補情報のエンコード方法と実際の候補交換プロセス）は、個別の使用ドキュメントに記載されています.

エージェントが候補情報を交換できるようにする1つのメカニズムは、SIPプロトコル[RFC3261] [ICE-SIP-SDP]の一部としてのOffer / Answerセマンティクス（[RFC3264]に基づく）の利用です. 

[RFC7825]は、リアルタイムストリーミングプロトコル（RTSP）のICE使用法を定義しています.ただし、ICEの使用はRFC 5245に基づいていることに注意してください.

4.用語 

キーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「NOT RECOMMENDED」、「MAY」、および「OPTIONAL」この文書の「」は、BCP 14 [RFC2119] [RFC8174]で説明されているように、すべての大文字で表示される場合にのみ解釈されます. 

読者は、[RFC5389]で定義されている用語とUDPのNAT動作要件[RFC4787]に精通している必要があります. 









この仕様では、次の追加の用語を使用しています. 

ICEセッション：ICEセッションは、候補者の収集から始まり、すべての候補者が解放されるか、ICEの再起動が完了するまで、ICEエージェント間の相互作用（候補者交換、接続チェック、指名、キープアライブ）に続くすべてのICE関連アクションで構成されます引き金になった. 

ICEエージェント、エージェント：ICEエージェント（単に「エージェント」と呼ばれることもあります）は、ICE候補交換に関係するプロトコル実装です.典型的な候補者の交換には2つのエージェントが関与します.

開始ピア、開始エージェント、開始者：開始エージェントは、ICE候補交換プロセスを開始するICEエージェントです. 

応答ピア、応答エージェント、応答者：応答エージェントは、開始エージェントによって開始された候補交換プロセスを受信して​​応答するICEエージェントです. 

ICE Candidate Exchange、Candidate Exchange：ICEエージェントがICEを実行するために必要な情報（候補者やパスワードなど）を交換するプロセス.SDPエンコーディング[RFC3264]によるオファー/アンサーは、候補情報の交換に使用できるプロトコルの一例です.

ピア：セッション内のICEエージェントの1つの観点から見ると、そのピアは他のエージェントです.具体的には、開始エージェントの観点からは、ピアが応答エージェントです.応答エージェントの観点から見ると、ピアは開始エージェントです.

トランスポートアドレス：IPアドレスとトランスポートプロトコル（UDPやTCPなど）ポートの組み合わせ. 

データ、データストリーム、データセッション：ICEを使用してデータセッションを設定する場合、データは何らかのプロトコルを使用して転送されます.メディアは通常、RTPパケットのストリームで構成されるRTPで転送されます.データセッションとは、ICEで作成およびテストされたパス上のピア間で交換されるデータパケットのことです.

候補者、候補者情報：データを受信するための潜在的な連絡先となるトランスポートアドレス.候補には、そのタイプ（サーバー反射型、リレー型、またはホスト）、優先度、基盤、およびベースのプロパティもあります.





コンポーネント：コンポーネントは、データストリームの一部です.データストリームには複数のコンポーネントが必要な場合があり、各コンポーネントは、データストリーム全体が機能するために機能する必要があります.RTP / RTCPデータストリームの場合、RTPとRTCPが同じポートで多重化されていない限り、データストリームごとに2つのコンポーネントがあります.RTP用とRTCP用です.コンポーネントには候補ペアがあり、他のコンポーネントでは使用できません.

ホスト候補：ホスト上のIPアドレスから特定のポートにバインドすることにより取得された候補.これには、物理​​インターフェイス上のIPアドレスと、VPNを通じて取得したものなどの論理インターフェイス上のIPアドレスが含まれます.

Server-Reflexive Candidate：IPアドレスとポートが、NATを介してSTUNサーバーなどのサーバーにパケットを送信した後、NATによってICEエージェントに割り当てられたバインディングである候補. 

Peer-Reflexive Candidate：IPアドレスとポートが、NATを介してピアにパケットを送信した後、NATによってICEエージェントに割り当てられたバインディングである候補. 

リレー候補：TURNサーバーなどのリレーサーバーから取得した候補. 

ベース：ICEエージェントが特定の候補者に送信するトランスポートアドレス.ホスト、サーバー反射、およびピア反射候補の場合、ベースはホスト候補と同じです.リレー候補の場合、ベースはリレー候補と同じです（つまり、TURNサーバーが送信元として使用するトランスポートアドレス）.

関連アドレスおよびポート：候補者に関連するトランスポートアドレス.診断およびその他の目的に役立ちます.候補がサーバーまたはピアの再帰候補である場合、関連するアドレスとポートは、そのサーバーまたはピアの再帰候補のベースと等しくなります.候補がリレーされる場合、関連アドレスとポートは、クライアントにそのリレーされた候補を提供したAllocate応答のマッピングアドレスと等しくなります.候補がホスト候補である場合、関連するアドレスとポートはホスト候補と同一です.

基盤：同様の候補をグループ化するために凍結アルゴリズムで使用される任意の文字列.同じタイプ、ベースIPアドレス、プロトコル（UDP、TCPなど）、およびSTUNまたはTURNサーバーを持つ2つの候補についても同じです.これらのいずれかが異なる場合、基盤は異なります.



ローカル候補：ICEエージェントが取得し、ピアに送信する可能性のある候補. 

リモート候補：ICEエージェントがピアから受け取った候補. 

デフォルトの宛先/候補：データストリームのコンポーネントのデフォルトの宛先は、ICEに対応していないICEエージェントが使用するトランスポートアドレスです.コンポーネントのデフォルトの候補は、トランスポートアドレスがそのコンポーネントのデフォルトの宛先と一致するものです.

候補ペア：ローカル候補とリモート候補を含むペア. 

チェック、接続性チェック、STUNチェック：接続性を検証するためのSTUNバインディング要求.候補ペアのローカル候補のベースからリモート候補にチェックが送信されます.

チェックリスト：ICEエージェントがチェックの生成に使用する候補ペアの順序付きセット. 

通常のチェック：定期的に起動するタイマーの結果としてICEエージェントによって生成される接続チェックで、チェックを送信するように指示します. 

トリガーチェック：ピアからの接続チェックの受信の結果として生成された接続チェック. 

有効なペア：ローカル候補が正常な接続チェック応答のマップされたアドレスに等しく、リモート候補が接続チェック要求が送信された宛先アドレスに等しい候補ペア. 

有効なリスト：成功したSTUNトランザクションによって検証されたデータストリームの候補ペアの順序付きセット. 

チェックリストセット：すべてのチェックリストの順序付きリスト.順序は、ICEの使用ごとに決定されます.

完全実装：この仕様で定義されている機能の完全なセットを実行するICE実装. 









Lite実装：特定の機能を省略し、Lite実装ではないピアがICEの利点を得るために必要なだけ実装するICE実装.Liteの実装では、ステートマシンは保持されず、接続性チェックは生成されません.

制御エージェント：候補ペアを指名するICEエージェント.どのセッションでも、常に1つの制御エージェントと1つの制御エージェントが存在します.

制御エージェント：制御エージェントが候補ペアを指名するのを待つICEエージェント. 

指名：ICEエージェントがデータの送受信に使用する候補ペアを制御エージェントに示す制御エージェントのプロセス.この仕様で定義された指名プロセスは、RFC 5245で「通常の指名」と呼ばれていました.RFC5245で「積極的な指名」と呼ばれた指名プロセスは、この仕様で廃止されました.

ノミネート、ノミネートフラグ：候補ペアのノミネートが成功すると、候補ペアがノミネートされ、そのノミネートフラグの値がtrueに設定されます. 

選択されたペア、選択された候補ペア：データストリームのコンポーネントのデータの送受信に使用される候補ペアは、「選択されたペア」と呼ばれます.データストリーム用に選択したペアを作成する前に、データストリームのコンポーネントに関連付けられている有効なペアを使用して、コンポーネントのデータを送受信できます.データストリームの各コンポーネントに指定されたペアがあると、指定されたペアはデータストリームの選択されたペアになります.選択されたペアに関連付けられた候補は、「選択された候補」と呼ばれます.

プロトコルの使用、ICEの使用：NATトラバーサルにICEを使用するプロトコル.使用仕様は、ここで定義された手順がそのプロトコルに適用される方法に関するプロトコル固有の詳細を定義します.

タイマーTa：新しいSTUNまたはTURNトランザクションを生成するためのタイマー. 

タイマーRTO（再送信タイムアウト）：特定のSTUNまたはTURNトランザクションの再送信タイマー. 









5. ICE候補者の収集と交換 

ICE処理の一部として、開始エージェントと応答エージェントの両方が候補を収集し、冗長な候補に優先順位を付けて削除し、使用プロトコル（ICEの使用法）で定義されたピアと候補情報を交換します.候補エンコードメカニズムの詳細と候補情報交換のセマンティクスは、この仕様の範囲外です.

5.1.完全実装

5.1.1.候補者の収集

ICEエージェントは、コミュニケーションが差し迫っていると考えたときに候補者を集めます.開始エージェントは、ユーザーインターフェイスキューまたはセッションを開始する明示的な要求に基づいてこれを実行できます.すべての候補者にはトランスポートアドレスがあります.タイプとベースもあります.この仕様では、ホスト候補、サーバー反射候補、ピア反射候補、リレー候補の4つのタイプが定義および収集されます.サーバー反射候補はSTUNまたはTURNを使用して収集され、中継された候補はTURNを介して取得されます.ピア反射候補は、接続性チェックの結果として、ICEの後の段階で取得されます.

応答エージェントで候補を収集するプロセスは、開始エージェントのプロセスと同じです.ICEセッションに関連付けられたアプリケーションのユーザーに警告する前に、応答エージェントが候補情報を受信するとすぐにこのプロセスを開始することをお勧めします.

5.1.1.1.ホスト候補者

ホスト候補は、ホスト上のインターフェイス（VPNインターフェイスを含む物理または仮想）に接続されたIPアドレスのポートにバインドすることによって取得されます. 

ICEエージェントが使用を希望する各データストリームの各コンポーネントについて、エージェントは、ホストが持つ各IPアドレスの候補を取得する必要がありますが、以下の例外があります.エージェントは、特定のIPアドレスのUDPポートにバインドすることにより、各候補を取得します.ホスト候補（および実際にはすべての候補）は、常に候補である特定のコンポーネントに関連付けられています.

各コンポーネントには、「コンポーネントID」と呼ばれるIDが割り当てられています.RTP / RTCPデータストリームの場合、RTPとRTCPの両方が同じUDPポートで多重化されていない限り（RTP / RTCP多重化）、RTP自体のコンポーネントIDは1で、RTCPのコンポーネントIDは2です.RTP/ RTCP多重化、コンポーネントID 1はRTPとRTCPの両方に使用されます.RTP / RTCP多重化が使用されることをエージェントが確実に認識していない場合（つまり、エージェントが他のエージェントもRTP / RTCP多重化をサポートしており、使用する意思があることを知っている場合） RTP / RTCP多重化、エージェントはRTCPの個別の候補を取得しなければなりません.エージェントがRTCPの候補を取得し、RTP / RTCP多重化を使用することになった場合、エージェントはRTCP候補で接続性チェックを実行する必要はありません.

エージェントがRTPとRTCPの個別の候補を使用している場合、エージェントにK個のIPアドレスがあると、2 * K個のホスト候補になります. 

応答エージェントは、候補を取得するときに、通常、他のエージェントがRTP / RTCP多重化をサポートしているかどうかを知っていることに注意してください.この場合、RTCPの個別の候補を取得する必要はありません.ただし、コンポーネントID 2が存在しないことは、RTCP / RTP多重化の使用を意味しません.これは、RTCPが使用されていないことも意味する可能性があるためです.

RTP / RTCPストリーム以外の複数のコンポーネントの使用は、ICE処理の複雑さを増すため推奨されません.複数のコンポーネントが必要な場合、コンポーネントIDは1から始まり、コンポーネントごとに1ずつ増加する必要があります.

各ホスト候補のベースは、候補自体に設定されます. 

ホスト候補は、次の例外を除き、すべてのIPアドレスから収集されます. 

oループバックインターフェイスからのアドレスを候補アドレスに含めることはできません. 

o非推奨のIPv4互換IPv6アドレス[RFC4291]およびIPv6サイトローカルユニキャストアドレス[RFC3879]は、アドレス候補に含めてはいけません（MUST NOT）. 

o ICEを使用するアプリケーションがIPv4をサポートしない場合（つまり、IPv6専用アプリケーション[RFC4038]）を除き、IPv4-mapped IPv6アドレスをアドレス候補に含めるべきではありません（SHOULD NOT）. 

o位置追跡を防止するメカニズムを使用して生成されたIPv6アドレスに対応する1つ以上のホスト候補を収集する場合[RFC7721]、位置追跡を許可するIPv6アドレスに対応するホスト候補は、同じインターフェース上に構成され、同じネットワークプレフィックスの一部を収集しないでください.同様に、

位置追跡を防ぐメカニズムを使用して生成されたIPv6アドレスが収集され、IPv6リンクローカルアドレス[RFC4291]に対応するホスト候補が収集されてはなりません（MUST NOT）. 

IPv6デフォルトアドレス選択仕様[RFC6724]は、一時アドレス[RFC4941]が永続アドレスよりも優先されることを指定しています. 

5.1.1.2.サーバー反射およびリレー候補

ICEエージェントは、サーバー反射型およびリレー型の候補者を収集する必要があります.ただし、特定のネットワークではSTUNおよびTURNサーバーを使用する必要がない場合があり、TURNサーバーを使用すると高価になる場合があるため、一部の展開ではそれらを使用しないことを選択する場合があります.エージェントがサーバー反射型またはリレー候補を収集しない場合は、機能が実装され、構成によって無効にされることをお勧めします.これにより、将来条件が変更された場合に構成によって再度有効にできます.

エージェントは、各ホスト候補を、それが構成されている、または何らかの方法で発見したSTUNまたはTURNサーバーとペアにします.ドメイン名を設定し、[RFC5389]のDNSプロシージャ（「stun」サービスでSRVレコードを使用）を使用してSTUNサーバーを検出し、[RFC5766]のDNSプロシージャ（SRVレコードを使用して「turn」サービス）を使用して、TURNサーバーを検出します.

複数のSTUNまたはTURNサーバーが使用可能な場合（またはDNSレコードを通じて学習され、複数の結果が返される場合）、エージェントはそれらすべての候補を収集し、少なくとも1つ（1つのSTUNサーバーと1つのTURNサーバ）.ホスト候補をSTUNまたはTURNサーバーとペアリングすることにより、エージェントはペアごとにホスト候補からサーバーにバインドまたは割り当て要求を送信します.STUNサーバーへのバインド要求は認証されず、応答のALTERNATE-SERVER属性は無視されます.エージェントは、[RFC5389]で定義されたBinding要求の後方互換性モードをサポートする必要があります.リクエストの割り当ては、クライアントが他の方法で取得した長期の認証情報を使用して認証される必要があります.

収集プロセスは、タイマーTaを使用して制御されます.Taが期限切れになるたびに、エージェントは別の新しいSTUNまたはTURNトランザクションを生成できます.このトランザクションは、回復可能なエラー（認証の失敗など）で失敗した以前のトランザクションの再試行、または新しいホスト候補とSTUNまたはTURNサーバーのペアのトランザクションのいずれかです.エージェントは、各有効期限ごとに1回よりも頻繁にトランザクションを生成すべきではありません.TaおよびSTUN再送信タイマー、RTOの設定方法に関するガイダンスについては、セクション14を参照してください.エージェントは、BindingまたはAllocate応答を受け取ります.Allocate応答が成功すると、エージェントにサーバー反射候補（マップされたアドレスから取得）と、XOR-RELAYED-ADDRESS属性の中継候補が提供されます.サーバーに要求を満たすためのリソースが不足しているため、割り当て要求が拒否された場合、その代わりに、エージェントはバインディング要求を送信してサーバー反射候補を取得する必要があります.バインディングレスポンスは、エージェントにサーバー反射候補のみを提供します（マッピングアドレスからも取得されます）.サーバー反射候補のベースは、割り当て要求またはバインド要求の送信元のホスト候補です.リレーされた候補者のベースは、その候補者自身です.中継された候補がホスト候補と同一である場合（まれに発生する可能性があります）、中継された候補は破棄されなければなりません.リレーされた候補者のベースは、その候補者自身です.中継された候補がホスト候補と同一である場合（まれに発生する可能性があります）、中継された候補は破棄されなければなりません.リレーされた候補者のベースは、その候補者自身です.中継された候補がホスト候補と同一である場合（まれに発生する可能性があります）、中継された候補は破棄されなければなりません.

IPv6専用エージェントが、NAT64 [RFC6146]およびDNS64 [RFC6147]テクノロジを利用するネットワークにある場合、IPv4専用のSTUNまたはTURNサーバーからIPv4サーバーの再帰候補および/または中継候補を収集することもできます.IPv6専用エージェントは、IPv6プレフィックス検出[RFC7050]も利用して、NAT64が使用するIPv6プレフィックスを検出し（存在する場合）、それに応じて各IPv6専用インターフェイスのサーバー反射候補を生成する必要があります.NAT64サーバー反射候補は、IPv4サーバー反射候補と同様に優先順位が付けられます.

5.1.1.3.コンピューティング基盤

ICEエージェントは、各候補者に基盤を割り当てます.次のすべてに該当する場合、2つの候補者の基盤は同じです.

o同じタイプ（ホスト、リレー、サーバー反射、またはピア反射）を持っています. 

oベースのIPアドレスは同じです（ポートは異なる場合があります）. 

o再帰候補およびリレー候補の場合、候補を取得するために使用されるSTUNまたはTURNサーバーは同じIPアドレス（エージェントがSTUNまたはTURNサーバーに接続するために使用するIPアドレス）を持ちます. 

oそれらは同じトランスポートプロトコル（TCP、UDP）を使用して取得されました. 

同様に、タイプが異なる場合、ベースが異なる場合、ベースを取得するために使用されるSTUNまたはTURNサーバーが異なるIPアドレス（エージェントがSTUNまたはTURNサーバーに接続するために使用するIPアドレス）またはそれらの転送プロトコルが異なります. 







5.1.1.4.候補者を生かしておく

サーバーリフレクティブおよびリレーされた候補が割り当てられたら、セクション8.3で説明されているように、ICE処理が完了するまで生き続けなければなりません.バインディングリクエストを通じて学習したサーバー反射候補の場合、サーバーへの追加のバインディングリクエストによってバインディングを維持する必要があります.[RFC5766]で説明されているように、割り当ての更新は更新トランザクションを使用して行われます.更新要求は、サーバー反映候補も更新します.

ホスト候補者はタイムアウトしませんが、いくつかの理由で候補者の住所が変更または消失する場合があります.ICEエージェントは、使用するインターフェイスを監視し、ベースがなくなった候補を無効にし、新しいIPアドレス（新しいインターフェイスまたは現在使用されているインターフェイス）が表示されたときに必要に応じて新しい候補を取得する必要があります.

5.1.2.候補者の優先順位付け

優先順位付けプロセスにより、各候補者に優先順位が割り当てられます.データストリームの各候補には、1〜（2 ** 31-1）の間の正の整数でなければならない一意の優先度がなければなりません.この優先順位は、接続性チェックの順序と候補者の相対的な優先順位を決定するためにICEによって使用されます.優先度の高い値は、低い値よりも優先度が高くなります.

ICEエージェントは、セクション5.1.2.1の式を使用してこの優先度を計算し、セクション5.1.2.2のガイドラインを使用してパラメータを選択する必要があります.エージェントが別の式を使用することを選択した場合、ICEは収束に時間がかかることがあります.これは、エージェントがチェックで調整されないためです.

候補者に優先順位を付けるプロセスは、開始エージェントと応答エージェントで共通です. 

5.1.2.1.推奨フォーミュラ

推奨される式は、次の式を使用して、候補タイプ（サーバー反射、ピア反射、リレー、およびホスト）の設定、候補が取得されたIPアドレスの設定、およびコンポーネントIDを組み合わせます. 

優先度=（2 ^ 24）*（タイプ設定）+（2 ^ 8）*（ローカル設定）+（2 ^ 0）*（256-コンポーネントID） 

タイプの優先順位は、0（最低の優先順位）から126（最高の優先順位）までの整数でなければならず、同じタイプのすべての候補に対して同一でなければならず、異なるタイプの候補に対して異なっていなければなりません.ピア再帰候補の型の優先度は、サーバー再帰候補の型優先よりも高くなければなりません.値を0に設定すると、このタイプの候補は最後の手段としてのみ使用されます.セクション5.1.1の手順に基づいて収集された候補者は、ピア反射候補者になることはありません.このタイプの候補は、ICEによって実行される接続性チェックから学習されます.

ローカル設定は、0（最低設定）から65535（最高設定）までの整数でなければなりません.IPアドレスが1つしかない場合、この値は65535に設定する必要があります.同じタイプを持つ特定のデータストリームの特定のコンポーネントに複数の候補がある場合、ローカルプリファレンスはそれぞれに対して一意でなければなりません.ICEエージェントがデュアルスタックの場合、[RFC8421]で説明されている現在のベストプラクティスに従って、ローカルプリファレンスを設定する必要があります.

コンポーネントIDは、1〜256の整数でなければなりません. 

5.1.2.2.タイプとローカルプリファレンスを選択するためのガイドライン

タイププリファレンスのRECOMMENDED値は、ホスト候補では126、ピア反射候補では110、サーバー反射候補では100、リレー候補では0です. 

ICEエージェントがマルチホームであり、複数のIPアドレスを持っている場合、[RFC8421]の推奨事項に従う必要があります.複数のTURNサーバーを使用する場合、TURNサーバーから取得した候補のローカル優先順位は、マルチホームローカル候補の場合と同様の方法で選択されます.ローカル優先値は、異なるサーバー間の優先を示すために使用されますが、優先はそれぞれ.

タイプ設定を選択する際、エージェントは、待ち時間、パケット損失、コスト、ネットワークトポロジ、セキュリティ、プライバシーなどの要素を考慮する場合があります. 

5.1.3.冗長候補者の排除

次に、ICEエージェント（開始および応答）は、冗長な候補を排除します.2つの候補は同じトランスポートアドレスを持つことができますが、ベースは異なり、これらは冗長とは見なされません.多くの場合、エージェントがNATの背後にない場合、サーバー反射候補とホスト候補は冗長になります.候補は、そのトランスポートアドレスとベースが別の候補のものと等しい場合にのみ冗長です.エージェントは、優先度の低い冗長な候補を排除すべきである.



5.2.Liteの実装手順

Lite実装は、ホスト候補のみを利用します.IPアドレスファミリに関係なく、各IPアドレスについて、候補はゼロまたは1つでなければなりません.ライトの実装では、ICEを使用して候補の中から動的に選択することはできません.したがって、特定のIPアドレスファミリの複数の候補を含めることはお勧めしません.1つのアドレスを使用するか、他のアドレスを使用するかを接続性チェックでのみ判断できるためです.代わりに、複数のパブリックIPアドレスを持つエージェントが完全なICE実装を実行して、そのアドレスを最適に使用することをお勧めします.

各コンポーネントには、「コンポーネントID」と呼ばれるIDが割り当てられています.RTP / RTCPデータストリームの場合、RTCPがRTPと同じポートで多重化されていない限り、RTP自体のコンポーネントIDは1、RTCPのコンポーネントIDは2です.エージェントがRTCPを多重化せずに使用している場合、その候補を取得する必要があります.ただし、コンポーネントID 2が存在しないことは、RTCP / RTP多重化の使用を意味しません.これは、RTCPが使用されていないことも意味する可能性があるためです.

各候補者には基礎が割り当てられます.基盤は、異なるIPアドレスから割り当てられた2つの候補に対して異なっていなければなりません.それ以外の場合は、同じでなければなりません.IPアドレスごとに増分する単純な整数で十分です.さらに、各候補には、同じデータストリームのすべての候補の中で一意の優先度を割り当てる必要があります.セクション5.1.2.1の式を使用して優先度を計算する場合、タイプ優先値は126に設定する必要があります.ホストがIPv4のみの場合、ローカル優先値は65535に設定する必要があります.ホストがIPv6またはデュアルスタックの場合、ローカルプリファレンス値は、RFC 6724 [RFC6724]で説明されているIPアドレスの優先順位値に設定する必要があります.

次に、エージェントは各データストリームの各コンポーネントのデフォルト候補を選択します.ホストがIPv4のみの場合、各データストリームの各コンポーネントに対して1つの候補しかありません.したがって、その候補がデフォルトです.ホストがIPv6のみの場合、デフォルトの候補は通常、グローバルスコープのIPv6アドレスになります.デュアルスタックホストは、デフォルト候補にIPv4またはIPv6が使用されているかどうかの構成を許可する必要があります.また、現在のネットワーク環境で成功する可能性が高いと管理者が判断する構成に基づく必要があります.

このセクションの手順は、開始エージェントと応答エージェントで共通です. 







5.3.候補者情報の交換

ICEエージェント（開始および応答）には、交換する候補者に関する次の情報が必要です.各ICEの使用法では、使用プロトコルと情報を交換する方法を定義する必要があります.このセクションでは、交換する必要がある情報について説明します.

候補者：1人以上の候補者.各候補者について：

アドレス：候補者のIPアドレスとトランスポートプロトコルポート. 

トランスポート：候補者のトランスポートプロトコル.使用プロトコルが単一のトランスポートプロトコルでのみ実行される場合、これは省略できます.

基礎：最大32文字のシーケンス. 

コンポーネントID：候補のコンポーネントID.使用プロトコルがコンポーネントの概念を使用しない場合、これは省略してもよい[MAY].

優先度：候補者の32ビットの優先度. 

タイプ：候補者のタイプ. 

関連アドレスとポート：候補者の関連IPアドレスとポート.エージェントがプライバシーの理由などでそれらを明らかにしたくない場合、これらは省略されるか、無効な値に設定される場合があります.

拡張性パラメーター：使用プロトコルは、将来、候補ごとの新しいICEパラメーターを追加する手段を定義する可能性があります. 

LiteまたはFull：エージェントがライトエージェントかフルエージェントか. 

接続性チェックのペーシング値：エージェントが使用したい接続性チェックのペーシング値.エージェントが定義されたデフォルト値を使用したい場合、これは省略してもよい[MAY].

ユーザー名フラグメントとパスワード：接続チェックの実行に使用される値.値は推測不能でなければならず、パスワードの生成には少なくとも128ビットの乱数ジェネレータ出力が使用され、ユーザー名フラグメントの生成には少なくとも24ビットの出力が必要です.

拡張機能：新しいメディアストリームまたはセッションレベルの属性（ICEオプション）. 

使用プロトコルがICEの不一致（5.4項）に対して脆弱であり、検出できる場合、検出エージェントがこの情報をピアに伝達する方法が必要です.これはブール値のフラグです.

使用プロトコルは、ICEをサポートしない古い実装との後方互換性に対処する必要がある場合としない場合があります.非ICEへのフォールバックメカニズムがサポートされて使用されている場合、恐らく使用プロトコルはICEパラメータに加えてデフォルトの候補（IPアドレスとポート）を伝える方法を提供します.

エージェントが候補情報を送信すると、各候補でSTUNとデータパケットの両方を受信する準備をしなければなりません.セクション12.1で説明したように、データのデフォルトの宛先として表示される前に、データパケットを候補に送信できます.

5.4.ICEミスマッチ

ALGなどの特定のミドルボックスは、ICEを壊す方法でシグナリング情報を変更できます（たとえば、SDPでIPアドレスを書き換えることにより）.これは「ICEの不一致」と呼ばれます.使用するプロトコルがICEの不一致に対して脆弱な場合、応答エージェントはそれを検出し、ICEの不一致についてピアICEエージェントに通知できる必要があります.

各使用プロトコルは、使用プロトコルがICEの不一致に対して脆弱かどうか、ICEの不一致の検出方法、およびICEの不一致が検出されたときに特定のアクションを実行する必要があるかどうかを定義する必要があります. 

6. ICE候補の処理 

ICEエージェントが候補者を収集し、候補者をピアと交換したら（セクション5）、自身の役割を決定します.さらに、完全な実装がチェックリストを形成し、ピアとの接続性チェックの実行を開始します.

6.1.完全実装の手順

6.1.1.役割の決定

セッションごとに、各ICEエージェント（開始および応答）が役割を引き受けます.制御と制御の2つの役割があります.制御エージェントは、通信に使用される最終的な候補ペアの選択を担当します.以下のセクションでは、制御エージェントと制御エージェントが従う実際の手順について詳しく説明します.





ロールと動作への影響を決定するためのルールは次のとおりです. 

両方のエージェントがいっぱいです.ICE処理を開始した開始エージェントが制御の役割を引き受けなければならず、他のエージェントが制御の役割を引き受けなければなりません.両方のエージェントがチェックリストを作成し、ICEステートマシンを実行し、接続性チェックを生成します.制御エージェントは、セクション8.1のロジックを実行して、（指名に関連付けられた接続性チェックが成功した場合）選択されたペアになるペアを指定し、セクション8.1.2で説明したように両方のエージェントがICEを終了します.

1人のエージェントがフル、1人のライト：フルエージェントが制御の役割を引き受けなければならず、ライトエージェントが制御の役割を引き受けなければなりません.完全なエージェントはチェックリストを作成し、ICEステートマシンを実行し、接続性チェックを生成します.そのエージェントは、セクション8.1のロジックを実行して、（指名に関連する接続チェックが成功した場合）選択されたペアになるペアを指定し、セクション8.1.2のロジックを使用してICEを終了します.ライトの実装は、接続性チェックをリッスンし、それらを受信して​​応答し、セクション8.2で説明されているようにICEを終了します.ライト実装の場合、各データストリームのICE処理の状態は実行中と見なされ、ICE全体の状態は実行中です.

Both lite：ICE処理を開始した開始エージェントは制御の役割を引き受けなければならず、他のエージェントは制御の役割を引き受けなければなりません.この場合、接続チェックは送信されません.むしろ、候補が交換されると、各エージェントは接続チェックなしでセクション8で説明されている処理を実行します.両方のエージェントが、自分が管理されている、または管理していると考える可能性があります.後者の場合、競合は、候補交換を可能にするシグナリングプロトコルのグレア検出機能によって解決されます.各データストリームのICE処理の状態は実行中と見なされ、ICE全体の状態は実行中です.

セッションのロールが決定されると、それらはセッションの存続期間を通して持続します.ロールはICE再起動の一部として再決定できます（セクション9）が、ICEエージェントは、以下の基準の1つ以上が満たされない限り、ICE再起動の一部としてロールを再決定してはなりません.

Fullがliteになります：制御エージェントがいっぱいになり、liteに切り替わった場合、ピアエージェントもいっぱいになった場合、ロールを再決定する必要があります. 



ロールの競合：ICEの再起動によりロールの競合が発生する場合、セクション7.3.1.1のロールの競合手順により、ロールが再決定される場合があります. 

注：ICEの再起動が役割の競合を引き起こす可能性がある特定のサードパーティコール制御（3PCC）[RFC3725]シナリオがあります. 

注：エージェントは、ロールが決定される前に、エージェントがフルかライトかを互いに通知する必要があります.そのためのメカニズムは、シグナリングプロトコルに固有であり、ドキュメントの範囲外です.

ピアが役割の再決定を開始する場合、そうするための基準が満たされない場合でも、エージェントは受け入れなければなりません.これは、ピアがRFC 5245に準拠している場合に発生する可能性があります.

6.1.2.チェックリストの作成

データストリームごとに1つのチェックリストがあります.チェックリストを作成するには、ICEエージェントの開始と応答で候補ペアを作成し、ペアの優先度を計算し、ペアを優先度順に並べ、ペアを整理し、優先度の低いペアを削除し、チェックリストの状態を設定します.候補がチェックリストに追加された場合（ピア反射候補の検出などにより）、エージェントは更新されたチェックリストに対してこれらの手順を再実行します.

6.1.2.1.チェックリストの状態

各チェックリストには状態があり、チェックリストに関連付けられたデータストリームのICEチェックの状態をキャプチャします.状態は次のとおりです.

実行中：チェックリストはまだ完了も失敗もしていません.チェックリストは、最初は実行状態に設定されています.

完了：チェックリストには、データストリームの各コンポーネントの指定ペアが含まれています. 

失敗：チェックリストには、データストリームの各コンポーネントの有効なペアがありません.また、チェックリストのすべての候補ペアは、失敗または成功のいずれかの状態です.つまり、チェックリストの少なくとも1つのコンポーネントに候補ペアがあり、それらはすべて失敗状態にあります.これは、コンポーネントが失敗したこと、つまりチェックリストが失敗したことを意味します.

6.1.2.2.候補ペアの形成

ICEエージェントは、各ローカル候補を、同じIPアドレスファミリを持つ同じデータストリームの同じコンポーネントの各リモート候補とペアにします.ローカル候補者の一部がリモート候補者とペアリングされず、リモート候補者の一部がローカル候補者とペアリングされない可能性があります.これは、1つのエージェントがデータストリームのすべてのコンポーネントの候補を含まない場合に発生する可能性があります.これが発生した場合、そのデータストリームのコンポーネント数は事実上削減され、データストリームのすべてのコンポーネントで各エージェントが提供する最大コンポーネントIDの両方のエージェントの最小数に等しいと見なされます.

RTPの場合、一方のエージェントがRTCPの候補を提供し、もう一方が提供しない場合、これが発生します.別の例として、開始エージェントは同じポートでRTPとRTCPを多重化できます[RFC5761].ただし、開始エージェントはピアエージェントがそのような多重化を実行できるかどうかを知らないため、別のポートでRTPとRTCPの候補が含まれます.ピアエージェントがそのような多重化を実行できる場合、各RTP / RTCPマルチプレクサの候補ごとに1つのコンポーネントのみが含まれます.ICEは、この候補のコンポーネントが1つだけであるかのように振る舞うことになります.

IPv6では、ホストが各インターフェイスに複数のホスト候補を持つことが一般的です.結果の候補ペアの量を合理的に保ち、動作する可能性が非常に低い候補ペアを避けるために、IPv6リンクローカルアドレスをリンクローカルアドレス以外とペアにしてはいけません.

ローカル候補とリモート候補の両方が特定のコンポーネントのデフォルト候補である候補ペアは、そのコンポーネントの「デフォルト候補ペア」と呼ばれます.これは、両方のエージェントがICE対応でない場合にデータを送信するために使用されるペアです.







































図5は、トランスポートアドレス、候補、候補ペア、およびチェックリストのプロパティと関係を示しています. 

+ -------------------------------------------- + | | | + --------------------- + | | | + ---- + + ---- + + ---- + | +タイプ| | || IP | |ポート| |トラン| | +優先度| | ||アドレス| | | | | | +財団| | | + ---- + + ---- + + ---- + | +コンポーネントID | | | 輸送| +関連住所| | | 加算器| | | + --------------------- + +ベース| | 候補者| + -------------------------------------------- + * * * * ************************************ * * + ----------- -------------------- + | | | ローカルリモート| | + ---- + + ---- + + default？| | | Cand | | Cand | +有効？| | + ---- + + ---- + +指名？| | +州| | | | | | 候補ペア| + ------------------------------- + * * * ************ * * + ------------------ + | 候補ペア| + ------------------ + + ------------------ + | 候補ペア| + ------------------ + + ------------------ + | 候補ペア| + ------------------ + + ------------------ + | 候補ペア| + ------------------ + + ------------------ + | 候補ペア| + ------------------ +

チェックリスト 



図5：チェックリストの概念図 



6.1.2.3.ペアの優先度と順序ペアの計算

ICEエージェントは、各候補ペアの優先順位を計算します.Gを、制御エージェントによって提供される候補の優先順位とします.制御されたエージェントによって提供される候補の優先度をDとします.ペアの優先度は次のように計算されます.

ペアの優先度= 2 ^ 32 * MIN（G、D）+ 2 * MAX（G、D）+（G> D？1：0） 

エージェントは、候補ペアの優先順位の降順で各チェックリストをソートします.2つのペアの優先順位が同じ場合、それらの間の順序は任意です.

6.1.2.4.ペアの剪定

このソートされた候補ペアのリストは、実行される接続性チェックのシーケンスを決定するために使用されます.各チェックには、ローカル候補からリモート候補へのリクエストの送信が含まれます.ICEエージェントは、再帰候補（サーバー再帰またはピア再帰）から直接リクエストを送信することはできず、ベースからのみ送信するため、候補ペアのソート済みリストを次に通過します.ローカル候補が再帰的である各ペアに対して、候補はそのベースに置き換えられなければなりません.

エージェントは各チェックリストを整理します.これは、同じチェックリスト内の優先度の高い候補ペアと冗長である場合、候補ペアを削除することで実行されます.2つの候補ペアは、ローカル候補が同じベースを持ち、リモート候補が同一である場合、冗長です.結果は、そのデータストリームの「チェックリスト」と呼ばれる順序付けられた候補ペアのシーケンスです.

6.1.2.5.優先度の低いペアの削除

セクション19.5.1で説明した攻撃を制限するために、ICEエージェントは、チェックリストセット内のすべてのチェックリストでエージェントが実行する接続チェックの総数を制限する必要があります.これは、チェックリストセット内の候補ペアの総数を制限することにより行われます.チェックリストセットの候補ペアのデフォルトの制限は100ですが、値は構成可能でなければなりません.制限は、各チェックリスト内で、チェックリストセット内の候補ペアの総数が制限値より小さくなるまで、優先度の低い候補ペアを破棄することによって実施されます.各チェックリストの候補ペアの数が同じ量だけ減少するように、破棄を均等に行う必要があります.

可能な場合はデフォルトよりも低い値を選択し、実際の展開構成で作成される可能性のある候補ペアの最大数に値を設定することをお勧めします.構成の要件は、展開後に問題があることが判明した場合に、フィールドでこの値を修正するためのツールを提供することを目的としています.

6.1.2.6.候補ペア状態の計算

チェックリスト内の各候補者ペアには、基礎（ペア内のローカル候補とリモート候補の基礎の組み合わせ）と次のいずれかの状態があります. 

待機中：このペアのチェックは送信されていませんが、ペアは凍結されていません. 

進行中：このペアに対してチェックが送信されましたが、トランザクションは進行中です. 

成功：このペアに対してチェックが送信され、成功の結果が生成されました. 

失敗：このペアに対してチェックが送信され、失敗しました（チェックに対する応答が受信されなかったか、失敗応答が受信されました）. 

凍結：このペアのチェックは送信されておらず、ペアが凍結されて待機状態に移行するまで送信できません. 













































図6に示すように、ペアは状態間を移動します. 

+ ----------- + | | | | | 冷凍| | | | | + ----------- + | |フリーズ解除| V + ----------- + + ----------- + | | | | | | 実行する| | | 待機中| --------> |進行中| | | | | | | | | + ----------- + + ----------- + / | // | // | // | / | // | 失敗// |成功// | / | // | // | // | VV + ----------- + + ----------- + | | | | | | | | | 失敗しました| | 成功しました| | | | | | | | | + ----------- + + ----------- +

図6：ペア状態有限状態マシン（FSM） 











チェックリストの各ペアの初期状態は、次の一連の手順を実行して計算されます. 

1.チェックリストは、「チェックリストセット」と呼ばれる順序付けられたリストに配置されます（順序は各ICEの使用によって決定されます）. 

2. ICEエージェントは、最初にすべての候補ペアを凍結状態にします. 

3.エージェントは、チェックリストセット内のすべてのチェックリストを実行状態に設定します. 

4.各ファンデーションについて、エージェントは、1つの候補ペアの状態を待機状態（凍結解除）に設定します.凍結を解除する候補ペアは、その基盤を持つ最初のチェックリスト（使用法定義のチェックリストセットの順序に従って）で最初の候補ペア（コンポーネントIDが等しい場合は最も低いコンポーネントID、次に最も高い優先順位）を見つけることによって選択されます.

注：上記の手順は、最初のチェックリストの候補ペアのみが最初に待機状態に置かれたRFC 5245とは異なります.チェックリストがチェックリストセットの最初のものではない場合でも、その基礎を持つ最初のチェックリストの候補ペアに適用されるようになりました.

次の表に例を示します. 









































表の凡例： 

各行（m​​1、m2、...）は、データストリームに関連付けられたチェックリストを表します.m1は、チェックリストセットの最初のチェックリストを表します.

各列（f1、f2、...）は基盤を表します.特定の列内のすべての候補者ペアは、同じ基盤を共有します.

f-cpは、凍結状態の候補ペアを表します. 

w-cpは、待機状態の候補ペアを表します. 

1.エージェントは、チェックリストセットのすべてのペアを凍結状態に設定します. 

f1 f2 f3 f4 f5 ----------------------------- m1 | f-cp f-cp f-cp | m2 | f-cp f-cp f-cp f-cp | m3 | f-cp f-cp



2.各ファンデーションについて、最も低いコンポーネントIDの候補ペアは、同じファンデーションに関連付けられた候補ペアがチェックリストセット内の他の検査済みチェックリストのいずれかですでに待機状態になっていない限り、待機状態になります. 

f1 f2 f3 f4 f5 ----------------------------- m1 | w-cp w-cp w-cp | m2 | f-cp f-cp f-cp w-cp | m3 | f-cp w-cp

表1：ペア状態の例 

最初のチェックリスト（m1）では、同じ基盤のペアがまだ待機状態になっていないため、各基盤の候補ペアは待機状態になっています. 

2番目のチェックリスト（m2）では、ファンデーションf4の候補ペアが待機状態になります.ファンデーションf1、f2、およびf3の候補ペアは、それらのファンデーションの候補ペアが既に待機状態（チェックリストm1内）に置かれているため、凍結状態のままです.

3番目のチェックリスト（m3）では、ファンデーションf5の候補ペアが待機状態になります.ファンデーションf1の候補ペアは、そのファンデーションの候補ペアがすでに待機状態（チェックリストm1内）に置かれているため、凍結状態のままになります.

各チェックリストが処理されると、チェックリストセット内の各基盤の1つの候補ペアが待機状態になります. 

6.1.3.ICE状態

ICEエージェントには、チェックリストの状態によって決定される状態があります.状態は、すべてのチェックリストが完了した場合は完了、すべてのチェックリストが失敗した場合は失敗、その他の場合は実行中です.

6.1.4.スケジュールチェック

6.1.4.1.トリガーチェックキュー

セクション6.1.2で説明したように、ICEエージェントがチェックリストを計算し、チェックリストセットを作成すると、エージェントは接続チェック（通常およびトリガー）の実行を開始します.トリガーされた接続チェックの場合、エージェントは各チェックリストのFIFOキューを保持します.これは、「トリガーチェックキュー」と呼ばれ、次の利用可能な機会にチェックが送信される候補ペアを含みます.トリガーされたチェックキューは最初は空です.

6.1.4.2.接続性チェックの実行

通常のトリガーされた接続チェックの生成は、タイマーTaによって制御されます.チェックリストセット内の候補ペアの初期状態が設定されるとすぐに、セクション7の手順に従って、実行状態の最初のチェックリスト内の候補ペアに対してチェックが実行されます.その後、Taが次を起動するたびにチェックリストセットの実行状態のチェックリストが選択され、そのチェックリスト内の候補に対してチェックが実行されます.チェックリストセットの実行状態の最後のチェックリストが処理された後、最初のチェックリストが再び選択されます.













Taが発動するたびに、ICEエージェントは、次の手順を実行することによって選択されたチェックリスト内の候補ペアのチェックを実行します. 

1.チェックリストに関連付けられたトリガーチェックキューに1つ以上の候補ペアが含まれている場合、エージェントはキューから最上位のペアを削除し、そのペアで接続チェックを実行し、候補ペアの状態を進行中にし、その後の手順. 

2.待機状態に候補ペアがなく、凍結状態に1つ以上のペアがある場合、エージェントは凍結状態の各ペアに関連付けられた基盤をチェックします.特定の基盤で、待機中または進行中の状態のペアがない場合（チェックリストセット内のチェックリスト内）、エージェントは候補ペアの状態を待機中にし、次のステップに進みます.

3.待機状態に1つ以上の候補ペアがある場合、エージェントは待機状態で最高優先度の候補ペアを選択します（同じ優先度のペアが複数ある場合、最も低いコンポーネントIDのペアが選択されます）.そのペアの接続性チェックを実行し、候補ペアの状態を進行中にし、後続のステップを中止します. 

4.このステップに到達した場合、選択されたチェックリストに対してチェックを実行できませんでした.そのため、タイマーTaが再び期限切れになるのを待たずに、実行状態の次のチェックリストを選択して、手順1に戻ります.Running状態のすべてのチェックリストでこれが発生した場合、つまり接続性チェックを実行する候補ペアが残っていない場合、これらの手順を中止します.

エージェントが接続性チェックを実行する候補ペアを選択すると、エージェントはチェックを開始し、ペアのローカル候補に関連付けられたベースからペアのリモート候補にバインディング要求を送信します.セクション7.2.4 

ローカルポリシーに基づいて、エージェントは、チェックリストセット内の1つ以上のチェックリストの接続チェックの実行をいつでも終了することを選択できます.ただし、ICEを終了できるのは制御エージェントのみです（セクション8）.

チェックのメッセージ整合性を計算するために、エージェントはピアから取得した候補情報から学習したリモートユーザー名フラグメントとパスワードを使用します.ローカルユーザー名のフラグメントは、エージェントが自身の候補として直接認識しています.

6.2.Liteの実装手順

Liteの実装では、ピアのICEサポートを確認し、ICE処理での役割を決定することを除いて、セクション6のほとんどの手順をスキップします. 

ライトの実装が制御エージェントである場合（ピアICEエージェントもライトの実装である場合にのみ発生します）、候補交換のペアに基づいて候補ペアを選択します（IPv4の場合、ペアは1つだけです）.次に、必要に応じて、その選択を反映する新しい候補情報でピアを更新します（IPv4のみのホストには必要ありません）. 

7.接続性チェックの実行 

このセクションでは、接続チェックの実行方法について説明します. 

ICEエージェントは[RFC5389]に準拠する必要があります.完全な実装はSTUNクライアントとSTUNサーバーの両方として機能しますが、Lite実装はSTUNサーバーとしてのみ機能します（接続チェックを生成しないため）.

7.1.STUNエクステンション

ICEは、属性、PRIORITY、USE-CANDIDATE、ICE-CONTROLLED、およびICE-CONTROLLINGを使用してSTUNを拡張します.これらの属性はセクション16.1で正式に定義されています.このセクションでは、属性の使用法について説明します.

属性は、ICE接続チェックにのみ適用されます. 

7.1.1.優先度

PRIORITY属性はBinding要求に含まれ、ローカル候補に対してセクション5.1.2のアルゴリズムによって計算された値に設定されなければなりませんが、ピア反射候補の候補タイプの優先順位があります. 

7.1.2.使用候補

制御エージェントは、候補ペアを指定するためにUSE-CANDIDATE属性を含めなければなりません（セクション8.1.1）.管理対象エージェントは、バインディング要求にUSE-CANDIDATE属性を含めてはなりません.

7.1.3.ICE-CONTROLLEDおよびICE-CONTROLLING

制御エージェントは、バインディング要求にICE-CONTROLLING属性を含める必要があります.管理対象エージェントは、バインディング要求にICE-CONTROLLED属性を含める必要があります.

ICEロールの競合が発生すると、いずれかの属性の内容がタイブレーカー値として使用されます（7.3.1.1項）. 

7.2.STUNクライアントの手順

7.2.1.中継された候補者のアクセス許可の作成

リレーされたローカル候補を使用して接続性チェックが送信されている場合、以前に許可を作成していない場合、クライアントは最初に許可を作成する必要があります.TURNサーバーに、リモート候補のIPアドレスに対する特定のリレー候補の許可を作成するように指示した場合、以前に作成されていたはずです.許可を作成するために、ICEエージェントは[RFC5766]で定義された手順に従います.リモート候補者のIPアドレスに対して許可を作成する必要があります.エージェントは、ICEが完了するまでTURNチャネルの作成を延期することをお勧めします.この場合、接続チェックの許可は通常、CreatePermission要求を使用して作成されます.いったん確立されると、エージェントは、ICEが終了するまで許可をアクティブに維持する必要があります.

7.2.2.資格情報の形成

接続性チェックバインディング要求は、STUN短期資格情報メカニズムを利用しなければなりません. 

資格情報のユーザー名は、ピアが提供するユーザー名フラグメントと、要求を送信するICEエージェントのユーザー名フラグメントを、コロン（ "："）で区切って連結することにより形成されます. 

パスワードは、ピアが提供するパスワードと同じです. 

たとえば、ICEエージェントLが開始エージェントであり、ICEエージェントRが応答エージェントである場合を考えます.エージェントLには、候補用のLFRAG​​のユーザー名フラグメントとLPASSのパスワードが含まれていました.エージェントRは、RFRAGのユーザー名フラグメントとRPASSのパスワードを提供しました.LからRへの接続チェックでは、ユーザー名RFRAG：LFRAG​​とパスワードRPASSを使用します.RからLへの接続チェックでは、ユーザー名LFRAG​​：RFRAGとパスワードLPASSを使用します.応答は、要求と同じユーザー名とパスワードを利用します（応答にUSERNAME属性が存在しないことに注意してください）.



7.2.3.Diffserv処理

エージェントが送信するデータパケットでDiffServコードポイント（DSCP）マーキング[RFC2475]を使用している場合、エージェントは、送信するバインディング要求と応答に同じマーキングを適用する必要があります. 

データパケットで複数のDSCPマーキングが使用されている場合、エージェントは接続チェックで使用するためにそれらの1つを選択する必要があります. 

7.2.4.リクエストを送信する

接続候補チェックは、ローカル候補に関連付けられたベースからリモート候補にバインディング要求を送信することにより生成されます.[RFC5389]は、バインディング要求がどのように構築および生成されるかを説明しています.

接続性チェックを実行するとき、RFC 3489との後方互換性のサポートを想定してはなりません.FINGERPRINTメカニズムは、接続性チェックに使用する必要があります.

7.2.5.応答の処理

このセクションでは、ICE接続チェックに固有のバインド応答を処理するための追加手順を定義します. 

バインディング応答が受信されると、トランザクションID [RFC5389]を使用して対応するバインディング要求に関連付けられ、バインディング要求が送信された候補ペアに応答が関連付けられます.その後、以下の手順に従って、役割の競合、失敗、または成功の手順に従って、応答が処理されます.

7.2.5.1.役割の競合

Binding要求が487（Role Conflict）エラー応答（7.3.1.1項）を生成し、ICEエージェントが要求にICE-CONTROLLED属性を含めた場合、エージェントはcontrolling roleに切り替えなければなりません.エージェントがリクエストにICE-CONTROLLING属性を含めた場合、エージェントはcontrolled roleに切り替えなければなりません.

エージェントがその役割を切り替えたら、エージェントは、チェックが487エラー応答を生成した候補ペアを、ペアが属するチェックリストに関連付けられたトリガーチェックキューに追加し、候補ペアの状態を待機に設定する必要があります.トリガーされた接続性チェックが後で実行されると、バインディング要求のICE-CONTROLLING / ICE-CONTROLLED属性は、エージェントの新しい役割を示します.エージェントは、タイブレーカーの値を変更する必要があります.注記：優先度の値はロールに依存するため、ロールの切り替えにはペアの優先度を再計算するエージェントが必要です（セクション6.1.2.3）.

注：役割の切り替えは、エージェントが候補ペアを指名する責任があるかどうか、およびエージェントがICEの終了後にピアとの更新された候補情報の交換を開始する責任があるかどうかにも影響します. 

7.2.5.2.失敗

このセクションでは、候補ペアの状態が「失敗」に設定されている場合について説明します. 

注記：接続性チェックエラーの結果として、ICEエージェントが候補ペアの状態を失敗に設定した場合、エージェントは同じ基盤を持つ他の候補ペアの状態を変更しません. 

7.2.5.2.1.非対称のトランスポートアドレス

ICEエージェントは、バインディング要求と応答の送信元と宛先のトランスポートアドレスが対称であることを確認する必要があります.つまり、応答のソースIPアドレスとポートは、バインディング要求が送信された宛先IPアドレスとポートに等しくなければならず、応答の宛先IPアドレスとポートはソースIPアドレスとポートに等しくなければなりません.バインディングリクエストの送信元.アドレスが対称でない場合、エージェントは候補ペアの状態を失敗に設定する必要があります.

7.2.5.2.2.ICMPエラー

ICEエージェントは、接続性チェックのためのICMPエラーの処理をサポートする場合があります.エージェントがICMPエラーの処理をサポートし、バインディング要求がハードICMPエラーを生成する場合、エージェントは候補ペアの状態を失敗に設定する必要があります.実装者は、ICMPエラーの処理方法と処理方法を決定する際に、ICMPエラーをサービス拒否（DoS）攻撃の方法として使用できることに注意する必要があります.

7.2.5.2.3.タイムアウト

バインド要求トランザクションがタイムアウトした場合、ICEエージェントは候補ペアの状態を失敗に設定する必要があります. 

7.2.5.2.4.回復不能なSTUN応答

バインド要求が回復不能な[RFC5389]のSTUNエラー応答を生成する場合、ICEエージェントは候補ペアの状態を[失敗]に設定する必要があります. 

7.2.5.3.成功

次の各基準に該当する場合、接続チェックは成功と見なされます. 

oバインド要求は成功応答を生成しました.そして

oバインディング要求と応答の送信元と宛先のトランスポートアドレスは対称です. 

チェックが成功したと見なされた場合、ICEエージェントは次のセクションで説明するアクションを（順番に）実行します. 

7.2.5.3.1.ピア反射候補の発見

ICEエージェントは、STUN応答からマッピングされたアドレスを確認する必要があります.トランスポートアドレスがエージェントが知っているローカル候補のいずれとも一致しない場合、マッピングアドレスは新しい候補、つまりピア反射候補を表します.他の候補者と同様に、対人再帰型候補者にはタイプ、ベース、優先度、および基盤があります.それらは次のように計算されます.

oタイプはピア再帰的です. 

oベースは、バインディングリクエストが送信された候補ペアのローカル候補です. 

o優先度は、バインディングリクエストのPRIORITY属性の値です. 

o基礎はセクション5.1.1.3で説明されています. 

ピア再帰候補は、データストリームのローカル候補のリストに追加されます.ユーザー名のフラグメントとパスワードは、そのデータストリームの他のすべてのローカル候補と同じです.

有効なペアはセクション7.2.5.3.2の手順により作成されるため、ICEエージェントはピア反射候補とリモート候補をペアにする必要はありません.エージェントがピア反射候補を、生成される有効なペアのペア以外のリモート候補とペアリングする場合、エージェントは、ピア反射候補を含むピアに更新された候補情報を提供することができます.これにより、ピア反射候補が他のすべてのリモート候補とペアになります.







7.2.5.3.2.有効なペアの構築

ICEエージェントは、ローカル候補が応答のマッピングアドレスに等しく、リモート候補が要求の送信先アドレスに等しい候補ペアを構築します.これは「有効なペア」と呼ばれます.

有効なペアは、接続チェックを生成したペア、チェックリストの別のペア、または現在チェックリストにないペアと等しい場合があります. 

エージェントは、「有効なリスト」と呼ばれる別のリストを維持します.チェックリストセットの各チェックリストに有効なリストがあります.有効なリストには有効なペアが含まれます.最初は、有効な各リストは空です.

有効なリスト内の各有効なペアには、「指定フラグ」と呼ばれるフラグがあります.有効なペアが有効なリストに追加されると、フラグ値は「false」に設定されます.

有効なペアは、次のように有効なリストに追加されます. 

1.有効なペアがチェックを生成したペアと等しい場合、ペアは、ペアが属するチェックリストに関連付けられた有効なリストに追加されます.または

2.有効なペアがチェックリストの別のペアと等しい場合、そのペアは、そのペアのチェックリストに関連付けられた有効なリストに追加されます.チェックを生成したペアは有効なリストに追加されません.または

3.有効なペアがチェックリストにない場合、エージェントはセクション6.1.2のアルゴリズムを使用して、各候補の優先度に基づいてペアの優先度を計算します.ローカル候補者の優先順位は、そのタイプによって異なります.タイプがピア再帰型でない限り、優先順位は、候補交換でその候補に対して通知された優先順位と等しくなります.タイプがピアリフレクティブである場合、エージェントは、完了したバインディングリクエストにエージェントが配置したPRIORITY属性と等しくなります.リモート候補の優先度は、ピアの候補情報から取得されます.候補がそこに表示されない場合、チェックは新しいリモート候補へのトリガーチェックです.その場合、優先度は、完了したチェックをトリガーしたバインディングリクエストのPRIORITY属性の値として使用されます.





注：有効なペアがチェックリストにないことは非常に一般的です.チェックリストには、ローカル候補が決して再帰的ではないペアがあることを思い出してください.これらのペアは、ローカル候補を再帰候補のベースに変換し、冗長な場合は剪定しました.バインディング要求への応答が到着すると、2つの間にNATがある場合、マッピングアドレスは再帰的になります.その場合、有効なペアには、チェックリスト内のどのペアとも一致しないローカル候補があります.

7.2.5.3.3.候補ペア状態の更新

ICEエージェントは、チェックを生成した候補ペアと構築された有効なペア（異なる場合があります）の両方の状態をSucceededに設定します. 

エージェントは、同じ基盤を持つすべてのチェックリスト内の他のすべての凍結候補ペアの状態を待機に設定する必要があります. 

注：特定のチェックリスト内で、同じ基盤を持つ候補ペアは通常、異なるコンポーネントID値を持ちます. 

7.2.5.3.4.ノミネートされたフラグの更新

制御エージェントがUSE-CANDIDATE属性が設定されたバインディング要求を送信し、ICEエージェントが要求に対する正常な応答を受信した場合、エージェントはペアの指定フラグをtrueに設定します.要求が失敗した場合（セクション7.2.5.2）、エージェントは有効なリストから候補ペアを削除し、候補ペアの状態を失敗に設定し、チェックリストの状態を失敗に設定する必要があります.

制御されたエージェントが、エージェントによって送信されたバインディング要求への正常な応答を受信し、そのバインディング要求が、USE-CANDIDATE属性セット（7.3.1.4節）で受信したバインディング要求によってトリガーされた場合、エージェントは、真のペア.トリガーされた要求が失敗した場合、エージェントは有効なリストから候補ペアを削除し、候補ペアの状態を失敗に設定し、チェックリストの状態を失敗に設定する必要があります.

指定されたフラグがデータストリームのコンポーネントに設定されると、そのコンポーネントのICE処理が終了します（セクション8）. 

7.2.5.4.チェックリスト状態の更新

接続チェックが成功したか失敗したかに関係なく、チェックの完了にはチェックリストの状態の更新が必要になる場合があります.チェックリストセット内の各チェックリストについて、すべての候補ペアが失敗または成功のいずれかの状態であり、チェックリストに関連付けられたデータストリームの各コンポーネントの有効なリストに有効なペアがない場合、チェックリストは失敗に設定されます.有効なリストの各コンポーネントに有効なペアがある場合、チェックリストの状態は成功に設定されます.

7.3.STUNサーバーの手順

ICEエージェント（ライトまたはフル）は、最新の候補者交換に含まれる各候補者のベースでバインディングリクエストを受信する準備をする必要があります. 

エージェントは、短期の認証メカニズム（つまり、MESSAGE-INTEGRITY属性）を使用して要求を認証し、メッセージの整合性チェックを実行する必要があります.同様に、応答には短期間のクレデンシャルメカニズムを使用する必要があります.エージェントは、コロンで区切られた2つの値で構成されている場合、ユーザー名が有効であると見なしなければなりません.最初の値は、進行中のセッションの候補交換でエージェントが生成したユーザー名フラグメントと等しくなります.ピアから候補を受信する前に、開始エージェントがバインディング要求を受信する可能性があります（実際には非常に可能性が高い）.これが発生した場合、エージェントはすぐに応答を生成する必要があります（セクション7.3.1.2で説明されているマッピングアドレスの計算を含む）.この時点で、エージェントは応答を生成するのに十分な情報を持っています.ピアからのパスワードは不要です.回答を受け取ったら、必要な残りの手順を続行する必要があります.つまり、完全な実装については、セクション7.3.1.3、7.3.1.4、および7.3.1.5を参照してください.回答の前に複数のSTUN要求を受信した場合、これにより、トリガーチェックキューにいくつかのペアがキューイングされることがあります.

エージェントは、ALTERNATE-SERVERメカニズムを利用してはならず、RFC 5389（RFC 3489のプロトコルで動作するために）で定義された後方互換性メカニズムをサポートしてはなりません.FINGERPRINTメカニズムを利用する必要があります.

エージェントがデータパケットでDSCPマーキング[RFC2475]を使用している場合、バインディングレスポンスに同じマーキングを適用する必要があります.同じことが、エンドポイントがデータパケットに適用する可能性のあるレイヤー2マーキングにも適用されます.

7.3.1. 完全な実装のための追加手順

このサブセクションでは、完全な実装がBinding要求を受け入れる場合に、完全な実装に適用可能な追加のサーバー手順を定義します. 

7.3.1.1. ロールの競合の検出と修復

ICEの特定の使用（3PCCなど）では、両方のICEエージェントが同じ役割を選択し、役割の競合が発生する場合があります.このセクションでは、ロールの競合を検出および修復するメカニズムについて説明します.使用法文書では、このメカニズムが必要かどうかを指定する必要があります.

エージェントは、ICE-CONTROLLINGまたはICE-CONTROLLED属性のいずれかのバインディング要求を検査する必要があります.次の手順に従う必要があります.

oエージェントが制御ロールにあり、リクエストにICE-CONTROLLING属性が存在する場合： 

*エージェントのタイブレーカー値がICE-CONTROLLING属性の内容以上の場合、エージェントはバインディングエラー応答を生成し、487（ロール競合）の値を持つERROR-CODE属性を含めますが、その役割は保持します. 

*エージェントのタイブレーカー値がICE-CONTROLLING属性の内容よりも小さい場合、エージェントは制御された役割に切り替わります. 

oエージェントが制御された役割にあり、リクエストにICE-CONTROLLED属性が存在する場合： 

*エージェントのタイブレーカー値がICE-CONTROLLED属性の内容以上の場合、エージェントは制御ロールに切り替わります. 

*エージェントのタイブレーカー値がICE-CONTROLLED属性の内容よりも小さい場合、エージェントはバインディングエラー応答を生成し、値487（ロール競合）のERROR-CODE属性を含めますが、その役割は保持します. 

oエージェントが制御ロールにあり、リクエストにICE-CONTROLLING属性が存在する場合、またはエージェントがコントロールロールにあり、リクエストにICE-CONTROLLED属性が存在する場合、競合はありません. 

役割の変更には、エージェントがペアの優先順位を再計算する必要があります（6.1.2.3項）.これらの優先順位は役割の関数であるためです.また、役割の変更は、エージェントが指定されたペアを選択し、ICEの終了時に更新された候補者情報との交換を開始する責任があるかどうかにも影響します.





エージェントが役割を変更した場合でも、エージェントがバインディング要求への正常な応答を生成した場合、セクション7.3.1の残りのサブセクションが続きます. 

7.3.1.2.マッピングされたアドレスの計算

リレーされた候補で受信された要求の場合、STUN処理（つまり、XOR-MAPPED-ADDRESS属性の生成）に使用されるソーストランスポートアドレスは、TURNサーバーから見たトランスポートアドレスです.バインディング要求がデータ表示を通じて配信された場合、そのソーストランスポートアドレスは、データ表示メッセージのXOR-PEER-ADDRESS属性に存在します.Binding要求がChannelDataメッセージを介して配信された場合、ソーストランスポートアドレスはチャネルにバインドされたものです.

7.3.1.3.ピア反射候補者の学習

要求の送信元トランスポートアドレスが既存のリモート候補と一致しない場合、新しいピア反射リモート候補を表します.この候補は次のように構成されています.

oタイプはピア再帰的です. 

o優先度は、バインディングリクエストのPRIORITY属性の値です. 

o基盤は、他のすべてのリモート候補者の基盤とは異なる任意の値です.後続の候補交換にこのピア再帰候補が含まれている場合、候補の実際の基盤が示されます.

oコンポーネントIDは、リクエストが送信されたローカル候補のコンポーネントIDです. 

この候補は、リモート候補のリストに追加されます.ただし、ICEエージェントはこの候補をローカル候補とペアリングしません.

7.3.1.4.  Triggered Checksトリガーチェック

次に、エージェントは、STUN要求を受信したトランスポートアドレス（エージェントから見える）をローカル候補に持つペアと、要求の送信元のトランスポートアドレス（peer-学習したばかりの再帰リモート候補者）.ローカル候補は、ホスト候補（要求がリレー経由で受信されなかった場合）またはリレー候補（リレー経由で受信された場合）のいずれかになります.ローカルの候補者がサーバー反射候補者になることはありません.両方の候補がエージェントに認識されているため、エージェントは優先度を取得し、候補ペアの優先度を計算できます.このペアは、チェックリストで検索されます.いくつかの結果のいずれかがあります.

oペアが既にチェックリストにある場合： 

    *そのペアの状態がSucceededの場合、それ以上何も行われません. 

    *そのペアの状態がIn-Progressの場合、エージェントは進行中のトランザクションをキャンセルします.キャンセルとは、エージェントが接続チェックトランザクションに関連付けられたバインディングリクエストを再送信せず、応答の欠如を失敗として扱わず、トランザクションタイムアウトの期間だけ応答を待つことを意味します.さらに、エージェントは、ペアの新しい接続性チェックをトリガーするために、チェックリストに関連付けられたトリガーされたチェックリストのペアをキューに入れ、ペアの状態を待機に設定する必要があります.新しい接続性チェックを作成すると、元の接続性チェックトランザクションに関連付けられたバインディングリクエストの再送信を待つことなく、進行中のペアをできるだけ早く検証できます.

    *そのペアの状態がWaiting、Frozen、またはFailedの場合、エージェントは、チェックリストに関連付けられたトリガー済みチェックリスト（まだ存在しない場合）でペアをキューに入れ、トリガーするためにペアの状態をWaitingに設定する必要がありますペアの新しい接続チェック.ペアの状態が[失敗]から[待機中]に変わると、関連するチェックリストの状態も変化する可能性があることに注意してください.

これらの手順は、両方のエージェントがNATの背後にある場合にICEの迅速な完了を促進するために行われます. 

oペアがまだチェックリストにない場合： 

    *ペアは、優先度に基づいてチェックリストに挿入されます. 

    *その状態は待機中に設定されます. 

    *ペアはトリガーチェックキューに入れられます. 

トリガーされたチェックが送信される場合、セクション7.2.4で説明されているように構築および処理されます.これらの手順では、エージェントがピアのトランスポートアドレス、ユーザー名フラグメント、およびパスワードを知っている必要があります.リモート候補のユーザー名フラグメントは、受信したバインディングリクエストのUSERNAMEのコロンの後の部分と同じです.そのユーザー名フラグメントを使用して、エージェントはピアから受信した候補（フォークの場合は複数ある可能性があります）を確認し、このユーザー名フラグメントを見つけることができます.次に、対応するパスワードが選択されます.

7.3.1.5.ノミネートされたフラグの更新

制御エージェントがUSE-CANDIDATE属性が設定されたバインディング要求を受信し、ICEエージェントが要求を受け入れる場合、次のアクションはセクション7.3.1.4で計算されたペアの状態に基づきます. 

oこのペアの状態が成功の場合、このペアによって以前に送信されたチェックが成功した応答を生成し、有効なペアを生成したことを意味します（セクション7.2.5.3.2）.エージェントは、有効なペアの指定フラグ値をtrueに設定します.

o受信したバインディングリクエストがトリガーされたチェックキュー（7.3.1.4項）にエンキューされる新しいチェックをトリガーした場合、チェックが送信され、成功した応答を生成し、有効なペアを生成すると、エージェントは指定されたペアのフラグをtrueにします.要求が失敗した場合（セクション7.2.5.2）、エージェントは有効なリストから候補ペアを削除し、候補ペアの状態を失敗に設定し、チェックリストの状態を失敗に設定する必要があります.

制御エージェントが制御エージェントからの要求を受け入れない場合、制御エージェントは適切なエラーコード応答（たとえば、400）[RFC5389]で指名要求を拒否しなければなりません. 

指定されたフラグがデータストリームのコンポーネントに設定されると、そのコンポーネントのICE処理を終了します.セクション8を参照してください.

7.3.2.Lite実装の追加手順

制御されたエージェントがUSE-CANDIDATE属性が設定されたバインディング要求を受信し、ICEエージェントが要求を受け入れる場合、エージェントは、候補が受信されたトランスポートアドレスをローカル候補に持ち、リモート候補が受信したリクエストの送信元トランスポートアドレスと同じです.この候補ペアには、任意の優先度が割り当てられ、関連付けられたチェックリストの有効なリストに配置されます.エージェントは、そのペアの指定フラグをtrueに設定します.

指定されたフラグがデータストリームのコンポーネントに設定されると、そのコンポーネントのICE処理を終了します.セクション8を参照してください.



8. ICE処理の終了 

このセクションでは、ICEエージェントがICEを完了する方法について説明します. 

8.1.完全な実装の手順

ICEの終了には、制御エージェントによるペアの指定と状態機械の更新が含まれます. 

8.1.1.指名ペア

指名する前に、制御エージェントは、何らかの停止基準が満たされるまで接続性チェックを続行させます.その後、評価基準に基づいて、制御エージェントは、指名のために有効なリスト内の有効なペアからペアを選択します.

制御エージェントが指名のために有効なペアを選択すると、この有効なペアを生成した接続チェックを繰り返します（チェックを生成したペアをトリガーチェックキューに入れて）、今回はUSE-CANDIDATE属性（セクション7.2） .5.3.4）.管理対象エージェントの手順については、セクション7.3.1.5で説明しています.

最終的に、指名が成功すると、制御エージェントと制御エージェントの両方が、データストリームの各コンポーネントの有効なリストに単一の指名ペアを持ちます.ICEエージェントがチェックリストの状態を完了に設定すると（データストリームの各コンポーネントに指定されたペアがある場合）、そのペアはそのエージェントの選択されたペアになり、そのコンポーネントのデータの送受信に使用されますデータストリーム.

エージェントがデータストリームの各コンポーネントに対して選択されたペアを生成できない場合、エージェントは、たとえばストリームを削除するなどして、他のエージェントに通知する適切なアクションを実行する必要があります.正確なアクションは、この仕様の範囲外です.

接続性チェックを停止し、指名するペアを選択するための基準は、この仕様の範囲外です.それらはローカル最適化の問題です.唯一の要件は、エージェントが最終的に1つだけの候補ペアを選択し、USE-CANDIDATE属性セットでそのペアのチェックを生成する必要があることです.

制御エージェントが候補ペアの指定に成功すると（セクション7.2.5.3.4）、エージェントはICEセッション内のデータストリームの同じコンポーネントに対して別のペアを指定してはなりません.これを行うには、ICEを再起動する必要があります.

この仕様をサポートしていない（つまり、RFC 5245に従って実装されている）制御エージェントは、複数の候補ペアを指定する場合があります.これは、RFC 5245で「積極的な指名」と呼ばれていました.複数の候補ペアが制御エージェントによって指名され、制御エージェントが複数の指名要求を受け入れる場合、エージェントは選択されたペアを生成し、最も高いペアを使用する必要があります優先度.

この仕様をサポートするエンドポイントによる「ice2」ICEオプション（セクション10）の使用は、RFC 5245に従って実装された制御エージェントが積極的な指名を使用することを防止することになっています. 

注：RFC 5245では、「積極的な指名」の使用により、ペアが最終的に選択される前に、エージェントがペアを連続的に指名して、ペアでデータを送信できるようになりました.この仕様では、指定なしで、有効なペアで常にデータを送信できます.したがって、積極的な指名の必要はもうありません.

8.1.2.チェックリストとICE状態の更新

制御エージェントと制御エージェントの両方で、データストリームのコンポーネントの候補ペアが指定されると、データストリームに関連付けられたチェックリスト内の他のペアに影響を与える可能性があります.また、チェックリストの状態に影響を与える可能性があります.

oデータストリームのコンポーネントの候補ペアが指定され、データストリームに関連付けられたチェックリストの状態が実行中になると、ICEエージェントは同じコンポーネントのすべての候補ペアをチェックリストおよびトリガーされたチェックキュー.ペアの状態が進行中の場合、エージェントは進行中のトランザクションをキャンセルします.キャンセルとは、エージェントが接続チェックトランザクションに関連付けられたバインディングリクエストを再送信せず、応答の欠如を失敗として扱わず、トランザクションタイムアウトの期間だけ応答を待つことを意味します.

oデータストリームの各コンポーネントの候補ペアが指定され、データストリームに関連付けられたチェックリストの状態が実行中になると、ICEエージェントはチェックリストの状態を完了に設定します. 

oデータストリームのコンポーネントの候補ペアが指定されると、エージェントは、指定されたペアと、関連付けられたチェックリスト内の残りの候補ペアに対して受信する可能性のあるバインディングリクエストに引き続き応答する必要があります 

データストリーム.セクション7.3.1.4で定義されているように、ペアの状態がSucceededである場合、エージェントはペアのバインディングリクエストを受信したときにトリガーチェックを生成しなくなります.

チェックリストセット内の各チェックリストの状態が完了したら、エージェントはICEセッションの状態を完了に設定します. 

チェックリストの状態が[失敗]の場合、ICEはチェックリストに関連付けられたデータストリームのプロセスを正常に完了できていません.正しい動作は、チェックリストセット内のチェックリストの状態によって異なります.制御エージェントが、失敗したチェックリストに関連付けられたデータストリームなしでセッションを続行したい場合、および実行モードまたは完了モードで1つ以上のチェックリストがまだある場合、エージェントはICE処理を続行できます.エージェントは、失敗したデータストリームを削除するための適切なアクションを実行する必要があります.制御エージェントがセッションの継続を望まず、セッションを終了しなければならない場合、ICEセッションの状態は「失敗」に設定されます.

チェックリストセット内の各チェックリストの状態が失敗の場合、ICEセッションの状態は失敗に設定されます.制御エージェントがデータストリームなしでセッションを継続する場合を除き、セッションを終了する必要があります.

8.2.Lite実装の手順

ICEが終了すると、ライトICEエージェントは、セクション8.3で説明されているように、ICEによって使用されなかったホスト候補を解放できます. 

ピアが完全なエージェントである場合、Liteエージェントが候補ペアの指名要求を受け入れると、Liteエージェントはペアが指名されたと見なします.データストリームの各コンポーネントのペアが指定されると、そのペアがデータストリームのコンポーネントの選択されたペアになります.ライトエージェントがすべてのデータストリームのすべてのコンポーネントに対して選択したペアを生成すると、ICEセッションの状態はCompletedに設定されます.

ピアがライトエージェントである場合、エージェントはローカル候補と同じデータストリームであり、同じコンポーネント、トランスポートプロトコル、およびIPアドレスファミリを持つリモート候補をペアにします.各データストリームの各コンポーネントについて、候補ペアが1つしかない場合、そのペアは有効なリストに追加されます.複数のペアがある場合、エージェントがRFC 6724 [RFC6724]の手順に従ってペアを選択し、有効なリストに追加することが推奨されます.







すべてのデータストリームのすべてのコンポーネントに1つのペアがある場合、ICE処理の状態は完了です.そうでない場合、制御エージェントは、更新された候補リストを送信して、異なる候補ペアを選択する異なるエージェントを調整する必要があります.ICE処理は、更新された候補者の交換が完了した後でのみ完了します.

8.3.候補者の解放

8.3.1.完全な実装手順

このセクションのルールは、選択された候補にならなかった（つまり、選択されたペアに関連付けられていない）候補のチェックをエージェントが送信または受信するのを安全にいつ終了できるかを説明します. 

チェックリストが完了状態に達すると、エージェントはさらに3秒間待機する必要があります（選択された候補になった候補以外のすべてのローカル候補に対するチェックへの応答またはトリガーチェックの生成を停止する必要があります）.特定のローカル候補を使用してすべてのICEセッションが終了すると（候補は、分岐シナリオなどで複数のICEセッションで使用される場合があります）、エージェントはその候補を解放できます.3秒間の遅延は、積極的な指名が使用される場合を処理し、選択されたペアは、ICEの完了後すぐに変更できます.

サーバー反射候補の解放は決して明示的ではありません.それはキープアライブの欠如によって起こります.

8.3.2.Liteの実装手順

ライトの実装では、ICE処理がそれらの候補を使用するすべてのICEセッションでCompleted状態に達するとすぐに、選択された候補にならなかった候補を解放できます. 

9. ICEの再起動 

ICEエージェントは、既存のデータストリームのICEを再起動できます.ICEを再起動すると、エージェントの役割を除くデータストリームの以前のすべての状態がフラッシュされます.ICEの再起動とまったく新しいデータセッションの唯一の違いは、再起動中、既存のデータセッションを使用してデータを送信し続けることができ、新しいデータセッションでは常にロールを決定する必要があることです.











以下のアクションは、ICE再始動を使用することによってのみ達成できます（エージェントは、ICE再始動を使用してそうする必要があります）. 

oデータストリームの宛先を変更します. 

o簡易実装から完全実装に変更します. 

o完全実装から簡易実装に変更します. 

ICEを再起動するには、エージェントは再起動するデータストリームのパスワードとユーザー名フラグメントの両方を変更する必要があります. 

ICEが再起動されると、新しいICEセッションの候補セットには、現在のICEセッションで使用される候補の一部、なし、またはすべてが含まれる場合があります. 

セクション6.1.1で説明したように、ロールの再決定を必要とする特定の基準が満たされない限り、エージェントはICEの再起動として一部としてロールを再決定してはなりません. 

10. ICEオプション 

このセクションでは、新しいICEオプション「ice2」を定義します.ICEエージェントが候補交換に「ice2」を含む場合、ICEオプションは、この仕様に準拠していることを示します.たとえば、エージェントはRFC 5245で定義された積極的な指名手順を使用しません.さらに、RFC 5245に準拠するピアも、未知を受信するピアに対してRFC 5245のセクション14で要求されるように積極的な指名を使用しません. ICEオプション.

この仕様に準拠するエージェントは、「ice2」オプションを使用して、準拠についてピアに通知する必要があります. 

注：「ice2」オプションのエンコード、およびピアにそれを運ぶために使用されるメッセージは、プロトコル固有です.SDP [RFC4566]のエンコーディングは[ICE-SIP-SDP]で定義されています.

11.キープアライブ 

すべてのエンドポイントは、各データセッションに対してキープアライブを送信する必要があります.これらのキープアライブは、データセッションのためにNATバインディングを有効に保つ目的に役立ちます.キープアライブは、ピアでサポートされている形式を使用して送信する必要があります.ICEエンドポイントは、UDPストリームのSTUNベースのキープアライブを許可するため、ICEエージェントが完全なICE実装であり、ICE（ライトまたはフル）をサポートするピアと通信している場合は、STUNキープアライブを使用する必要があります.



エージェントは、最後のTr秒間にそのペアでパケットが送信されなかった場合、データの送信に使用される各候補ペアでキープアライブを送信する必要があります.エージェントは、15秒のTr値を使用する必要があります.エージェントは、より大きな値を使用できますが、15秒未満の値を使用してはなりません.

データストリームに対して選択されたペアが生成されると、キープアライブはそれらのペアでのみ送信されます. 

データストリームが削除された場合、エージェントはデータストリームでのキープアライブの送信を停止する必要があります.ICEセッションが終了した場合、エージェントはすべてのデータストリームでキープアライブの送信を停止する必要があります.

エージェントは、たとえば、構成またはネットワーク/ NAT特性に基づいて、Trに別の値を使用する場合があります.たとえば、エージェントが、介在するNATのバインディングライフタイムを動的に検出する方法を持っている場合、その値を使用してTrを決定できます.より制御されたネットワーク環境でICEを展開する管理者は、Trを環境内で可能な限り長い期間に設定する必要があります.

キープアライブにSTUNが使用されている場合、STUNバインディング表示が使用されます[RFC5389].指示は認証メカニズムを利用してはなりません.逆多重化を支援するためにFINGERPRINT属性を含むべきであるが、他の属性を含むべきではない.NATバインディングを維持するためだけに使用されます.バインディング表示は、データに使用されている同じローカルおよびリモート候補を使用して送信されます.キープアライブにはバインディング指示が使用されますが、接続チェックも受信するようにエージェントを準備する必要があります.接続性チェックが受信されると、[RFC5389]で説明されているように応答が生成されますが、それ以外の場合はICE処理に影響はありません.

エージェントはデフォルトでSTUNキープアライブを使用する必要があります.個々のICEの使用法とICE拡張機能は、使用法/拡張機能固有のキープアライブを指定できます（MAY）.

12.データ処理 

12.1.データを送信する

ICEエージェントは、選択されたペアがデータストリーム用に生成される前に、有効なペアでデータを送信できます. 

データストリームに対して選択されたペアが生成されると、エージェントはそれらのペアでのみデータを送信する必要があります. 

エージェントは、ローカル候補のベースからリモート候補にデータを送信します.ローカル中継候補の場合、データは[RFC5766]で定義されている手順を使用して、ベース（TURNサーバーにある）を介して転送されます.ローカル候補者が中継候補者である場合、エージェントがリモート候補者に向けてTURNサーバー上にチャネルを作成することが推奨されます.これは、[RFC5766]のセクション11で定義されているチャネル作成の手順を使用して行われます.

データストリームのコンポーネント用に選択されたペアは次のとおりです. 

oそのデータストリームのチェックリストの状態が実行中で、ICEの再起動のためにそのコンポーネントに対して以前に選択されたペアがない場合は空 

oそのデータストリームのチェックリストの状態が実行中の場合、ICEの再起動によりそのコンポーネントの以前に選択されたペアがあった場合、データストリームのコンポーネントに対して以前に選択されたペアに等しい 

エージェントがデータストリームに関連付けられた各コンポーネントに対して選択されたペアを生成できない場合、エージェントはそのデータストリームに関連付けられたコンポーネントのデータの送信を継続してはなりません. 

12.1.1.Lite実装の手順

ライトインプリメンテーションは、そのデータストリームの各コンポーネントの候補ペアを含む有効なリストがあるまで、データを送信してはなりません.それが起こると、ICEエージェントはデータパケットの送信を開始できます.そのために、ペアのリモート候補にデータを送信し（パケットの宛先アドレスとポートをそのリモート候補に等しく設定します）、データ送信に使用される候補ペアに関連付けられたベースから送信します.リレーされた候補者の場合、データはエージェントから送信され、[RFC5766]で定義された手順を使用して、ベース（TURNサーバーにある）を介して転送されます.

12.2.データ受信中

ICEエージェントは有効な候補ペアを使用してのみデータを送信できますが（選択されたペアが生成されると、選択されたペアでのみ）、ICE実装はデフォルトで、最も多く提供された候補のいずれかでデータを受信するように準備する必要がありますピアとの最近の候補者交換.ICEの使用法では、選択したペアがデータストリーム用に生成されるまでデータが送信されないように定義するなど、これとは異なるルールを定義できます.

エージェントが特定のRTP / RTCPデータストリームの新しい送信元または宛先IPアドレスを持つRTPパケットを受信した場合、エージェントがジッタバッファを再調整することが推奨されます. 



RFC 3550 [RFC3550]のセクション8.2では、同期ソース（SSRC）の衝突とループを検出するアルゴリズムについて説明しています.これらのアルゴリズムは、部分的には、同じSSRCで異なるソーストランスポートアドレスを見ることに基づいています.ただし、ICEを使用する場合、データストリームが候補間で切り替わるときにこのような変更が発生することがあります.エージェントは、メディアデータ送信を進めるSTUN交換の結果として、データストリームが同じピアからのものであることを判別できます.したがって、ソーストランスポートアドレスに変更があるが、メディアデータパケットが同じピアエージェントから送信されている場合、これをSSRCコリジョンとして扱わないでください.

13.拡張性に関する考慮事項 

この仕様では、セッション内の両方のICEエージェントがデータ用に選択された候補ペアのセットに到達するための調整方法について、非常に具体的な選択を行います.タイマーの調整などの単純な変更であれ、優先アルゴリズムの改良などの大きな変更であれ、将来の仕様ではこれらのアルゴリズムを変更することが予想されます.このような変更が行われる場合、セッション内の2つのエージェント間の相互運用性を提供することが重要です.

まず、ICEはICEオプションの概念を提供します.ICEの各拡張または変更は、ICEオプションに関連付けられています.エージェントがそのような拡張または変更をサポートする場合、候補交換の一部としてピアエージェントにICEオプションを提供します.

相互運用性を実現する際の複雑さの1つは、ICEが両方のエージェントで実行される分散アルゴリズムに依存して、合意された候補ペアのセットに収束することです.2つのエージェントが異なるアルゴリズムを実行している場合、同じ候補ペアでの収束を保証することは困難です.セクション8で説明した指名手順は、選択アルゴリズムを制御エージェントに完全に委任することにより、緊密な調整の必要性を排除します.ICEは、両方のエージェントが異なるペア優先順位付けアルゴリズムを使用する場合でも完全に収束します このような収束の鍵の1つは、指定されたペアが両方のエージェントによって検証されることを保証するトリガーチェックです.

ICEは、RTPを超える他のデータストリームや、UDPを超えるトランスポートプロトコルにも拡張できます.非RTPデータストリーム用のICEの拡張機能では、使用するコンポーネントの数を指定し、それらにコンポーネントIDを割り当てる必要があります.最も重要なコンポーネントIDは1から始まります.新しいトランスポートプロトコルの仕様では、ICE処理のさまざまな手順がUDPとどのように異なるかを定義する必要があります.







14. TaおよびRTOの設定 

14.1.全般

ICE収集フェーズ（セクション5.1.1）およびICEが接続性チェックを実行している間（セクション7）、ICEエージェントはSTUNおよびTURNトランザクションをトリガーします.これらのトランザクションはTaで示されるレートで調整され、各トランザクションの再送信間隔は、STUNトランザクション（RTO）[RFC5389]の再送信タイマーに基づいて計算されます.

このセクションでは、ICE収集フェーズ中およびICEが接続性チェックを実行している間のTaおよびRTO値の計算方法について説明します. 

注：以前は、RFC 5245では、リアルタイムデータストリーム（RTPなど）にICEが使用されたかどうかに応じて、TaとRTOの計算に異なる式が定義されていました. 

以下の式により、エージェントは、再送信を実行する前に、接続チェックごとに最初のパケットを送信するという動作になります.これは、RTO（再送信間隔を表す）の式で見ることができます.これらの式は、実行されるチェックの数であるNに比例します.この結果、ICEは一定の速度を維持しますが、パケット損失の影響を受けやすくなります.接続性チェックで最初の単一パケットが失われると、そのペアの検証に時間がかかる可能性が高くなり、代わりに、優先度の低いチェック（ただし、パケット損失がなかったもの）の可能性が高くなります最初に完了します.これにより、ICEのパフォーマンスが最適化されず、優先度の高いペアよりも優先度の低いペアが選択されます.

14.2.タ

ICEエージェントは、デフォルトのTa値である50ミリ秒を使用する必要がありますが、関連データの特性に基づいて別の値を使用する場合があります. 

エージェントがデフォルト値以外のTa値を使用したい場合、エージェントはICEセッションの確立中にピアに提案された値を示さなければなりません.両方のエージェントは、提案された値のより高い値を使用する必要があります.エージェントが値を提案しない場合、どちらの値が高いかを比較するときにデフォルト値がそのエージェントに使用されます.

各エージェントに選択されたTa値に関係なく、すべてのエージェントからのすべてのトランザクションの組み合わせ（特定の実装が複数の同時エージェントを実行する場合）は、複数回送信することはできません. 

5 msごと（すべてのエージェントをペーシングするためのグローバルTa値が1つあるかのように）.ICEで5ミリ秒の値を使用する背景については、付録B.1を参照してください.

注：付録Cは、さまざまなTa値を使用した、必要な帯域幅の例を示しています. 

14.3.RTO

ICE収集フェーズでは、ICEエージェントは次の式を使用してRTO値を計算する必要があります. 

RTO = MAX（500ミリ秒、Ta *（Num-Of-Cands）） 

Num-Of-Cands：サーバー反射型およびリレー候補の数 

接続性チェックの場合、エージェントは次の式を使用してRTO値を計算する必要があります. 

RTO = MAX（500ms、Ta * N *（Num-Waiting + Num-In-Progress）） 

N：実行される接続チェックの総数. 

Num-Waiting：待機状態に設定されたチェックリスト内のチェックの数. 

Num-In-Progress：In-Progress状態で設定されたチェックリスト内のチェックの数. 

待機中および進行中の状態のチェック数が変わると、RTOはトランザクションごとに異なることに注意してください. 



エージェントは、上記以外のメカニズムを使用してRTO値を計算できます.エージェントは、500ミリ秒未満のRTO値を使用してはなりません.

15.例 

このセクションでは、2つのICEの例を示します.1つはIPv4アドレスを使用し、もう1つはIPv6アドレスを使用します. 

理解を容易にするため、トランスポートアドレスはニーモニック名を持つ変数を使用してリストされます.名前の形式はentity-type-seqnoです.「entity」は、トランスポートアドレスが存在するIPアドレスを持つエンティティを指し、「L」、「R」、「STUN」、または「NAT」のいずれかです.タイプは、パブリックのトランスポートアドレスの場合は「PUB」、プライベートのトランスポートアドレスの場合は「PRIV」です[RFC1918].最後に、seq-noは、特定のエンティティの同じタイプのトランスポートアドレスごとに異なるシーケンス番号です.各変数には、それぞれvarname.IPとvarname.PORTで示されるIPアドレスとポートがあります.ここで、varnameは変数の名前です.

コールフロー自体では、STUNメッセージにはいくつかの属性が付けられています.「S =」属性は、メッセージの送信元トランスポートアドレスを示します.「D =」属性は、メッセージの宛先トランスポートアドレスを示します.「MA =」属性は、STUNバインディング応答メッセージで使用され、マッピングされたアドレスを参照します.「USE-CAND」は、USE-CANDIDATE属性の存在を意味します.

コールフローの例では、STUN認証操作を省略し、2つの完全な実装間の単一のデータストリームに焦点を当てています. 

15.1.IPv4アドレスの例

次の例では、図7に示すトポロジを使用しています. 



+ ------- + | STUN | |サーバー| + ------- + | + --------------------- + | | | インターネット| | | + --------------------- + | | | | + --------- + | | NAT | | + --------- + | | | | | + ----- + + ----- + | L | | R | + ----- + + ----- +

図7：トポロジの例 











この例では、ICEエージェントLおよびRは完全なICE実装です.両方のエージェントには単一のIPv4アドレスがあり、両方とも同じSTUNサーバーで構成されています.NATには、エンドポイントに依存しないマッピングプロパティとアドレスに依存するフィルタリングプロパティがあります.ICEエージェント、STUNサーバー、およびNATのIPアドレスを以下に示します.

エンティティIPアドレスニーモニック名--------------------------------------------- ----- ICEエージェントL：10.0.1.1 L-PRIV-1 ICEエージェントR：192.0.2.1 R-PUB-1 STUNサーバー：192.0.2.2 STUN-PUB-1 NAT（パブリック）：192.0.2.3 NAT- PUB-1



L NAT STUN R | STUNアロケート.| | | |（1）STUN Req | | | | S = $ L-PRIV-1 | | | | D = $ STUN-PUB-1 | | | | -------------> | | | | |（2）STUNリクエスト| | | | S = $ NAT-PUB-1 | | | | D = $ STUN-PUB-1 | | | | -------------> | | | |（3）STUN Res | | | | S = $ STUN-PUB-1 | | | | D = $ NAT-PUB-1 | | | | MA = $ NAT-PUB-1 | | | | < ------------- | | |（4）STUN Res | | | | S = $ STUN-PUB-1 | | | | D = $ L-PRIV-1 | | | | MA = $ NAT-PUB-1 | | | | <------------- | | | |（5）Lの候補者情報| | | -------------------------------------------> | | | | | スタン| | | | 割り当て.| | |（6）STUN Req | | | | S = $ R-PUB-1 | | | | D = $ STUN-PUB-1 | | | | < ------------- | | | |（7）STUN Res | | | | S = $ STUN-PUB-1 | | | | D = $ R-PUB-1 | | | | MA = $ R-PUB-1 | | | | -------------> | |（8）Rの候補者情報| | | <------------------------------------------- | | | （9）バインド要求|開始| | S = $ R-PUB-1 |接続性| | D = $ L-PRIV-1 |チェック| | <------------------- | | | 落とした| |（10）バインド要求| | | | S = $ L-PRIV-1 | | | | D = $ R-PUB-1 | | | | -------------> | | | | |（11）バインド要求| | | | S = $ NAT-PUB-1 | | | | D = $ R-PUB-1 | | | | ----------------------------> | | |（12）バインド解像度| | | | S = $ R-PUB-1 | | | | D = $ NAT-PUB-1 | | | | MA = $ NAT-PUB-1 | | | | <---------------------------- | |（13）バインド解像度| | | | S = $ R-PUB-1 | | | | D = $ L-PRIV-1 | | | | MA = $ NAT-PUB-1 | | | | <------------- | | | |データ| | | | =========================================> | | | | | | |（14）バインド要求| | | | S = $ R-PUB-1 | | | | D = $ NAT-PUB-1 | | | | <---------------------------- | |（15）バインド要求| | | | S = $ R-PUB-1 | | | | D = $ L-PRIV-1 | | | | <------------- | | | |（16）バインド解像度| | | | S = $ L-PRIV-1 | | | | D = $ R-PUB-1 | | | | MA = $ R-PUB-1 | | | | -------------> | | | | |（17）バインド解像度| | | | S = $ NAT-PUB-1 | | | | D = $ R-PUB-1 | | | | MA = $ R-PUB-1 | | | | ----------------------------> | |データ| | | | <========================================= | | | | | ....... | | | | |（18）バインド要求| | | | S = $ L-PRIV-1 | | | | D = $ R-PUB-1 | | | | USE-CAND | | | | -------------> | | | | |（19）バインド要求| | | | S = $ NAT-PUB-1 | | | | D = $ R-PUB-1 | | | | USE-CAND | | | | ----------------------------> | | |（20）バインド解像度| | | | S = $ R-PUB-1 | | | | D = $ NAT-PUB-1 | | | | MA = $ NAT-PUB-1 | | | | <---------------------------- | |（21）バインド解像度| | | | S = $ R-PUB-1 | | | | D = $ L-PRIV-1 | | | | MA = $ NAT-PUB-1 | | | | <------------- | | | | | | | ------------- | | | | | | | ------------- | | | | | | | | | |（20）バインド解像度| | | | S = $ R-PUB-1 | | | | D = $ NAT-PUB-1 | | | | MA = $ NAT-PUB-1 | | | | <---------------------------- | |（21）バインド解像度| | | | S = $ R-PUB-1 | | | | D = $ L-PRIV-1 | | | | MA = $ NAT-PUB-1 | | | | <------------- | | | | | | | | | |（20）バインド解像度| | | | S = $ R-PUB-1 | | | | D = $ NAT-PUB-1 | | | | MA = $ NAT-PUB-1 | | | | <---------------------------- | |（21）バインド解像度| | | | S = $ R-PUB-1 | | | | D = $ L-PRIV-1 | | | | MA = $ NAT-PUB-1 | | | | <------------- | | | | | | | ------------- | | | | | | | ------------- | | | | | | |

図8：フローの例 

メッセージ1-4：エージェントLは、ローカルIPアドレスからホスト候補を収集し、そこからSTUNバインディング要求をSTUNサーバーに送信します.要求はNATバインディングを作成します.バインディングのNATパブリックIPアドレスは、エージェントLのサーバー反射候補になります.

メッセージ5：エージェントLは、ICEの使用に関連付けられたシグナリングプロトコルを使用して、ローカル候補情報をエージェントRに送信します. 

メッセージ6〜7：エージェントRは、ローカルIPアドレスからホスト候補を収集し、そこからSTUNバインディング要求をSTUNサーバーに送信します.エージェントRはNATの背後にないため、Rのサーバー反射候補はホスト候補と同一になります.

メッセージ8：エージェントRは、ICE使用に関連付けられたシグナリングプロトコルを使用して、ローカル候補情報をエージェントLに送信します. 

両方のエージェントが完全なICE実装であるため、開始エージェント（エージェントL）が制御エージェントになります. 





エージェントLとRは両方とも候補をペアにします.両方のエージェントには、最初に2つのペアがあります.ただし、エージェントLは、そのサーバー反射候補を含むペアをプルーニングし、1つ（L1）のみを生成します.エージェントLでは、このペアには$ L_PRIV_1のローカル候補と$ R_PUB_1のリモート候補があります.エージェントRには、2つのペアがあります.最も優先度の高いペア（R1）にはローカル候補$ R_PUB_1とリモート候補$ L_PRIV_1があり、2番目のペア（R2）にはローカル候補$ R_PUB_1とリモート候補$ NAT_PUB_1があります.ペアを以下に示します（ペア番号は参照のみを目的としています）.

ペアENTITYローカルリモートペア＃有効------------------------------------------- ----------------------- ICEエージェントL：L_PRIV_1 R_PUB_1 L1 

ICEエージェントR：R_PUB_1 L_PRIV_1 R1 R_PUB_1 NAT_PUB_1 R2 

メッセージ9：エージェントRはペア＃2の接続チェックを開始します.ペアのリモート候補はエージェントLのプライベートアドレスであるため、要求はRからLにルーティングできず、ネットワークによってドロップされるため、チェックは成功しません.

メッセージ10-13：エージェントLはペアL1の接続性チェックを開始します.チェックは成功し、Lは新しいペア（L2）を作成します.新しいペアのローカル候補は$ NAT_PUB_1で、リモート候補は$ R_PUB_1です.ペア（L2）はエージェントLの有効なリストに追加されます.エージェントLは、必要に応じてペア（L2）でデータを送受信できるようになりました.

ペアENTITYローカルリモートペア＃有効------------------------------------------- ----------------------- ICEエージェントL：L_PRIV_1 R_PUB_1 L1 NAT_PUB_1 R_PUB_1 L2 X 

ICEエージェントR：R_PUB_1 L_PRIV_1 R1 R_PUB_1 NAT_PUB_1 R2 

メッセージ14〜17：エージェントRは、エージェントLからバインド要求を受信すると（メッセージ11）、トリガーされた接続性チェックを開始します.このペアは、エージェントRの既存のペア（R2）のいずれかと一致します.チェックは成功し、ペア（R2）はエージェントRの有効なリストに追加されます.エージェントRは、必要に応じてペア（R2）でデータを送受信できるようになりました.









ペアENTITYローカルリモートペア＃有効------------------------------------------- ----------------------- ICEエージェントL：L_PRIV_1 R_PUB_1 L1 NAT_PUB_1 R_PUB_1 L2 X 

ICEエージェントR：R_PUB_1 L_PRIV_1 R1 R_PUB_1 NAT_PUB_1 R2 X 

メッセージ18〜21：ある時点で、制御エージェント（エージェントL）が有効なリストにペア（L2）を指定することを決定します.ペア（L2）の接続性チェックを実行し、バインド要求にUSE-CANDIDATE属性を含めます.チェックが成功すると、エージェントLはペアの指定フラグ値（L2）を「true」に設定し、エージェントRは一致するペアの指定フラグ値（R2）を「true」に設定します.ストリームに関連付けられたコンポーネントがなくなるため、指定されたペアが選択されたペアになります.その結果、このストリームの処理は完了状態に移行します.ICEプロセスも完了状態に移行します.

15.2.IPv6アドレスの例

以下の例では、図9に示すトポロジを使用しています. 

+ ------- + | STUN | |サーバー| + ------- + | + --------------------- + | | | インターネット| | | + --------------------- + | | | | | | | | | | | | | | + ----- + + ----- + | L | | R | + ----- + + ----- +

図9：トポロジの例 



この例では、ICEエージェントLおよびRは完全なICE実装です.両方のエージェントには単一のIPv6アドレスがあり、両方とも同じSTUNサーバーで構成されています.ICEエージェントとSTUNサーバーのIPアドレスを以下に示します.

ENTITY IPアドレスのニーモニック名--------------------------------------------- ----- ICEエージェントL：2001：db8 :: 3 L-PUB-1 ICEエージェントR：2001：db8 :: 5 R-PUB-1 STUNサーバー：2001：db8 :: 9 STUN-PUB-1



L STUN R | STUNアロケート.| | |（1）STUN Req | | | S = $ L-PUB-1 | | | D = $ STUN-PUB-1 | | | ----------------------------> | | |（2）STUN Res | | | S = $ STUN-PUB-1 | | | D = $ L-PUB-1 | | | MA = $ L-PUB-1 | | | <---------------------------- | | |（3）Lの候補者情報| | | -------------------------------------------> | | | | スタン| | | 割り当て.| |（4）STUN Req | | | S = $ R-PUB-1 | | | D = $ STUN-PUB-1 | | | <------------- | | |（5）STUN Res | | | S = $ STUN-PUB-1 | | | D = $ R-PUB-1 | | | MA = $ R-PUB-1 | | | -------------> | |（6）Rの候補者情報| | | <------------------------------------------- | |（7）バインド要求| | | S = $ L-PUB-1 | | | D = $ R-PUB-1 | | | -------------------------------------------> | |（8）バインド解像度| | | S = $ R-PUB-1 | | | D = $ L-PUB-1 | | | MA = $ L-PUB-1 | | | <------------------------------------------- |

|データ| | | =========================================> | | | | |（9）バインド要求| | | S = $ R-PUB-1 | | | D = $ L-PUB-1 | | | <------------------------------------------- | |（10）バインド解像度| | | S = $ L-PUB-1 | | | D = $ R-PUB-1 | | | MA = $ R-PUB-1 | | | -------------------------------------------> | |データ| | | <========================================= | | | | ....... | | | |（11）バインド要求| | | S = $ L-PUB-1 | | | D = $ R-PUB-1 | | | USE-CAND | | | -------------------------------------------> | |（12）バインド解像度| | | S = $ R-PUB-1 | | | D = $ L-PUB-1 | | | MA = $ L-PUB-1 | | | <------------------------------------------- | | | | | | |（12）バインド解像度| | | S = $ R-PUB-1 | | | D = $ L-PUB-1 | | | MA = $ L-PUB-1 | | | <------------------------------------------- | | | | | | |（12）バインド解像度| | | S = $ R-PUB-1 | | | D = $ L-PUB-1 | | | MA = $ L-PUB-1 | | | <------------------------------------------- | | | | |

図10：フローの例 

メッセージ1-2：エージェントLは、ローカルIPアドレスからホスト候補を収集し、そこからSTUNバインディング要求をSTUNサーバーに送信します.エージェントLはNATの背後にないため、Lのサーバー反射候補はホスト候補と同一になります.

メッセージ3：エージェントLは、ICEの使用に関連付けられたシグナリングプロトコルを使用して、ローカルの候補情報をエージェントRに送信します. 

メッセージ4-5：エージェントRは、ローカルIPアドレスからホスト候補を収集し、そこからSTUNバインディング要求をSTUNサーバーに送信します.エージェントRはNATの背後にないため、Rのサーバー反射候補はホスト候補と同一になります.

メッセージ6：エージェントRは、ICEの使用に関連付けられたシグナリングプロトコルを使用して、ローカル候補情報をエージェントLに送信します. 



両方のエージェントが完全なICE実装であるため、開始エージェント（エージェントL）が制御エージェントになります. 

エージェントLとRは両方とも候補をペアにします.両方のエージェントには、最初にそれぞれ1つのペアがあります.エージェントLでは、ペア（L1）には$ L_PUB_1のローカル候補と$ R_PUB_1のリモート候補があります.エージェントRでは、ペア（R1）のローカル候補は$ R_PUB_1で、リモート候補は$ L_PUB_1です.ペアを以下に示します（ペア番号は参照のみを目的としています）.

ペアENTITYローカルリモートペア＃有効------------------------------------------- ----------------------- ICEエージェントL：L_PUB_1 R_PUB_1 L1 

ICEエージェントR：R_PUB_1 L_PUB_1 R1 

メッセージ7〜8：エージェントLは、ペアL1の接続チェックを開始します.チェックは成功し、ペア（L1）はエージェントLの有効なリストに追加されます.エージェントLは、必要に応じてペア（L1）でデータを送受信できるようになりました.

ペアENTITYローカルリモートペア＃有効------------------------------------------- ----------------------- ICEエージェントL：L_PUB_1 R_PUB_1 L1 X 

ICEエージェントR：R_PUB_1 L_PUB_1 R1 

メッセージ9〜10：エージェントRがエージェントLからバインディング要求を受信すると（メッセージ7）、トリガーされた接続性チェックを開始します.このペアは、エージェントRの既存のペア（R1）と一致します.チェックは成功し、ペア（R1）はエージェントRの有効なリストに追加されます.エージェントRは、必要に応じてペア（R1）でデータを送受信できるようになりました.

ペアENTITYローカルリモートペア＃有効------------------------------------------- ----------------------- ICEエージェントL：L_PUB_1 R_PUB_1 L1 X 

ICEエージェントR：R_PUB_1 L_PUB_1 R1 X 

メッセージ11〜12：ある時点で、制御エージェント（エージェントL）が有効なリストにペア（L1）を指定することを決定します.ペア（L1）の接続性チェックを実行し、バインディング要求にUSE-CANDIDATE属性を含めます.チェックが成功すると、エージェントLはペアの指定フラグ値（L1）を「true」に設定し、エージェントRは一致するペアの指定フラグ値（R1）を「true」に設定します.ストリームに関連付けられたコンポーネントがなくなるため、指定されたペアが選択されたペアになります.その結果、このストリームの処理は完了状態に移行します.ICEプロセスも完了状態に移行します.

16. STUN拡張機能 

16.1.属性

この仕様では、PRIORITY、USE-CANDIDATE、ICE-CONTROLLED、およびICE-CONTROLLINGの4つのSTUN属性を定義しています. 

PRIORITY属性は、このチェックによって発見された場合、ピア反射候補に関連付けられる優先度を示します.32ビットの符号なし整数であり、属性値は0x0024です.

USE-CANDIDATE属性は、このチェックの結果の候補ペアがデータの送信に使用されることを示します.属性にはコンテンツがありません（属性の長さフィールドはゼロです）.フラグとして機能します.属性値は0x0025です.

ICE-CONTROLLED属性は、バインディング要求に存在します.この属性は、クライアントが現在制御されている役割にあるとクライアントが信じていることを示します.属性の内容は、ネットワークバイト順の64ビット符号なし整数であり、乱数が含まれています.この番号は、「タイブレーカー値」と呼ばれる場合に、役割の競合を解決するために使用されます.ICEエージェントは、487応答を受信した場合を除き、ICEセッション内のすべてのバインディング要求、すべてのストリーム、同じ番号を使用する必要があります.その場合、番号を変更する必要があります（7.2.5.1項）.エージェントは、ICEの再起動時に番号を変更できます.

ICE-CONTROLLING属性は、バインディングリクエストに存在します.この属性は、クライアントが現在制御ロールにいるとクライアントが信じていることを示します.属性の内容は、ネットワークバイト順の64ビット符号なし整数であり、乱数が含まれています.ICE-CONTROLLED属性に関しては、番号はロールの競合を解決するために使用されます.エージェントは、487応答を受信して​​いない限り、ICEセッション内のすべてのバインディング要求、すべてのストリーム、同じ番号を使用する必要があります（その場合、番号を変更する必要があります（7.2.5.1））.エージェントは、ICEの再起動時に番号を変更できます.









16.2.新しいエラー応答コード

この仕様では、単一のエラー応答コードを定義しています. 

487（役割の競合）：バインド要求には、ICE-CONTROLLINGまたはICE-CONTROLLED属性のいずれかが含まれ、サーバーと競合したICEロールを示します.リモートサーバーは、クライアントとサーバーのタイブレーカー値を比較し、クライアントがロールを切り替える必要があると判断しました.

17.操作上の考慮事項 

このセクションでは、エンドポイントがICEを使用するネットワークを運用しているオペレーターに関連する問題について説明します. 

17.1.NATおよびファイアウォールタイプ

ICEは、既存のNATおよびファイアウォール機器で動作するように設計されました.その結果、ICEの展開を容易にするために、既存のファイアウォールおよびNAT機器を交換または再構成する必要はありません.実際、ICEは、Voice over IP（VoIP）オペレーターがファイアウォールやNATなどのIPネットワークインフラストラクチャを制御できない環境に展開されるように開発されました.

とは言っても、ICEは[RFC4787]および[RFC5382]で定義されている推奨事項を満たし、NATデバイスが「動作」に準拠している環境で最適に機能します.動作に準拠したNATを備えたネットワークでは、ICEはTURNサーバーを必要とせずに動作するため、音声品質が向上し、コールのセットアップ時間が短縮され、ネットワークオペレーターの帯域幅需要が削減されます.

17.2.帯域幅の要件

ICEの展開には、オペレーターが考慮する必要がある利用可能なネットワーク容量とのいくつかの相互作用があります. 

17.2.1.STUNおよびTURN Server-Capacity Planning

何よりもまず、ICEはTURNおよびSTUNサーバーを使用します.これらは通常、データセンターに配置されます.STUNサーバーは、比較的小さな帯域幅しか必要としません.各データストリームの各コンポーネントには、各クライアントからSTUNサーバーへの1つ以上のSTUNトランザクションがあります.基本的な音声のみのIPv4 VoIP展開では、コールごとに4つのトランザクションがあります（RTPに1つ、RTCPに1つ、発信者と着信者の両方に）.各トランザクションは単一の要求と単一の応答であり、前者は20バイト、後者は28バイトです.



したがって、システムにN人のユーザーがいて、各ユーザーが混雑時に4つの呼び出しを行う場合、N * 1.7bpsが必要になります.100万人のユーザーの場合、これは1.7 Mbpsであり、非常に少ない数です（相対的に言えば）.

TURNトラフィックはより重要です.TURNサーバーは、実際のデータのトラフィックに加えて、STUNボリュームに等しいトラフィックボリューム（実際、TURNサーバーが展開されている場合、別個のSTUNサーバーは不要です）を確認します.データリレーにTURNを必要とするコールの量は、ネットワークトポロジに大きく依存し、時間とともに変化する可能性があります.100％動作準拠のNATを使用するネットワークでは、正確にゼロです.

上記の計画上の考慮事項は、マルチメディアシナリオ（例：オーディオおよびビデオ会議）およびセッションの参加者の数が増加する場合により重要になります. 

17.2.2.収集および接続性チェック

候補を収集して接続チェックを実行するプロセスは、帯域幅を集中的に使用する場合があります.ICEは、これらのプロセスの両方に対応するように設計されています.収集と接続チェックのフェーズは、ICEプロセスが終了するとデータトラフィック自体が消費する帯域幅とほぼ同じ帯域幅でトラフィックを生成することを目的としています.これは、ネットワークが特定のタイプ（音声、ビデオ、またはテキストのみ）の通信トラフィックをサポートするように設計されている場合、そのデータのICEチェックをサポートするのに十分な容量を確保するために行われました.ICEが終了すると、後続のICEキープアライブにより、合計帯域幅使用率がわずかに増加します.ただし、これは通常非常に小さな増加になります.

収集およびチェックフェーズによる輻輳は、ペーシングを使用しなかった展開の問題であることが証明されています.通常、アクセスリンクは、エンドポイントが送信できる限り高速のチェックでネットワークをあふれさせるため、混雑しました.したがって、ネットワークオペレータは、ICE実装がペーシング機能をサポートしていることを確認する必要があります.このペーシングによりコールのセットアップ時間が長くなりますが、ICEネットワークが使いやすくなり、展開が容易になります.

17.2.3.キープアライブ

STUNキープアライブ（STUNバインディングインジケーションの形式）は、データセッションの途中で送信されます.ただし、実際のデータトラフィックがない場合にのみ送信されます.連続メディアを使用し、Voice Activity Detection（VAD）を使用しない展開、またはVADが短い間隔（最大1秒）のコンフォートノイズとともに使用される展開では、キープアライブは使用されず、帯域幅の使用量は増加しません.VADがコンフォートノイズなしで使用されている場合、無音期間中にキープアライブが送信されます.これには、音声があるときに送信される20〜30ミリ秒ごとのパケットよりもはるかに少ない、15〜20秒ごとの単一パケットが含まれます.したがって、キープアライブはキャパシティプランニングに実際の影響を与えません.

17.3.ICEおよびICE-Lite

ICEとICE-liteを組み合わせて使用​​する展開は、相互運用できます.それらはそうするように明示的に設計されています.

ただし、ICE-liteは限られたユースケースでのみ展開できます.これらのケース、およびそれに関する注意事項は、付録Aに記載されています.

17.4.トラブルシューティングとパフォーマンス管理

ICEは、エンドツーエンドの接続性チェックを利用し、処理の多くをエンドポイントに配置します.これは、ネットワークオペレーターに課題をもたらします-ICE展開のトラブルシューティング方法は？ICEのパフォーマンスをどのように知ることができますか？

ICEには、これらの問題に対処するための組み込み機能があります.通常、ネットワークオペレーターのデータセンターに展開されているシグナリングサーバーは、ICEパラメーターを伝達する候補交換の内容を確認します.これらのパラメーターには、各候補のタイプ（ホスト、反射サーバー、またはリレー）が、関連アドレスとともに含まれます.ICE処理が完了すると、更新された候補交換が行われ、選択されたアドレス（およびそのタイプ）が通知されます.この更新されたシグナリングは、ICE処理の結果についてネットワーク機器（シグナリングに接続された診断ツールなど）を教育する目的で正確に実行されます.

その結果、シグナリングサーバーによって生成されたログを介して、ネットワークオペレーターは、各呼び出しで使用されている候補の種類と、ICEによって選択されたアドレスを確認できます.これは、ICEのパフォーマンスの評価に役立つ主要な情報です.

17.5.エンドポイント構成

ICEは、エンドポイントに構成されているいくつかのデータに依存しています.この構成データには、タイマー、TURNサーバーの資格情報、STUNおよびTURNサーバーのホスト名が含まれます.ICE自体は、この構成のメカニズムを提供しません.代わりに、この情報は、エンドポイントの他のすべてのパラメーターを構成するために使用されるメカニズムに添付されると想定されています.SIP電話機の場合、構成フレームワーク[RFC6080]などの標準ソリューションが定義されています.



18. IABの考慮事項 

IABは、「片側自己アドレス修正」（UNSAF）の問題を研究しました.これは、ICEエージェントが、協調プロトコルリフレクションメカニズムを介してNATの反対側の別の領域でアドレスを決定しようとする一般的なプロセスです[ RFC3424].ICEは、このタイプの機能を実行するプロトコルの例です.興味深いことに、ICEのプロセスは一方的ではなく、二国間であり、その違いはIABによって提起された問題に大きな影響を及ぼします.実際、ICEはUNSAFプロトコルではなく、Bilateral Self-Address Fixing（B-SAF）プロトコルと見なすことができます.とにかく、IABは、この目的のために開発されたプロトコルは、特定の考慮事項を文書化することを義務付けています.このセクションはそれらの要件を満たしています.

18.1.問題定義

RFC 3424から、UNSAFの提案は以下を提供する必要があります. 

UNSAF提案で解決される特定の限定された範囲の問題の正確な定義.他の問題を解決するために短期的な修正を一般化すべきではありません.このような一般化により、想定される短期修正への依存と使用が長期化することになります.つまり、「短期」と呼ぶのはもはや正確ではありません.

ICEによって解決される特定の問題は次のとおりです. 

2つのピアが通信に使用できるトランスポートアドレスのセットを決定する手段を提供します. 

エージェントが通信したい別のピアから到達可能なアドレスを決定する手段を提供します. 

18.2.出口戦略

RFC 3424から、UNSAFの提案は以下を提供する必要があります. 

出口戦略/移行計画の説明.より良い短期的な修正は、適切なテクノロジーが展開されるにつれて、当然ながら使用が少なくなる修正です.

ICE自体は簡単に段階的に廃止されません.ただし、たとえば、ルーターの障害によって接続が一時的に中断されたかどうかを検出する手段として、グローバルに接続されたインターネットでも役立ちます.ICEは、NATとは関係のない特定のセキュリティ攻撃の防止にも役立ちます.ただし、ICEが行うことは、他のUNSAFメカニズムを段階的に廃止することです.ICEは、これらのメカニズムの中から効果的に選択し、より良いメカニズムを優先し、より悪いメカニズムを優先します.IPv6が導入されるとNATが消失し始めるため、ネイティブホスト候補への優先度の高い接続が存在するため、サーバー反射型およびリレー候補（UNSAFアドレスの両方の形式）が使用されることはありません.したがって、サーバーの使用量はますます少なくなり、使用量がゼロになったときに最終的に削除できます.

実際、ICEはIPv4からIPv6への移行を支援できます.2つのデュアルスタックホストがSIPと通信するときにIPv6とIPv4のどちらを使用するかを決定するために使用できます（IPv6が使用されます）.また、6to4接続とネイティブv6接続の両方を持つネットワークが、ピアと通信するときに使用するアドレスを決定できるようにすることもできます.

18.3.ICEによって導入された脆性

RFC 3424から、UNSAFの提案は以下を提供する必要があります. 

システムをより「もろくする」特定の問題の議論.たとえば、複数のネットワーク層でデータを使用するアプローチでは、依存関係が増え、デバッグの課題が増え、移行が難しくなります.

ICEは、既存のUNSAFメカニズムから脆弱性を実際に取り除きます.特に、古典的なSTUN（RFC 3489 [RFC3489]で説明されている）には、いくつかの脆弱点があります.それらの1つは、ICEエージェントが背後にあるNATのタイプを分類しようとすることを必要とするディスカバリプロセスです.このプロセスはエラーを起こしやすいです.ICEでは、その検出プロセスは単純に使用されません.アドレスの有効性を一方的に評価するのではなく、その有効性はピアへの接続性を測定することにより動的に決定されます.接続性を判断するプロセスは非常に堅牢です.

古典的なSTUNおよびその他の片側メカニズムの脆弱性のもう1つのポイントは、追加サーバーへの絶対的な依存です.ICEは、一方的なアドレスの割り当てにサーバーを使用しますが、可能であればエージェントが直接接続できるようにします.したがって、場合によっては、ICEの使用時にSTUNサーバーの障害により呼び出しが進行する可能性があります.

クラシックSTUNの脆弱性のもう1つのポイントは、STUNサーバーがパブリックインターネット上にあると想定していることです.興味深いことに、ICEでは、これは必要ありません.さまざまなアドレスレルムに多数のSTUNサーバーが存在する場合があります.ICEは、使用可能なアドレスを提供したものを検出します.





クラシックSTUNの脆弱性の最も厄介な点は、すべてのネットワークトポロジで機能しないことです.各エージェントとSTUNサーバーの間に共有NATがある場合、従来のSTUNが機能しない場合があります.ICEでは、その制限は削除されています.

Classic STUNでは、セキュリティに関する考慮事項もいくつか導入されています.幸いなことに、これらのセキュリティに関する考慮事項もICEによって緩和されます.

その結果、ICEは従来のSTUNで導入された脆弱性を修復する役割を果たし、システムに追加の脆弱性を導入しません. 

これらの改善のペナルティは、ICEがセッション確立時間を増加させることです. 

18.4.長期的なソリューションの要件

RFC 3424から、UNSAFの提案はすべて以下を提供する必要があります. 

長期にわたる健全な技術的ソリューションの要件を特定します.適切な長期ソリューションを見つけるプロセスに貢献する.

RFC 3489の結論は変わりません.ただし、ICEは長期的なソリューションの一部になり得ると考えているため、ICEが実際に役立つと感じています.

18.5.既存のNAPTボックスに関する問題

RFC 3424から、UNSAFの提案は以下を提供する必要があります. 

既存の展開されたNA [P] Tと経験報告書に記載されている実際的な問題の影響についての議論. 

「汎用」ALG機能を提供しようとする多くのNATボックスが現在市場に展開されています.これらの汎用ALGは、パケット内のテキスト形式またはバイナリ形式のIPアドレスを探し、バインディングと一致する場合は書き換えます.これは、従来のSTUNに干渉します.ただし、STUN [RFC5389]の更新では、これらのバイナリアドレスを汎用ALGから隠すエンコードが使用されます.

既存のNAPTボックスには、UDPベースのバインディングの非決定的で一般に短い有効期限があります.これには、実装がこれらのバインディングを維持するために定期的なキープアライブを送信する必要があります.ICEはデフォルトの15秒を使用しますが、これは非常に控えめな見積もりです.最終的に、NATボックスが動作するように準拠するようになるにつれて[RFC4787]、この最小キープアライブは決定論的になります.

よく知られています.ICEタイマーは調整できます.最小キープアライブインターバルを検出および制御する方法があると、さらに改善されます.

19.セキュリティに関する考慮事項 

19.1.IPアドレスのプライバシー

候補を調べるプロセスは、クライアントとそのピアのソースアドレスをネットワーク上のリスニング攻撃者に明らかにし、候補を交換するプロセスは、ネゴシエーションを見ることができる攻撃者にアドレスを明らかにします.VPNユーザーのローカルインターフェイスを通じて収集されたサーバー反射アドレスなどの一部のアドレスは、機密情報である可能性があります.これらの潜在的な攻撃を軽減できない場合、ICEの使用法により、ネゴシエーションおよび/またはプロービングプロセスに公開するアドレスを制御するメカニズムを定義できます.個々の実装には、公開するアドレスを制御するための実装固有のルールもあります.たとえば、[WebRTC-IP-HANDLING]は、WebRTCアプリケーション用にICEを介してIPアドレスを公開する際のプライバシーの側面に関する追加情報を提供します.

ピアによって提供された候補のタイプ、およびそれらの候補に対して実行された接続テストの結果に基づいて、ピアは、異なるタイミングがピアに明らかな場合など、ローカルネットワークの特性を決定できる場合があります.制限内で、ピアはローカルネットワークをプローブできる可能性があります.

ICEシステムでは、いくつかの種類の攻撃が可能です.サブセクションでは、これらの攻撃とその対策について検討します.

19.2.接続性チェックへの攻撃

攻撃者は、STUN接続チェックを妨害しようとする可能性があります.最終的に、これらの攻撃はすべて、ICEエージェントをだまして、接続チェックの結果について何か間違っていると考えさせます.攻撃の種類に応じて、攻撃者は異なる能力を持っている必要があります.場合によっては、攻撃者は接続チェックのパス上にいる必要があります.それ以外の場合、STUN接続チェックを生成できる限り、攻撃者はパス上にいる必要はありません.通常、接続性チェックに対する攻撃はネットワークエンティティによって実行されますが、攻撃者がエンドポイントを制御できる場合、接続性チェック攻撃を引き起こす可能性があります.攻撃者が試みる可能性のある誤った結論は、次のとおりです.False Invalid：攻撃者は、エージェントのペアを欺いて、候補のペアが無効であると思わせることができます.

False Valid：攻撃者は、1組のエージェントがだまされて、候補の組が有効でないと考えることができます.これにより、エージェントはセッションを続行できますが、データを受信できなくなります.

False Peer-Reflexive Candidate：攻撃者は、予期しないときにエージェントに新しいピア反射候補を発見させることができます.これは、盗聴またはその他の目的で、データストリームをDoSターゲットまたは攻撃者にリダイレクトするために使用できます.

偽候補の偽有効：攻撃者は、実際にそのエージェントにルーティングされないアドレスを持つ候補があることをエージェントにすでに確信させています（たとえば、偽のピア反射候補または偽のサーバー反射候補を注入することによって）.次に、攻撃者は攻撃を開始し、この候補が有効であるとエージェントに信じ込ませます.

攻撃者が偽のピア反射候補または偽の候補に対する偽の有効性を引き起こすことができるならば、それは[RFC5389]で説明された攻撃のいずれかを始めることができます.

誤った無効な結果を強制するには、攻撃者はエージェントの1つからの接続チェックが送信されるのを待つ必要があります.その場合、攻撃者は回復不能なエラー応答（400など）を含む偽の応答を挿入するか、応答をドロップしてエージェントに到達しないようにする必要があります.ただし、候補は実際には有効であるため、元の要求がピアエージェントに到達し、成功の応答が返される場合があります.攻撃者は、DoS攻撃、レイヤー2ネットワークの中断、またはその他の手法により、このパケットまたはその応答を強制的にドロップする必要があります.これを行わない場合、成功応答も発信者に届き、攻撃の可能性を警告します.攻撃者が偽の応答を生成する機能は、STUN短期資格情報メカニズムによって軽減されます.この応答を処理するには、攻撃者にはパスワードが必要です.候補の交換シグナリングが保護されている場合、攻撃者はパスワードを持っていないため、その応答は破棄されます.

偽のICMPハードエラー（タイプ3、コード2〜4）を使用して、誤った無効な結果を作成することもできます.ICEエージェントがこれらのICMPエラーに対する応答を実装する場合、攻撃者は接続チェックを送信するエージェントに配信されるICMPメッセージを生成できます.エージェントによるICMPエラーメッセージの検証は、唯一の防御策です.タイプ3 code = 4の場合、DF = 0で接続チェックが送信されない限り、外部IPヘッダーは検証を提供しません.ホストによって発信されたコード2または3の場合、アドレスは、リモートエージェントのホスト、再帰、またはリレー候補IPアドレスのいずれかであると予想されます.ICMPメッセージには、エラーをトリガーしたメッセージのIPヘッダーとUDPヘッダーが含まれています.これらのフィールドも検証する必要があります.IP宛先とUDP宛先ポートは、ターゲットの候補アドレスとポート、または候補のベースアドレスのいずれかと一致する必要があります.送信元IPアドレスとポートは、接続チェックを送信するエージェントの同じベースアドレスの任意の候補にすることができます.したがって、候補者のやり取りにアクセスできる攻撃者は、必要な情報を入手できます.したがって、検証は弱い防御であり、送信元アドレスの検証なしで、ネットワーク内のノードからのオフパス攻撃者になりすましICMP攻撃を送信することも可能です.

偽の有効な結果を強制することも同様の方法で機能します.攻撃者は、各エージェントからのバインディングリクエストを待機し、偽の成功応答を挿入する必要があります.繰り返しますが、STUN短期資格情報メカニズムにより、攻撃者が有効な成功応答を挿入するためには、攻撃者はパスワードが必要です.あるいは、攻撃者は有効な成功応答を（たとえば、トンネリングメカニズムを使用して）ルーティングすることができます.これは通常、ネットワークによってドロップまたは拒否されますが、エージェントに送信されます.

偽のピア再帰候補の結果を強制することは、偽の要求または応答、またはリプレイで実行できます.まず、偽のリクエストとレスポンスのケースを検討します.攻撃者は、偽の候補のソースIPアドレスとポートを使用して、1つのエージェントにバインド要求を送信する必要があります.さらに、攻撃者は他のエージェントからのバインディング要求を待機し、偽の候補を含むXOR-MAPPED-ADDRESS属性を持つ偽の応答を生成する必要があります.ここで説明する他の攻撃と同様に、この攻撃はSTUNメッセージ整合性メカニズムと安全な候補交換によって緩和されます.

パケットリプレイで誤ったピア反射候補結果を強制することは異なります.攻撃者は、エージェントの1人がチェックを送信するまで待機します.この要求をインターセプトし、偽のソースIPアドレスを持つ他のエージェントに向けてリプレイします.また、DoS攻撃を開始してパケットをドロップするか、レイヤー2メカニズムを使用して強制的にドロップすることにより、元の要求がリモートエージェントに到達しないようにする必要があります.再生されたパケットは、整合性チェックに合格するため、他のエージェントで受信され、受け入れられます（整合性チェックはソースIPアドレスとポートをカバーできないため、カバーしません）.その後、応答されます.この応答には、偽の候補を持つXOR-MAPPED-ADDRESSが含まれ、その偽の候補に送信されます.攻撃者はそれを受信し、発信者に向けて中継する必要があります.次に、他のエージェントは、その偽の候補に対する接続チェックを開始します.この検証は成功する必要があります.これは、攻撃者が偽の候補に対して偽の有効を強制することを必要とします.この目標を達成するための偽の要求または応答の注入は、STUNの整合性メカニズムと候補交換を使用して防止されます.したがって、この攻撃はリプレイによってのみ開始できます.そのためには、攻撃者はこの偽の候補に対するチェックを傍受し、他のエージェントに対してリプレイする必要があります.次に、応答をインターセプトし、同様に再生する必要があります.この目標を達成するための偽の要求または応答の注入は、STUNの整合性メカニズムと候補交換を使用して防止されます.したがって、この攻撃はリプレイによってのみ開始できます.そのためには、攻撃者はこの偽の候補に対するチェックを傍受し、他のエージェントに対してリプレイする必要があります.次に、応答をインターセプトし、同様に再生する必要があります.この目標を達成するための偽の要求または応答の注入は、STUNの整合性メカニズムと候補交換を使用して防止されます.したがって、この攻撃はリプレイによってのみ開始できます.そのためには、攻撃者はこの偽の候補に対するチェックを傍受し、他のエージェントに対してリプレイする必要があります.次に、応答をインターセプトし、同様に再生する必要があります.

この攻撃は、攻撃者が偽の候補者によって識別されない限り、開始するのが非常に困難です.これは、攻撃者が2つの異なるホストから送信されたパケットを傍受して再生する必要があるためです.両方のエージェントが異なるネットワーク上にある場合（たとえば、パブリックインターネット全体）、この攻撃はネットワークの異なる部分にある2つの異なるエンドポイントに対して同時に発生する必要があるため、調整が難しい場合があります.

攻撃者自身が偽の候補者によって識別された場合、攻撃の調整が容易になります.ただし、データパスがセキュリティで保護されている場合（たとえば、セキュアリアルタイムトランスポートプロトコル（SRTP）[RFC3711]を使用）、攻撃者はデータパケットを処理できません.データストリーム.ただし、この攻撃では、接続チェックがターゲットに到達するのをブロックするために、エージェントがパケットを中断する必要があります.その場合、目標がデータストリームを中断することである場合、ICEを攻撃するのではなく、同じメカニズムで単に中断する方がはるかに簡単です.

19.3.サーバー反射アドレス収集への攻撃

ICEエンドポイントは、STUNバインディング要求を利用して、STUNサーバーからサーバー再帰候補を収集します.これらのリクエストは認証されません.結果として、攻撃者がクライアントに誤ったサーバー反射候補を提供するために使用できる多くの手法があります.

o攻撃者はDNSを侵害し、DNSクエリが不正なSTUNサーバーアドレスを返す可能性があります.そのサーバーは、クライアントに偽のサーバー反射候補を提供できます.この攻撃はDNSセキュリティによって緩和されますが、DNSSECはそれに対処する必要はありません.

o STUNメッセージを観察できる攻撃者（Wi-Fiなどの共有ネットワークセグメントの攻撃者など）は、有効でクライアントに受け入れられる偽の応答を挿入できます. 

o攻撃者はSTUNサーバーを危険にさらし、マップされたアドレスが正しくない応答を送信させる可能性があります.これらの攻撃によって学習された誤ってマッピングされたアドレスは、ICEセッションの確立のサーバー反射候補として使用されます.この候補が実際にデータに使用されるためには、攻撃者は接続チェックを攻撃する必要もあります.特に、偽の候補に対して偽の有効を強制する必要があります.この攻撃は、セッション内の各ICEエージェントによって生成されたチェックを攻撃する必要があり、攻撃者を識別する場合にSRTPによって阻止されるため、偽のアドレスが第4パーティ（イニシエーター、レスポンダー、攻撃者のいずれでもない）を識別する場合、起動が非常に困難です自体.

攻撃者が接続チェックを攻撃しないことを選択した場合、最悪の事態は、サーバー反射候補が使用されないようにすることです.ただし、攻撃を受けているエージェントが到達可能な候補がピアエージェントに少なくとも1つある場合、STUN接続性チェック自体が、データ交換に使用できるピア反射候補を提供します.通常、ピア反射候補はサーバー反射候補よりも優先されます.そのため、STUNアドレス収集のみに対する攻撃は通常、セッションにまったく影響を与えません.

19.4.リレーされた候補者の収集に対する攻撃

攻撃者は、リレーされた候補者の収集を妨害し、クライアントに誤ったリレーされた候補者があると信じ込ませようとする可能性があります.TURNサーバーとの交換は、長期資格情報を使用して認証されます.したがって、偽の応答または要求の注入は機能しません.さらに、バインディング要求とは異なり、割り当て要求は、ソースIPアドレスとポートがクライアントにリレー候補を提供するために使用されないため、変更されたソースIPアドレスとポートを使用したリプレイ攻撃の影響を受けません.

攻撃者がクライアントに誤った中継候補を信じさせたとしても、接続性チェックにより、そのような候補は成功した場合にのみ使用されます.したがって、攻撃者は上記のように偽の候補に対して偽の有効を起動する必要があり、これは調整が非常に難しい攻撃です.

19.5.インサイダー攻撃

攻撃者が偽の候補情報またはSTUNメッセージを挿入しようとする第三者である攻撃に加えて、攻撃者がICE交換の認証された有効な参加者である場合、ICEで攻撃が可能です. 









19.5.1.スタン増幅攻撃

STUN増幅攻撃は、攻撃者が他のエージェントに音声パケットを攻撃対象に向けさせる「ボイスハンマー」攻撃に似ています.ただし、音声パケットがターゲットに送信される代わりに、STUN接続チェックはターゲットに送信されます.攻撃者は多数の候補、たとえば50を送信します.応答エージェントは候補情報を受信し、ターゲットに向けられたチェックを開始します.その結果、応答を生成することはありません.WebRTCの場合、ユーザーが取得した悪意のあるJavaScriptコードによってバックグラウンドでトリガーされる可能性があるため、ユーザーはこの攻撃が進行中であることを認識していません.回答者は、Ta ms（たとえば、Ta = 50ms）ごとに新しい接続チェックを開始します.しかしながら、多数の候補があるため、再送信タイマーは多数に設定されます.結果として、パケットはTaミリ秒ごとに1つの間隔で送信され、その後は間隔が長くなります.したがって、STUNは、データが送信されるよりも速いレートでパケットを送信せず、セッションでICEが失敗するまで、STUNパケットは短時間しか持続しません.それにもかかわらず、これは増幅メカニズムです.

増幅を排除することは不可能ですが、さまざまなヒューリスティックによってボリュームを減らすことができます.ICEエージェントは、実行する接続チェックの合計数を100に制限する必要があります.さらに、エージェントは、受け入れる候補の数を制限することができます.

多くの場合、これらの種類の攻撃を回避したいプロトコルは、次のメッセージを送信する前に、イニシエーターに応答を待たせます.ただし、ICEの場合、これは不可能です.次の2つのケースを区別することはできません.

oイニシエーターは、応答しない疑いのないターゲットに対してDoS攻撃を開始するために使用されているため、応答はありませんでした. 

oイニシエーターがIPアドレスとポートに到達できないため、応答がありませんでした. 

2番目の場合、次の機会に別のチェックが送信されますが、前者の場合、それ以上のチェックは送信されません. 











20. IANAの考慮事項 

元のICE仕様では、4つのSTUN属性と1つの新しいSTUNエラー応答が登録されていました.STUN属性とエラー応答がここに再現されています.さらに、この仕様は新しいICEオプションを登録します.

20.1.STUN属性

IANAは4つのSTUN属性を登録しました： 

0x0024優先度0x0025使用候補0x8029氷制御0x802A氷制御 

20.2.STUNエラー応答

IANAは、次のSTUNエラー応答コードを登録しました. 

487ロールの競合：クライアントは、サーバーのロールと競合するICEロール（制御または制御）をアサートしました. 

20.3.ICEオプション

IANAは、[RFC6336]で定義された手順に従って、「Interactive Connectivity Establishment（ICE）」レジストリの「ICE Options」サブレジストリに次のICEオプションを登録しました. 

ICEオプション名：ice2 

連絡先：名前：IESGメール：iesg@ietf.org 

コントローラーの変更：IESG 

説明：ICEオプションは、ICEオプションを使用するICEエージェントがRFC 8445に従って実装されていることを示します. 

参照：RFC 8445 





21. RFC 5245からの変更 

この更新されたICE仕様の目的は次のとおりです. 

o RFC 5245の手順を明確にします. 

o RFC 5245で発見された欠陥と、RFC 5245に基づいてICEアプリケーションを実装および展開したコミュニティからのフィードバックにより、技術的な変更を行います. 

o SIPおよびSDP手順を削除することにより、手順をシグナリングプロトコルから独立させます.シグナリングプロトコルに固有の手順は、個別の使用法ドキュメントで定義されます.[ICE-SIP-SDP]は、SIPおよびSDPでのICEの使用を定義します.

次の技術的な変更が行われました. 

o積極的な指名は削除されました. 

o候補ペアの状態を計算し、接続性チェックをスケジュールする手順が変更されました. 

o TaおよびRTOの計算手順が変更されました. 

oアクティブなチェックリストとフローズンチェックリストの定義が削除されました. 

o「ice2」ICEオプションが追加されました. 

o IPv6の考慮事項が変更されました. 

oキープアライブのノーオペレーションでの使用、および非ICEピアのキープアライブは削除されました. 

22.参照 

22.1.規範的参考文献

[RFC2119] Bradner、S.、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<https://www.rfc-editor.org/info/ rfc2119>. 

[RFC4941] Narten、T.、Draves、R.、およびS. Krishnan、「IPv6のステートレスアドレス自動設定のプライバシー拡張」、RFC 4941、DOI 10.17487 / RFC4941、2007年9月、<https：//www.rfc-editor .org / info / rfc4941>. 



[RFC5389]ローゼンバーグ、J.、マヒー、R.、マシューズ、P.、およびD.ウィング、「NAT（STUN）のセッショントラバースユーティリティ」、RFC 5389、DOI 10.17487 / RFC5389、2008年10月、<https：// www.rfc-editor.org/info/rfc5389>. 

[RFC5766] Mahy、R.、Matthews、P.、およびJ. Rosenberg、「NAT（TURN）の周りのリレーを使用したトラバーサル：NAT（STUN）のセッショントラバーサルユーティリティへのリレー拡張」、RFC 5766、DOI 10.17487 / RFC5766、4月2010、<https://www.rfc-editor.org/info/rfc5766>. 

[RFC6336] Westerlund、M.、およびC. Perkins、「インタラクティブ接続確立（ICE）オプションのためのIANAレジストリ」、RFC 6336、DOI 10.17487 / RFC6336、2011年7月、<https://www.rfc-editor.org/info / rfc6336>. 

[RFC6724] Thaler、D.、Ed.、Draves、R.、Matsumoto、A.、およびT. Chown、「インターネットプロトコルバージョン6（IPv6）のデフォルトアドレス選択」、RFC 6724、DOI 10.17487 / RFC6724、2012年9月、<https://www.rfc-editor.org/info/rfc6724>. 

[RFC8174] Leiba、B.、「RFC 2119キーワードの大文字と小文字のあいまいさ」、BCP 14、RFC 8174、DOI 10.17487 / RFC8174、2017年5月、<https://www.rfc-editor.org/info/ rfc8174>. 

22.2.参考資料

[ICE-SIP-SDP] Petit-Huguenin、M.、Nandakumar、S.、およびA. Keranen、「セッション記述プロトコル（SDP）の対話型接続確立（ICE）のオファー/アンサー手順」、Work in Progress、ドラフト- ietf-mmusic-ice-sip-sdp-21、2018年6月. 

[RFC1918] Rekhter、Y.、Moskowitz、B.、Karrenberg、D.、de Groot、G.、およびE. Lear、「プライベートインターネットのアドレス割り当て」、BCP 5、RFC 1918、DOI 10.17487 / RFC1918、1996年2月、<https://www.rfc-editor.org/info/rfc1918>. 

[RFC2475]ブレイク、S.、ブラック、D.、カールソン、M.、デイビス、E.、ワング、Z.、およびW.ヴァイス、「差別化されたサービスのためのアーキテクチャ」、RFC 2475、DOI 10.17487 / RFC2475、12月1998、<https://www.rfc-editor.org/info/rfc2475>. 

[RFC3102] Borella、M.、Lo、J.、Grabelsky、D.、およびG. Montenegro、「Realm Specific IP：Framework」、RFC 3102、DOI 10.17487 / RFC3102、2001年10月、<https：//www.rfc -editor.org/info/rfc3102>.[RFC3103] Borella、M.、Grabelsky、D.、Lo、J.、およびK. Taniguchi、「Realm Specific IP：Protocol Specification」、RFC 3103、DOI 10.17487 / RFC3103、2001年10月、<https：// www. rfc-editor.org/info/rfc3103>.

[RFC3235] Senie、D.、「Network Address Translator（NAT）-Friendly Application Design Guidelines」、RFC 3235、DOI 10.17487 / RFC3235、2002年1月、<https://www.rfc-editor.org/info/rfc3235> . 

[RFC3261]ローゼンバーグ、J.、シュルズリンネ、H.、カマリロ、G.、ジョンストン、A.、ピーターソン、J.、スパークス、R.、ハンドリー、M.、およびE.スクーラー、「SIP：Session Initiation Protocol」 、RFC 3261、DOI 10.17487 / RFC3261、2002年6月、<https://www.rfc-editor.org/info/rfc3261>. 

[RFC3264] Rosenberg、J.およびH. Schulzrinne、「セッション記述プロトコル（SDP）を備えたオファー/アンサーモデル」、RFC 3264、DOI 10.17487 / RFC3264、2002年6月、<https://www.rfc-editor.org / info / rfc3264>. 

[RFC3303] Srisuresh、P.、Kuthan、J.、Rosenberg、J.、Molitor、A.、およびA. Rayhan、「ミドルボックス通信アーキテクチャとフレームワーク」、RFC 3303、DOI 10.17487 / RFC3303、2002年8月、<https： //www.rfc-editor.org/info/rfc3303>. 

[RFC3424] Daigle、L.、Ed.およびIAB、「ネットワークアドレス変換全体にわたる一方的な自己アドレス修正（UNSAF）に関するIABの考慮事項」、RFC 3424、DOI 10.17487 / RFC3424、2002年11月、<https://www.rfc-editor.org/info/rfc3424>.

[RFC3489] Rosenberg、J.、Weinberger、J.、Huitema、C.、およびR. Mahy、「STUN-ネットワークアドレス変換器（NAT）を介したユーザーデータグラムプロトコル（UDP）の単純なトラバース」、RFC 3489、DOI 10.17487 / RFC3489、2003年3月、<https://www.rfc-editor.org/info/rfc3489>. 

[RFC3550] Schulzrinne、H.、Casner、S.、Frederick、R.、およびV. Jacobson、「RTP：リアルタイムアプリケーションのトランスポートプロトコル」、STD 64、RFC 3550、DOI 10.17487 / RFC3550、2003年7月、 <https://www.rfc-editor.org/info/rfc3550>. 

[RFC3605] Huitema、C.、「セッション記述プロトコル（SDP）のリアルタイム制御プロトコル（RTCP）属性」、RFC 3605、DOI 10.17487 / RFC3605、2003年10月、<https://www.rfc-editor.org/ info / rfc3605>. 



[RFC3711] Baugher、M.、McGrew、D.、Naslund、M.、Carrara、E.、およびK. Norrman、「セキュアリアルタイムトランスポートプロトコル（SRTP）」、RFC 3711、DOI 10.17487 / RFC3711、3月2004、<https://www.rfc-editor.org/info/rfc3711>. 

[RFC3725]ローゼンバーグ、J.、ピーターソン、J.、シュルズリンネ、H.、およびG.カマリロ、「セッション開始プロトコル（SIP）のサードパーティコール制御（3pcc）のベストプラクティス」、BCP 85、RFC 3725 、DOI 10.17487 / RFC3725、2004年4月、<https://www.rfc-editor.org/info/rfc3725>. 

[RFC3879] Huitema、C.、およびB. Carpenter、「非推奨サイトローカルアドレス」、RFC 3879、DOI 10.17487 / RFC3879、2004年9月、<https://www.rfc-editor.org/info/rfc3879>. 

[RFC4038] Shin、MK.、Ed.、Hong、YG.、Hagino、J.、Savola、P.、and E. Castro、 "Application Aspects of IPv6 Transition"、RFC 4038、DOI 10.17487 / RFC4038、March 2005、 <https://www.rfc-editor.org/info/rfc4038>. 

[RFC4091] Camarillo、G.、およびJ. Rosenberg、「セッション記述プロトコル（SDP）グループ化フレームワークの代替ネットワークアドレスタイプ（ANAT）セマンティクス」、RFC 4091、DOI 10.17487 / RFC4091、2005年6月、<https：// www.rfc-editor.org/info/rfc4091>. 

[RFC4092] Camarillo、G.およびJ. Rosenberg、「セッション記述プロトコル（SDP）代替ネットワークアドレスタイプ（ANAT）セマンティクスのセッション開始プロトコル（SIP）の使用」、RFC 4092、DOI 10.17487 / RFC4092、2005年6月、<https://www.rfc-editor.org/info/rfc4092>. 

[RFC4103] Hellstrom、G.、およびP. Jones、「テキスト会話のRTPペイロード」、RFC 4103、DOI 10.17487 / RFC4103、2005年6月、<https://www.rfc-editor.org/info/rfc4103>. 

[RFC4291] Hinden、R.、およびS. Deering、「IPバージョン6アドレス指定アーキテクチャ」、RFC 4291、DOI 10.17487 / RFC4291、2006年2月、<https://www.rfc-editor.org/info/rfc4291>. 

[RFC4566] Handley、M.、Jacobson、V.、およびC. Perkins、「SDP：Session Description Protocol」、RFC 4566、DOI 10.17487 / RFC4566、2006年7月、<https://www.rfc-editor.org/ info / rfc4566>. 

[RFC4787]オーデット、F.、エド.およびC.ジェニングス、「ユニキャストUDPのネットワークアドレス変換（NAT）動作要件」、BCP 127、RFC 4787、DOI 10.17487 / RFC4787、2007年1月、<https://www.rfc-editor.org/info/rfc4787> .[RFC5245]ローゼンバーグ、J.、「Interactive Connectivity Establishment（ICE）：オファー/アンサープロトコルのネットワークアドレス変換（NAT）トラバーサルのプロトコル」、RFC 5245、DOI 10.17487 / RFC5245、2010年4月、<https：// www .rfc-editor.org / info / rfc5245>.

[RFC5382] Guha、S.、Ed.、Biswas、K.、Ford、B.、Sivakumar、S.、およびP. Srisuresh、「TCPのNAT動作要件」、BCP 142、RFC 5382、DOI 10.17487 / RFC5382 2008年10月、<https://www.rfc-editor.org/info/rfc5382>. 

[RFC5761] Perkins、C.、M.Westerlund、「単一ポートでのRTPデータと制御パケットの多重化」、RFC 5761、DOI 10.17487 / RFC5761、2010年4月、<https://www.rfc-editor.org/info / rfc5761>. 

[RFC6080] Petrie、D.およびS. Channabasappa、Ed.、「セッション開始プロトコルユーザーエージェントプロファイル配信のフレームワーク」、RFC 6080、DOI 10.17487 / RFC6080、2011年3月、<https：//www.rfc-editor. org / info / rfc6080>. 

[RFC6146] Bagnulo、M.、Matthews、P.、およびI. van Beijnum、「ステートフルNAT64：IPv6クライアントからIPv4サーバーへのネットワークアドレスおよびプロトコル変換」、RFC 6146、DOI 10.17487 / RFC6146、2011年4月、<https： //www.rfc-editor.org/info/rfc6146>. 

[RFC6147] Bagnulo、M.、Sullivan、A.、Matthews、P.、およびI. van Beijnum、「DNS64：IPv6クライアントからIPv4サーバーへのネットワークアドレス変換のためのDNS拡張」、RFC 6147、DOI 10.17487 / RFC6147、4月2011、<https://www.rfc-editor.org/info/rfc6147>. 

[RFC6298] Paxson、V.、Allman、M.、Chu、J.、およびM. Sargent、「TCPの再送信タイマーの計算」、RFC 6298、DOI 10.17487 / RFC6298、2011年6月、<https：//www.rfc- editor.org/info/rfc6298>. 

[RFC6544]ローゼンバーグ、J.、ケラネン、A.、ローカンプ、B.、およびA.ローチ、「対話型接続確立（ICE）を使用したTCP候補」、RFC 6544、DOI 10.17487 / RFC6544、2012年3月、<https：/ /www.rfc-editor.org/info/rfc6544>. 

[RFC6928] Chu、J.、Dukkipati、N.、Cheng、Y.、およびM. Mathis、「TCPの初期ウィンドウの増加」、RFC 6928、DOI 10.17487 / RFC6928、2013年4月、<https：//www.rfc- editor.org/info/rfc6928>. 



[RFC7050] Savolainen、T.、Korhonen、J.、およびD. Wing、「IPv6アドレス合成に使用されるIPv6プレフィックスの発見」、RFC 7050、DOI 10.17487 / RFC7050、2013年11月、<https：//www.rfc -editor.org/info/rfc7050>. 

[RFC7721] Cooper、A.、Gont、F.、およびD. Thaler、「IPv6アドレス生成メカニズムのセキュリティおよびプライバシーに関する考慮事項」、RFC 7721、DOI 10.17487 / RFC7721、2016年3月、<https：//www.rfc- editor.org/info/rfc7721>. 

[RFC7825] Goldberg、J.、Westerlund、M.、およびT. Zeng、「リアルタイムストリーミングプロトコル（RTSP）によって制御されるメディアのネットワークアドレス変換（NAT）トラバーサルメカニズム」、RFC 7825、DOI 10.17487 / RFC7825 、2016年12月、<https://www.rfc-editor.org/info/rfc7825>. 

[RFC8421] Martinsen、P.、Reddy、T.、およびP. Patil、「Interactive Connectivity Establishment（ICE）マルチホームおよびIPv4 / IPv6デュアルスタックガイドライン」、RFC 8421、DOI 10.17487 / RFC8421、2018年7月、<https： //www.rfc-editor.org/info/rfc8421>. 

[WebRTC-IP-HANDLING] Uberti、J.、およびG. Shieh、「WebRTC IPアドレス処理要件」、Work in Progress、draft-ietf-rtcweb-ip- handling-09、2018年6月. 













































付録A. Liteおよび完全な実装 

ICEでは、2種類の実装が可能です.完全な実装では、セッション内の制御ロールと制御ロールがサポートされ、アドレス収集も実行できます.対照的に、ライト実装は、STUNチェックにほとんど応答しない最小限の実装であり、セッションで制御された役割のみをサポートします.

ICEでは、どちらかのエンドポイントにメリットをもたらすために両方のエンドポイントがそれをサポートする必要があるため、ネットワークでのICEの増分展開はより複雑になります.多くのセッションには、NATの背後になく、NATトラバーサルを心配しないエンドポイント自体が含まれます.非常に一般的なケースは、NATトラバーサルを必要とする1つのエンドポイント（VoIPハード電話やソフト電話など）がこれらのデバイスの1つに電話をかけることです.電話機が完全なICE実装をサポートしていても、他のデバイスがICEをサポートしていない場合、ICEはまったく使用されません.ライトの実装により、これらのデバイスの低コストのエントリポイントが可能になります.lite実装をサポートすると、完全な実装がそれらに接続し、ICEのすべての利点を得ることができます.

したがって、Liteの実装は、*常に*パブリックインターネットに接続され、通信員からパケットを受信できるパブリックIPアドレスを持つデバイスにのみ適しています.ライトの実装がNATの背後に配置されている場合、ICEは機能しません.

ICEにより、Lite実装は単一のIPv4ホスト候補と複数のIPv6アドレスを持つことができます.その場合、候補ペアは、RFC 6724のような静的アルゴリズムを使用して、この仕様で推奨されている制御エージェントによって選択されます.ただし、アドレス選択の静的メカニズムは、実際のトポロジを反映したり、接続性を実際に保証したりすることはできないため、常にエラーが発生しやすくなります.それらは常にヒューリスティックです.そのため、ICEエージェントがIPv4アドレスとIPv6アドレスを選択するためだけにICEを実装しており、IPアドレスがNATの背後にない場合、可能な限り最も堅牢な形式のアドレス選択を提供するために、完全なICEの使用が推奨されます.

完全な実装への足掛かりを提供するために、この仕様にライト実装が追加されたことに注意することが重要です.常に単一のIPv4アドレスでパブリックインターネットに接続されているデバイスであっても、実現可能な場合は完全な実装が望ましいです.完全な実装では、NATトラバーサルとは関係のないICEのセキュリティ上の利点も得られます.最後に、今日パブリックアドレスを持つデバイスが明日ネットワークに配置され、NATの背後に配置されることがよくあります.デバイスまたは製品の耐用年数にわたって、常にパブリックインターネットで使用されるかどうかを明確に知ることは困難です.完全な実装により、通信が常に機能することが保証されます.

付録B.設計の動機 

ICEには多数の規範的な動作が含まれていますが、それら自体は単純な場合もありますが、複雑なまたは非自明な思考や、さらなる議論に値するユースケースに由来します.これらの設計の動機は、実装の目的を理解するために必要ではないため、ここで説明します.この付録は規範的ではありません.

B.1.STUNトランザクションのペーシング

候補の収集と接続の検証に使用されるSTUNトランザクションは、Taミリ秒ごとに1つの新しいトランザクションの概算レートでペースアウトされます.同様に、各トランザクションには、Taの機能でもある再送信タイマーRTOがあります.なぜこれらのトランザクションはペース調整され、なぜこれらの式は使用されますか

これらのSTUN要求を送信すると、多くの場合、クライアントとSTUNサーバー間のNATデバイスにバインディングを作成する効果があります.多くのNATデバイスでは、新しいバインディングを作成するレートに上限があることが経験からわかっています.この仕様の作業中のIETF ICE WGでの議論では、5ミリ秒ごとに1回が十分にサポートされていると結論付けられました.これが、Taの下限が5ミリ秒である理由です.さらに、ネットワーク上のこれらのパケットの送信は帯域幅を利用するため、ICEエージェントによってレート制限される必要があります.[RFC5245]の以前のドラフトバージョンに基づく展開は、ネットワークに悪影響を与えることに加えて、レートが制限されたアクセスリンクに過負荷をかけ、全体的にパフォーマンスが低下する傾向がありました.その結果、ペーシングにより、NATデバイスが過負荷にならず、トラフィックが適切なレートに維持されることが保証されます.

「合理的な」レートの定義は、データが流れ始めると、STUNはRTP自体が使用するよりも多くの帯域幅を使用してはならないということです.Taの式は、STUNパケットがTa秒ごとに送信される場合、RTPパケットと同じ量の帯域幅を消費し、すべてのデータストリームで合計されるように設計されています.もちろん、STUNには再送信があり、それらのペースも合わせたいと思っています.このため、RTOは、最後のトランザクションで最初のSTUN要求が発生するのと同じように、最初のトランザクションで最初の再送信が発生するように設定されます.図解：









最初のパケットの再送信 





| | | | ------- + ------ ------- + ------ / \ / \ / \ / \

+-+ +-+ +-+ +-+ +-+ +-+ | A1 | | B1 | | C1 | | A2 | | B2 | | C2 | +-+ +-+ +-+ +-+ +-+ +-+

--- + ------- + ------- + ------- + ------- + ------- + ------ ------時間0 Ta 2Ta 3Ta 4Ta 5Ta 

この図では、送信される3つのトランザクションがあります（たとえば、候補者の収集の場合、3つのホスト候補/ STUNサーバーのペアがあります）.これらはトランザクションA、B、およびCです.再送信タイマーは、最初のトランザクション（パケットA2）の最初の再送信が時間3Taに送信されるように設定されます.

STUNは再送信時に指数バックオフを使用するため、最初の再送信後の後続の再送信は、Taミリ秒間隔よりもさらに少ない頻度で発生します. 

5 msのグローバル最小ペーシング間隔のこのメカニズムは、一般にトランスポートプロトコルには適用できませんが、次の理由に基づいてICEに適用できます. 

o一般にトランスポートプロトコルに適用される次のルールから始めます. 

1. [RFC6928]のセクション2で定義されているように、MaxBytesを起動時にネットワークで未処理にすることができる最大バイト数とします.これは14600である必要があります. 

2. HTOをトランザクションタイムアウトとし、RTTが既知の場合は2 * RTT、それ以外の場合は500ミリ秒にする必要があります.これは、[RFC5389]からのSTUNメッセージのRTOと[RFC6298]の1秒であるTCP初期RTOに基づいています.

3. MinPacingをトランザクション間の最小ペーシング間隔（5ミリ秒）にします（上記を参照）. 





o通常、エージェントはICEトランザクション（特に接続性チェック）のRTTを知らないことに注意してください.つまり、HTOはほぼ常に500ミリ秒になります. 

o MinPacingが5ミリ秒、HTOが500ミリ秒で最大100パケット/ HTOが得られることに注意してください.これは、120バイト未満の一般的なICEチェックでは、ネットワーク内の最大12000未処理バイトを意味します.ルール1により. 

oしたがって、ICEの場合、ルールセットはMinPacingルールに縮小されます.これは、グローバルなTa値を持つことに相当します. 

B.2.複数のベースを持つ候補者

セクション5.1.3では、同じトランスポートアドレスとベースを持つ候補の削除について説明します.ただし、トランスポートアドレスが同じでベースが異なる候補は冗長ではありません.ICEエージェントは、同じIPアドレスとポートを持っているがベースが異なる2つの候補者をいつ持つことができますか？図11のトポロジーを検討してください.

+ ---------- + | スタンSrvr | + ---------- + | | ----- // \\ | | | B：net10 | | | \\ // ----- | | + ---------- + | NAT | + ---------- + | | ----- // \\ | A | | 192.168 / 16 | | | \\ // ----- | | | 192.168.1.100 ----- + ---------- + // \\ + ---------- + | | | | | | | イニシエーター| --------- | C：net10 | ----------- | レスポンダー| | | 10.0.1.100 | | 10.0.1.101 | | + ---------- + \\ // + ---------- + -----

図11：異なるベースを持つ同一の候補 





この場合、開始エージェントはマルチホームです.ネット10プライベートネットワークであるネットワークCに1つのIPアドレス10.0.1.100があります.応答するエージェントはこの同じネットワーク上にあります.開始エージェントは、192.168 / 16であり、192.168.1.100のIPアドレスを持つネットワークAにも接続されています.このネットワークにはNATがあり、別のnet 10プライベートネットワークであるネットワークBに接続していますが、ネットワークCには接続されていません.ネットワークBにはSTUNサーバーがあります.

開始エージェントは、ネットワークC（10.0.1.100:2498）のIPアドレスでホスト候補を取得し、ネットワークA（192.168.1.100:3344）のIPアドレスでホスト候補を取得します.192.168.1.100:3344から構成済みのSTUNサーバーに対してSTUNクエリを実行します.このクエリはNATを通過します.これにより、バインド10.0.1.100:2498が割り当てられます.STUNサーバーは、これをSTUNバインディング応答に反映します.これで、開始エージェントは、ホスト候補（10.0.1.100:2498）と同じトランスポートアドレスを持つサーバー反射候補を取得しました.ただし、サーバー反映候補のベースは192.168.1.100:3344であり、ホスト候補のベースは10.0.1.100:2498です.

B.3.Related-AddressおよびRelated-Port属性の目的

候補属性には、ICE自体ではまったく使用されない2つの値（関連アドレスと関連ポート）が含まれます.なぜ存在するのですか？

含める理由は2つあります.1つ目は診断です.異なるタイプの候補者間の関係を知ることは非常に役立ちます.これを含めることにより、ICEエージェントは、どの中継候補がどの反射候補に関連付けられているか、さらに特定のホスト候補に関連付けられているかを知ることができます.ある候補者のチェックが成功したが、他の候補者のチェックが成功しなかった場合、これはネットワークで何が起こっているかに関する有用な診断を提供します.

2番目の理由は、オフパスのサービス品質（QoS）メカニズムに関係しています.ICEがPacketCable 2.0などの環境で使用される場合、プロキシは通常のSIP操作の実行に加えて、SIPメッセージのSDPを検査し、データトラフィックのIPアドレスとポートを抽出します.その後、ポリシーサーバーを介してネットワーク内のアクセスルーターとやり取りし、データフローの保証されたQoSを確立できます.このQoSは、5タプルに基づいてRTPトラフィックを分類し、保証レートを提供するか、DSCPを適切にマーキングすることにより提供されます.レジデンシャルNATが存在し、中継候補がデータ用に選択されると、この中継候補は実際のTURNサーバー上のトランスポートアドレスになります.そのアドレスは、QoS処理のためにパケットを分類するために使用されるアクセスルータの実際のトランスポートアドレスについては何も言いません.むしろ、

TURNサーバーに対するサーバー反射候補が必要です.SDPで変換を実行することにより、プロキシはそのトランスポートアドレスを使用して、アクセスルーターからQoSを要求できます.

B.4.STUNユーザー名の重要性

ICEでは、短期の資格情報機能を使用して、STUNでメッセージ整合性を使用する必要があります.実際の短期間の資格情報は、候補者交換でユーザー名フラグメントを交換することにより形成されます.このメカニズムの必要性は、単なるセキュリティを超えています.そもそもICEが正しく動作するために実際に必要です.

ICEエージェントL、R、およびZを検討してください.LおよびRは、10.0.0.0 / 8を使用している民間企業1内にあります.Zは、10.0.0.0 / 8を使用している民間企業2内にあります.結局のところ、RとZは両方ともIPアドレス10.0.1.1を持っています.LはZに候補を送信します.Zはホスト候補でLに応答します.この場合、それらの候補は10.0.1.1:8866および10.0.1.1:8877です.結局のところ、Rは同時にセッションに参加しており、ホスト候補として10.0.1.1:8866と10.0.1.1:8877も使用しています.これは、Zがそうであるように、RはそれらのポートでSTUNメッセージを受け入れる準備ができていることを意味します.Lは、STUN要求を10.0.1.1:8866に送信し、別の要求を10.0.1.1:8877に送信します.ただし、これらは予想どおりZに移動しません.代わりに、Rに移動します！Rが単にそれらに応答した場合、LはZとの接続を持っていると信じますが、実際には完全に異なるユーザーRとの接続を持っています.これを修正するために、STUN短期資格情報メカニズムが使用されます.ユーザー名フラグメントは十分にランダムです.したがって、RがZと同じ値を使用する可能性は非常に低いです.その結果、資格情報が無効であるため、RはSTUN要求を拒否します.本質的に、STUNユーザー名フラグメントは、一時的なホスト識別子の形式を提供し、候補交換の一部として確立された特定のセッションにバインドされます.

IPアドレスの非一意性の不幸な結果は、上記の例では、RがICEエージェントでさえない可能性があることです.それは任意のホストである可能性があり、STUNパケットが向けられるポートはそのホスト上の任意の一時ポートである可能性があります.このソケットでパケットをリッスンするアプリケーションがあり、使用中のプロトコルにかかわらず不正な形式のパケットを処理する準備ができていない場合、そのアプリケーションの動作が影響を受ける可能性があります.幸いなことに、交換されるポートは一時的なものであり、通常は動的または登録済みの範囲から引き出されるため、ホストRでサーバーを実行するためにポートが使用されず、一部のプロトコルのエージェント側である可能性が高くなります.これは、この範囲のポート使用の一時的な性質により、割り当てられたポートにヒットする可能性を減らします.ただし、問題が発生する可能性はありますが、そして、ネットワーク展開者はそれに備える必要があります.これはICE固有の問題ではないことに注意してください.漂遊パケットは、あらゆるタイプのプロトコル、特にパブリックインターネット上のプロトコルのポートにいつでも到着する可能性があります.そのため、この要件は、インターネットアプリケーションの一般的な設計ガイドラインを言い換えているだけです.あらゆるポートで未知のパケットに備えてください.

B.5.候補ペアの優先式

候補ペアの優先順位は奇妙な形をしています.それは：

ペアの優先度= 2 ^ 32 * MIN（G、D）+ 2 * MAX（G、D）+（G> D？1：0） 

どうしてこれなの？候補ペアがこの値に基づいてソートされる場合、結果のソートにはMAX / MINプロパティがあります.これは、2つの優先順位の最小値の減少に基づいてペアが最初にソートされることを意味します.最小優先度の値が同じペアの場合、最大優先度を使用してそれらの間でソートします.最大優先度と最小優先度が同じ場合、制御エージェントの優先度が式の最後の部分でタイブレーカーとして使用されます.単一の候補の優先度は常に2 * 32未満であるため、2 * 32の係数が使用され、ペアの優先度は2つのコンポーネントの優先度の「連結」になります.これにより、MAX / MINソートが作成されます.MAX / MINは、特定のICEエージェントに対して、

B.6.キープアライブが必要な理由

候補ペアでデータが流れ始めると、セッションの間中、中間NATでバインディングを維持する必要があります.通常、データストリームパケット自体（RTPなど）はこの目的を満たします.ただし、いくつかのケースでさらに議論する価値があります.まず、SIPなどの一部のRTPの使用法では、データストリームを「保留」にすることができます.これは、RFC 3264 [RFC3264]で定義されているように、SDPの「sendonly」または「inactive」属性を使用して実現されます.RFC 3264は、これらの場合にデータの送信を停止するように実装に指示します.ただし、そうすると、NATバインディングがタイムアウトになり、データが保留にならない場合があります.

第二に、テキスト会話[RFC4103]のペイロード形式など、一部のRTPペイロード形式は、間隔がNATバインディングタイムアウトを超えるほど頻繁にパケットを送信する場合があります. 

第三に、無音抑止が使用されている場合、無音の期間が長いと、データ送信がNATバインディングがタイムアウトするのに十分な時間停止する可能性があります. 



これらの理由により、データパケット自体は信頼できません.ICEは、STUN Binding Indicationsを利用した単純な定期的なキープアライブを定義しています.これにより、帯域幅の要件が非常に予測可能になり、QoSの予約が受け入れやすくなります.

B.7.なぜピア反射候補者を好むのですか？

セクション5.1.2では、候補のタイプとローカル設定に基づいて候補の優先度を計算する手順について説明します.そのセクションでは、ピア再帰候補のタイプ設定が常にサーバー再帰よりも高いことが必要です.何故ですか？理由は、セクション19のセキュリティの考慮事項に関係しています.攻撃者にとって、ICEエージェントに偽のピア反射候補ではなく、偽のサーバー反射候補を使用させる方がはるかに簡単です.その結果、バインディング要求を使用したアドレス収集に対する攻撃は、ピア反射候補を優先することにより、ICEによって阻止されます.

B.8.キープアライブにバインド表示が使用される理由

データキープアライブについては、セクション11で説明します.これらのキープアライブは、両方のエンドポイントがICE対応の場合にSTUNを使用します.ただし、キープアライブは、バインディング要求トランザクション（応答を生成する）を使用するのではなく、指示を使用します.何故ですか？

主な理由は、ネットワークQoSメカニズムに関係しています.データが流れ始めると、ネットワーク要素は、データストリームがかなり規則的な構造を持っていると仮定し、ジッタの可能性がある固定間隔で定期的なパケットを使用します.ICEエージェントがデータパケットを送信していて、バインド要求を受信した場合、データパケットとともに応答パケットを生成する必要があります.これにより、データパケットを運ぶ5タプルの実際の帯域幅要件が増加し、それらのパケットの配信にジッタが発生します.分析によると、これはデータ用にかなりタイトなパケットスケジューラを使用する特定のレイヤ2アクセスネットワークでの懸念事項です.

さらに、バインディング表示を使用すると、整合性を無効にできるため、パフォーマンスが向上する場合があります.これは、公衆交換電話網（PSTN）ゲートウェイやセッションボーダーコントローラー（SBC）などの大規模なエンドポイントに役立ちます.

B.9.候補タイプの設定の選択

タイプおよびローカルプリファレンス値を選択するための1つの基準は、TURNサーバーなどのデータ仲介者、VPNサーバーなどのトンネルサービス、またはNATの使用です.データ中間体では、データがその候補に送信されると、受信される前に最初にデータ中間体を通過します.データ仲介者が関与する候補の1つのタイプは、リレーされた候補です.別のタイプはホスト候補であり、VPNインターフェースから取得されます.データがデータ中継を介して通過する場合、送信と受信の間のレイテンシにプラスまたはマイナスの影響を与える可能性があります.追加のルーターホップが使用されるため、パケット損失が増加する場合と増加しない場合があります.データはプロバイダーによって実行されるデータ仲介者に送られ、すぐに送り返されるため、サービスを提供するコストが増加する可能性があります.

プリファレンスを選択する別の基準は、IPアドレスファミリです.ICEは、IPv4とIPv6の両方で機能します.これは、デュアルスタックホストがIPv6よりも接続を優先し、v6ネットワークが切断された場合にIPv4にフォールバックできるようにする移行メカニズムを提供します.実装は、[RFC8421]のガイドラインに従って、壊れたパスが存在する場合の接続性チェックフェーズでの過度の遅延を回避する必要があります.

プリファレンスを選択するためのもう1つの基準は、トポロジ認識です.これは、仲介者を利用する候補者にとって有益です.そのような場合、ICEエージェントが、仲介者とそれ自身のトポロジの近接性に関する知識を事前に構成または動的に発見した場合、それを使用して、より近い仲介者から取得した候補に高いローカルプリファレンスを割り当てることができます.

設定を選択するための別の基準は、セキュリティまたはプライバシーです.ユーザーが在宅勤務者であり、企業ネットワークおよびローカルホームネットワークに接続している場合、ユーザーは、企業内で通信するときに音声トラフィックをVPNまたは同様のトンネルでルーティングして企業ネットワークに保持することを好む場合があります企業外のユーザーと通信するときにローカルネットワークを使用する場合があります.このような場合、VPNアドレスは他のアドレスよりもローカルの優先度が高くなります.



























付録C.接続性チェック帯域幅 

以下の表は、IPv4およびIPv6について、さまざまなTa値（ミリ秒単位）とさまざまなufragサイズ（バイト単位）を使用して、接続性チェックを実行するために必要な帯域幅を示しています. 

結果は、2016年4月11日にJusin Uberti（Google）によって提供されました. 

IPバージョン：IPv4パケットlen（バイト）：108 + ufrag | ms | 4 8 12 16 ----- | ------------------------ 500 | 1.86k 1.98k 2.11k 2.24k 200 | 4.64k 4.96k 5.28k 5.6k 100 | 9.28k 9.92k 10.6k 11.2k 50 | 18.6k 19.8k 21.1k 22.4k 20 | 46.4k 49.6k 52.8k 56.0k 10 | 92.8k 99.2k 105k 112k 5 | 185k 198k 211k 224k 2 | 464k 496k 528k 560k 1 | 928k 992k 1.06M 1.12M

IPバージョン：IPv6パケットlen（バイト）：128 + ufrag | ms | 4 8 12 16 ----- | ------------------------ 500 | 2.18k 2.3k 2.43k 2.56k 200 | 5.44k 5.76k 6.08k 6.4k 100 | 10.9k 11.5k 12.2k 12.8k 50 | 21.8k 23.0k 24.3k 25.6k 20 | 54.4k 57.6k 60.8k 64.0k 10 | 108k 115k 121k 128k 5 | 217k 230k 243k 256k 2 | 544k 576k 608k 640k 1 | 1.09M 1.15M 1.22M 1.28M



図12：接続性チェック帯域幅 















謝辞 

このドキュメントのテキストのほとんどは、元のICE仕様であるRFC 5245に基づいています.著者は、そのドキュメントに貢献してくれたすべての人に感謝したいと思います.この仕様の改訂への追加の貢献については、エミール・イヴォフ、ポール・キジヴァト、パル・エリック・マーティンセン、サイモン・ペロー、エリック・レスコーラ、トーマス・スタッハ、ピーター・サッチャー、マーティン・トムソン、ジャスティン・ウベルティ、スハス・ナンダクマール、テイラー・ブランドステッター、ピーター・サン・アンドレ、ハラルド・アルベストランド、ローマン・シュポント.ベンキャンベルが広告レビューを行いました.Stephen Farrellがsec-dirレビューを行いました.スチュワートブライアントがgen-artレビューを行いました.Qin ops-dirレビューを行いました.Magnus Westerlundがtsv-artレビューを行いました.

著者のアドレス 

Ari Keranen Ericsson Hirsalantie 11 02420 Jorvas Finland 

メール：ari.keranen@ericsson.com 



Christer Holmberg Ericsson Hirsalantie 11 02420 Jorvas Finland 

メール：christer.holmberg@ericsson.com 



ジョナサンローゼンバーグjdrosen.netモンマス、ニュージャージー州アメリカ合衆国 

メール：jdrosen@jdrosen.net URI：http://www.jdrosen.net 













 
