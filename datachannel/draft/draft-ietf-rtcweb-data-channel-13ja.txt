Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Conventions . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Use Cases . . . . . . . . . . . . . . . . . . . . . . . . . .   3
     3.1.  Use Cases for Unreliable Data Channels  . . . . . . . . .   4
     3.2.  Use Cases for Reliable Data Channels  . . . . . . . . . .   4
   4.  Requirements  . . . . . . . . . . . . . . . . . . . . . . . .   4
   5.  SCTP over DTLS over UDP Considerations  . . . . . . . . . . .   6
   6.  The Usage of SCTP for Data Channels . . . . . . . . . . . . .   8
     6.1.  SCTP Protocol Considerations  . . . . . . . . . . . . . .   8
     6.2.  SCTP Association Management . . . . . . . . . . . . . . .   9
     6.3.  SCTP Streams  . . . . . . . . . . . . . . . . . . . . . .   9
     6.4.  Data Channel Definition . . . . . . . . . . . . . . . . .  10
     6.5.  Opening a Data Channel  . . . . . . . . . . . . . . . . .  10
     6.6.  Transferring User Data on a Data Channel  . . . . . . . .  11
     6.7.  Closing a Data Channel  . . . . . . . . . . . . . . . . .  12
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  13
   8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  13
   9.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  14
   10. References  . . . . . . . . . . . . . . . . . . . . . . . . .  14
     10.1.  Normative References . . . . . . . . . . . . . . . . . .  14
     10.2.  Informative References . . . . . . . . . . . . . . . . .  15
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  16
   
1.はじめに 

WebRTCフレームワークでは、パーティ間の通信はメディア（オーディオやビデオなど）と非メディアデータで構成されます. メディアはSRTPを使用して送信され、ここではこれ以上指定されません. 非メディアデータは、DTLSにカプセル化されたSCTP [RFC4960]を使用して処理されます. DTLS 1.0は[RFC4347]で定義され、現在の最新バージョンのDTLS 1.2は[RFC6347]で定義されています. 

                               +----------+
                               |   SCTP   |
                               +----------+
                               |   DTLS   |
                               +----------+
                               | ICE/UDP  |
                               +----------+

                       Figure 1: Basic stack diagram

ICE / UDP（[RFC5245]を参照）を介したSCTP over DTLS（[ID.ietf-tsvwg-sctp-dtls-encaps]を参照）のカプセル化は、機密性、ソース認証、および整合性保護転送とともにNATトラバーサルソリューションを提供します. このデータトランスポートサービスはSRTPメディアトランスポートと並行して動作し、最終的にすべてが単一のUDPポート番号を共有できます. 

[RFC3758]で定義された部分的信頼性拡張と[ID.ietf-tsvwg-sctp-prpolicies]で定義された追加ポリシーを備えた[RFC4960]で指定されたSCTPは、複数のストリームをネイティブに提供します. ユーザーメッセージ. [RFC6525]で定義された再構成拡張を使用すると、SCTPアソシエーションのライフタイム中にストリームの数を増やし、個々のSCTPストリームをリセットできます. [ID.ietf-tsvwg-sctp-ndata]を使用すると、大きなメッセージをインターリーブして独占を回避し、SCTPストリームの優先順位付けのサポートを追加できます. 

このドキュメントの残りの部分は、次のように構成されています. セクション3およびセクション4は、信頼性のない信頼できるピアツーピアデータチャネルのユースケースと要件を提供します. セクション5では、UDP上のDTLS上のSCTPについて説明します. セクション6は、Webブラウザ間で非メディアデータを転送するためにWebRTCプロトコルフレームワークがSCTPを使用する方法の仕様を提供します. 

2.コンベンション 

このドキュメントのキーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「MAY」、および「OPTIONAL」は[RFC2119]で説明されているように解釈されます.  

3.ユースケース 

このセクションでは、データチャネルに固有のユースケースを定義します. このセクションは情報提供のみであることに注意してください. 

3.1. 信頼できないデータチャネルの使用例

UC 1：位置およびオブジェクトの状態情報が1つ以上の信頼性の低いデータチャネルを介して送信されるリアルタイムゲーム. SRTPメディアチャネルが存在しない場合や、すべてのSRTPメディアチャネルが非アクティブである場合や、使用中の信頼できるデータチャネルがある場合があることに注意してください. 

UC 2：ミュート状態など、ビデオチャットまたは会議の状態更新の理由に関する重要でない情報をユーザーに提供します.  

3.2. 信頼できるデータチャネルの使用例

UC 3：制御情報などの重要な状態情報を転送する必要があるリアルタイムゲーム. このようなゲームにはSRTPメディアチャネルがない場合や、任意の時点で非アクティブである場合があります. また、ゲーム内のアクションのためにのみ追加される場合もあります. 

UC 4：チャット中のユーザー間の非リアルタイムのファイル転送. これには、画像のフォルダーやファイルのディレクトリを共有する場合など、多数のファイルを順次または並行して転送する必要があることに注意してください. 

UC 5：会議中の個人または複数の人との音声および/またはビデオ通話中のリアルタイムテキストチャット.  

UC 6：PeerConnectionの構成の再ネゴシエーション.  

UC 7：プロキシブラウジング. ブラウザがPeerConnectionのデータチャネルを使用してHTTP / HTTPS要求とデータを送受信します. たとえば、ローカルインターネットフィルタリングや監視を回避します.  

4.要件 

このセクションでは、2つのブラウザー間のP2Pデータチャネルの要件を示します. このセクションは情報提供のみであることに注意してください. 

必須 1：複数の同時データチャネルをサポートする必要があります. 同じPeerConnectionのデータチャネルと並行して0個以上のSRTPメディアストリームが存在する場合があり、これらのSRTPメディアストリームの数と状態（アクティブ/非アクティブ）はいつでも変化することに注意してください. 

必須 2：信頼できるデータチャネルと信頼できないデータチャネルの両方をサポートする必要があります. 

必須 3：PeerConnectionのデータチャネルは輻輳を制御する必要があります. 個別に、クラスとして、またはPeerConnectionのSRTPメディアストリームと組み合わせて、データチャネルがこれらのSRTPメディアストリームの輻輳問題を引き起こさず、WebRTC PeerConnectionが並列実行時に過度の問題を引き起こさないようにするTCP接続で. 

必須 4：アプリケーションは、各データチャネルの相対的な優先度、およびSRTPメディアストリームに対する相対的な優先度に関するガイダンスを提供できる必要があります. これは、輻輳制御アルゴリズムと相互作用します. 

必須 5：データチャネルを保護する必要があります. 機密性、完全性、ソース認証を可能にします. 詳細については、[ID.ietf-rtcweb-security]および[ID.ietf-rtcweb-security-arch]を参照してください. 

必須 6：データチャネルは、メッセージの断片化サポートを提供する必要があります. これにより、JavaScriptアプリケーションが送信するメッセージのサイズに関係なく、IPレイヤーの断片化を回避できます. また、大規模なデータチャネル転送が他のデータチャネルのトラフィックを過度に遅延させないようにする必要があります. 

必須 7：データチャネルトランスポートプロトコルは、プロトコルフィールド内のローカルIPアドレスをエンコードしないでください. これを行うと、潜在的に個人情報が明らかになり、アドレスに依存している場合は失敗につながります. 

必須 8：データチャネルトランスポートプロトコルは、イメージファイル転送など、アプリケーション層で無制限の長さの「メッセージ」（つまり、仮想ソケットストリーム）をサポートする必要があります. 実装により、合理的なメッセージサイズ制限が適用される場合があります. 

必須 9：データチャネルトランスポートプロトコルは、IPフラグメンテーションを回避する必要があります. PMTU（パスMTU）ディスカバリーをサポートする必要があり、特にPMTUディスカバリーに関して、ICMPまたはICMPv6が生成または返送されることに依存してはなりません. 

必須 10：ユーザーアプリケーション空間にプロトコルスタックを実装できる必要があります. 


5. UDP上のSCTP over DTLSに関する考慮事項 

WebRTCコンテキストにおけるSCTPの重要な機能は次のとおりです.  

o TCPフレンドリな輻輳制御の使用.  

o輻輳制御は、SRTPメディアストリーム輻輳制御との統合のために変更可能です.  

o複数の単方向ストリームのサポート. それぞれが順序付けられたメッセージ配信の独自の概念を提供します.  

o順序付けられた、または順序が正しくないメッセージ配信のサポート.  

oフラグメンテーションと再アセンブリを提供することにより、任意の大きなユーザーメッセージをサポートします.  

o PMTUディスカバリーのサポート.  

o信頼できるまたは部分的に信頼できるメッセージ転送のサポート.  

WebRTCデータチャネルメカニズムは、SCTPマルチホーミングをサポートしていません. SCTPレイヤーは、DTLSレイヤー（接続指向の信頼性の低いデータグラムサービス）が公開する抽象化であるため、シングルホームホストで実行されているかのように単純に機能します. 

[ID.ietf-tsvwg-sctp-dtls-encaps]で定義されているDTLSを介したSCTPのカプセル化は、機密性、ソース認証、および整合性保護転送を提供します. ICEと組み合わせてDTLS over UDPを使用すると、IPv4およびIPv6ベースのネットワークでミドルボックストラバーサルが可能になります. [RFC4960]で指定されているSCTPは、[RFC3758]で定義されている拡張機能と組み合わせて使用​​する必要があり、ブラウザ間で非メディアデータを転送するための次の機能を提供します. 

o複数の単方向ストリームのサポート.  

oユーザーメッセージの順序付きおよび順序なし配信.  

o信頼性が高く部分的に信頼性の高いユーザーメッセージの転送.  

各SCTPユーザーメッセージには、送信側の上位層によってSCTPに渡され、受信側の上位層に提供されるペイロードプロトコル識別子（PPID）が含まれています. PPIDを使用して、単一のSCTPアソシエーションで複数の上位層を多重化/逆多重化できます. WebRTCのコンテキストでは、PPIDを使用して、UTF-8エンコードのユーザーデータ、バイナリエンコードのユーザーデータ、および

[ID.ietf-rtcweb-data-protocol]. PPIDはJavascript APIを介してアクセスできないことに注意してください. 

DTLSを介したSCTPのカプセル化は、上記のSCTP機能とともに、セクション4に記載されているすべての要件を満たしています.  

WebRTCのプロトコルの階層化を次の図2に示します.  

                                 +------+------+------+
                                 | DCEP | UTF-8|Binary|
                                 |      | data | data |
                                 +------+------+------+
                                 |        SCTP        |
                   +----------------------------------+
                   | STUN | SRTP |        DTLS        |
                   +----------------------------------+
                   |                ICE               |
                   +----------------------------------+
                   | UDP1 | UDP2 | UDP3 | ...         |
                   +----------------------------------+

                     Figure 2: WebRTC protocol layers

このスタックは（特にDTP over SCTP [RFC6083]とSCTP over UDP [RFC6951]の組み合わせとは対照的に）選択されたため、 

o任意の大きなユーザーメッセージの送信をサポートします.  

o DTLS接続をPeerConnectionのSRTPメディアチャネルと共有します.  

o SCTP制御情報のプライバシーを提供します.  

図2のプロトコルスタックを考慮すると、UDPを介したDTLS 1.0の使用は[RFC4347]で指定され、UDPを介したDTLS 1.2の使用は[RFC6347]で指定され、DTLS上のSCTPの使用は[ID.  ietf-tsvwg-sctp-dtls-encaps]. [RFC5764]のセクション5.1.2で説明されているように、STUN対SRTP対DTLSの逆多重化が行われ、SCTPがDTLSの唯一のペイロードであることに注意してください. 

DTLSは通常ユーザーアプリケーションスペースに実装されるため、SCTPスタックもユーザーアプリケーションスペーススタックである必要があります.  

ICE / UDPレイヤーは、DTLSレイヤーおよびSCTPレイヤーとの対話を必要とせずに、セッション中にIPアドレスの変更を処理できます. ただし、SCTPは、アドレスが変更されたときに通知される必要があります. この場合、SCTPはパスMTUを再テストし、輻輳状態を初期状態にリセットする必要があります（SHOULD）. [RFC4960]で指定されているようなウィンドウベースの輻輳制御の場合、これは輻輳ウィンドウとスロースタートのしきい値を初期値に設定することを意味します. 

対応するアソシエーションを識別する方法がないため、着信ICMPまたはICMPv6メッセージはSCTPレイヤーで処理できません. したがって、SCTPは、[RFC4820]で指定されたプローブメッセージを使用して、[RFC4821]で指定されたICMPまたはICMPv6に依存することなく、パスMTUディスカバリの実行をサポートしなければなりません. IP層の初期パスMTUは、IPv4では1200バイト、IPv6では1280バイトを超えてはなりません. 

一般に、SCTP実装の下位層インターフェースは、IPv4とIPv6（コネクションレス）またはDTLS（コネクション指向）の違いに対処するように適合させる必要があります.  

図2のプロトコルスタックを使用すると、DTLSは完全なSCTPパケットを保護するため、完全なSCTPパケットの機密性、整合性、およびソース認証が提供されます.  

SCTPは、関連付けごとに輻輳制御を提供します. これは、単一のSCTPアソシエーション内のすべてのSCTPストリームが同じ輻輳ウィンドウを共有することを意味します. SCTPを介して送信されないトラフィックは、SCTP輻輳制御の対象外です. 標準とは異なる輻輳制御を使用すると、並列SRTPメディアストリームへの影響が改善される場合があります. 

SCTPは、TCPおよびUDPと同じポート番号の概念を使用します. したがって、SCTPアソシエーションは、SCTPエンドポイントごとに1つずつ、2つのポート番号を使用します. 

6.データチャネルでのSCTPの使用 

6.1. SCTPプロトコルの考慮事項

[ID.ietf-tsvwg-sctp-dtls-encaps]で説明されているSCTPパケットのDTLSカプセル化を使用する必要があります.  

このSCTPスタックとその上位層は、複数のSCTPストリームの使用をサポートしなければなりません. ユーザーメッセージは、順序付きまたは順序なしで、部分的または完全な信頼性で送信できます. 

次のSCTPプロトコル拡張が必要です.  

o [RFC6525]で定義されたストリーム再構成拡張はサポートされなければなりません. チャネルを閉じるために使用されます. 

o [RFC5061]で定義された動的アドレス再構成拡張を使用して、[RFC6525]で定義されたストリームリセット拡張のサポートを通知する必要があります. [RFC5061]の他の機能はオプションです. 

o [RFC3758]で定義された部分的な信頼性拡張をサポートしなければなりません. [RFC3758]で定義された時限信頼性PR-SCTPポリシーに加えて、[ID.ietf-tsvwg-sctp-prpolicies]で定義された制限された再送信ポリシーをサポートする必要があります. 再送信回数を無秩序配信と組み合わせてゼロに制限すると、各ユーザーメッセージが一度だけ送信され、受信した順に配信されるUDPのようなサービスが提供されます. 

[ID.ietf-tsvwg-sctp-ndata]で定義されているメッセージインターリーブのサポートを使用する必要があります.  

6.2. SCTPアソシエーション管理

WebRTCコンテキストでは、JSEP（通常はSDPの交換）[ID.ietf-rtcweb-jsep]によってネゴシエートされたように、WebRTC PeerConnectionの2つのエンドポイントがWebRTC PeerConnectionのオープンに合意すると、SCTPアソシエーションがセットアップされます. ICEを介して選択されたDTLS接続を使用します. 通常、これは、バンドルまたはSRTPメディアストリームのキー設定に使用されるDTLS接続と同等のものを介して共有されます. 

SCTPアソシエーションのセットアップ中にネゴシエートされるストリームの数は65535である必要があります. これは、アソシエーションのセットアップ中にネゴシエートできるストリームの最大数です.  

SCTPは、SCTPアソシエーションを終了する2つの方法をサポートしています. アソシエーションのシャットダウン中にメッセージが失われないことを保証する手順を使用した、優雅な方法. 2番目の方法は、一方がアソシエーションを中止するだけの非優雅な方法です. 

各SCTPエンドポイントは、ユーザーメッセージとテストメッセージの再送信回数を監視することにより、ピアの到達可能性を継続的に監視します. 過度の再送信の場合、関連付けは非正常な方法で終了します. 

SCTPアソシエーションが適切な方法で閉じられた場合、そのデータチャネルはすべて閉じられます. 非正常なティアダウンの場合、すべてのデータチャネルも閉じられますが、可能であればエラー表示を提供する必要があります. 

6.3. SCTPストリーム

SCTPは、別のSCTPエンドポイントへのSCTPアソシエーション内に存在する単方向論理チャネルとしてストリームを定義します. ストリームは、シーケンス配信の概念を提供し、多重化するために使用されます. 各ユーザーメッセージは、特定のストリームで送信され、順序付けられているか順序付けられていません. 順序は、同じストリームで送信された順序付きメッセージに対してのみ保持されます. 

6.4. データチャネルの定義

データチャネルは、付随するアプリケーションレベルのAPIがWebSocketのAPIを厳密に反映できるように定義されます. これは、データの双方向ストリームと、データチャネルの意味を識別するために使用される「ラベル」と呼ばれるテキストフィールドを意味します.  

データチャネルの実現は、同じSCTPストリーム識別子を持つ1つの着信ストリームと1つの発信SCTPストリームのペアです. これらのSCTPストリーム識別子の選択方法は、プロトコルと実装に依存します. これにより、双方向通信が可能になります. 

さらに、各データチャネルには、各方向に次のプロパティがあります.  

o信頼できるまたは信頼できないメッセージ送信. 信頼性のない送信の場合、同じレベルの信頼性が使用されます. SCTPでは、これはSCTPストリームではなく、SCTPユーザーメッセージのプロパティであることに注意してください. 

o送信されたメッセージのインオーダーまたはアウトオブオーダーのメッセージ配信. SCTPでは、これはSCTPストリームではなく、SCTPユーザーメッセージのプロパティであることに注意してください. 

o優先度. 2バイトの符号なし整数です. これらの優先度は、[ID.ietf-tsvwg-sctp-ndata]でのインターリービングをサポートする対応するストリームスケジューラの定義に従って、重み付け公平キュースケジューリング優先度として解釈されなければなりません. WebRTCで使用する場合、使用される値は、128（「標準以下」）、256（「標準」）、512（「高」）、または1024（「超高」）のいずれかである必要があります. 

oオプションのラベル.  

oオプションのプロトコル.  

[ID.ietf-rtcweb-data-protocol]で指定されたプロトコルとネゴシエートされるデータチャネルの場合、上記のプロパティはすべて双方向で同じであることに注意してください.  

6.5.  Opening a Data Channel
6.5. データチャネルを開く

データチャネルは、in-band negotiationまたはout-band negotiationと呼ばれるSCTPアソシエーション内のネゴシエーションを使用して開くことができます. Out-of-band negotiationは、チャネルのパラメータとその作成に関して合意に至る方法として定義されます. 詳細はこのドキュメントの範囲外です. データチャネルを使用するアプリケーションは、両方のエンドポイントで一貫してネゴシエーション方式を使用する必要があります. 

in-band negotiationの簡単なプロトコルは、[ID.ietf-rtcweb-data-protocol]で指定されています.  

一方がOut-of-band negotiationを使用してチャネルを開く場合、ストリームを選択します. 特に定義またはネゴシエートされない限り、ストリームはDTLSロールに基づいて選択されます（クライアントは偶数のストリーム識別子、サーバーの奇数のストリーム識別子を選択します）. ただし、アプリケーションは既存のストリームとの衝突を回避する責任があります. 既存のデータチャネルの一部であるストリームを再利用しようとする場合、追加は失敗しなければなりません. ストリームの選択に加えて、アプリケーションは、メッセージの送信に使用するオプションも決定する必要があります. アプリケーションは、アプリケーション固有の方法で、ピアのアプリケーションが使用される選択されたストリームと、その側からデータを送信するためのオプションを知っていることを保証しなければなりません. 

6.6. データチャネルでのユーザーデータの転送

オプションが変更されない限り、またはメッセージごとのオプションがより高いレベルで指定されない限り、データチャネルで双方向に送信されるすべてのデータは、データチャネルが開かれたときに定義された信頼性を使用して、基になるストリームを介して送信されなければなりません.  

SCTPのメッセージ指向は、ユーザーメッセージのメッセージ境界を保持するために使用されます. したがって、送信者は複数のアプリケーションメッセージをSCTPユーザーメッセージに入れてはなりません. 非推奨のPPIDベースのフラグメンテーションと再アセンブリが使用されない限り、送信者は各SCTPユーザーメッセージにアプリケーションメッセージを1つだけ含める必要があります. 

SCTPペイロードプロトコル識別子（PPID）は、「ペイロードデータ」の解釈を通知するために使用されます. 次のPPIDを使用する必要があります（セクション8を参照）. 

WebRTC文字列：UTF-8でエンコードされた空でないJavaScript文字列を識別します.  

WebRTC String Empty：UTF-8でエンコードされた空のJavaScript文字列を識別します.  

WebRTCバイナリ：空でないJavaScriptバイナリデータ（ArrayBuffer、ArrayBufferView、またはBlob）を識別します.  

WebRTC Binary Empty：空のJavaScriptバイナリデータ（ArrayBuffer、ArrayBufferViewまたはBlob）を識別します.  

SCTPは、空のユーザーメッセージの送信をサポートしていません. したがって、空のメッセージを送信する必要がある場合、適切なPPID（WebRTC String EmptyまたはWebRTC Binary Empty）が使用され、1バイトのSCTPユーザーメッセージが送信されます. これらのPPIDのいずれかでSCTPユーザーメッセージを受信する場合、受信者はSCTPユーザーメッセージを無視し、空のメッセージとして処理する必要があります. 

PPIDの「WebRTC String Partial」および「WebRTC Binary Partial」の使用は非推奨です. これらは、信頼できる順序付けられたデータチャネルに属するユーザーメッセージのPPIDベースのフラグメンテーションと再アセンブリに使用されました. 

サポートされていないPPIDのメッセージを受信した場合、または受信したメッセージに関連するエラー条件が受信者によって検出された場合（たとえば、不正な順序）、受信者は対応するデータチャネルを閉じる必要があります（SHOULD）. これは、特に、追加のPPIDを使用する拡張機能は事前の交渉なしでは使用できないことを意味します. 

[RFC4960]で指定されたSCTPベースプロトコルは、ユーザーメッセージのインターリーブをサポートしていません. したがって、大きなユーザーメッセージを送信すると、SCTPアソシエーションが独占される可能性があります. この制限を克服するために、[ID.ietf-tsvwg-sctp-ndata]は、メッセージインターリービングをサポートするための拡張機能を定義します（使用する必要があります）. メッセージのインターリーブがサポートされていない限り、送信者は、独占を避けるために最大メッセージサイズを16 KBに制限する必要があります. 

アプリケーションは任意のサイズの単一メッセージをサポートできないため、メッセージサイズを特定のサイズの範囲内に維持することをお勧めします. この制限は、たとえば[ID.ietf-mmusic-sctp-sdp]を使用してネゴシエートする必要があります. 

送信者は、遅延を最小限に抑えるために、Nagleアルゴリズムを無効にする必要があります（[RFC1122]を参照）.  

6.7. データチャネルを閉じる

データチャネルの終了は、対応する発信ストリームをリセットすることで通知する必要があります[RFC6525]. これは、一方がデータチャネルを閉じることにした場合、対応する発信ストリームをリセットすることを意味します. ピアは、着信ストリームがリセットされたことを認識すると、対応する発信ストリームもリセットします. これが完了すると、データチャネルは閉じられます. ストリームをリセットすると、ストリームのストリームシーケンス番号（SSN）が「ゼロ」に戻り、リセットが実行されたことがアプリケーションレイヤーに通知されます. リセットが実行された後、ストリームを再利用できます. 

[RFC6525]は、ストリームがリセットされる前にすべてのメッセージが配信（または破棄）されることも保証します.  

7.セキュリティに関する考慮事項 

このドキュメントは、[ID.ietf-rtcweb-security]および[ID.ietf-rtcweb-security-arch]に記載されている事項に追加の考慮事項を追加しません.  

受信者は、送信者が任意の大きなメッセージを送信しようとすることに注意する必要があります.  

8. IANAの考慮事項 

[RFCエディターへの注意： 

「RFCXXXX」は、このドキュメントに割り当てるRFC番号に置き換えられます.  

] 

このドキュメントでは、6つの登録済みSCTPペイロードプロトコル識別子（PPID）を使用します：「DOMString Last」、「Binary Data Partial」、「Binary Data Last」、「DOMString Partial」、「WebRTC String Empty」、および「WebRTC Binary Empty」. [RFC4960]は、これらの識別子が割り当てられたレジストリ「SCTP Payload Protocol Identifiers」を作成します. IANAは、これらの6つの割り当ての参照を更新して、このドキュメントをポイントし、最初の4つのPPIDの名前を変更するように要求されます. 対応する日付を保持する必要があります. 

したがって、これらの6つの割り当ては、次のように更新する必要があります.  

   +-------------------------------+----------+-----------+------------+
   | Value                         | SCTP     | Reference | Date       |
   |                               | PPID     |           |            |
   +-------------------------------+----------+-----------+------------+
   | WebRTC String                 | 51       | [RFCXXXX] | 2013-09-20 |
   | WebRTC Binary Partial         | 52       | [RFCXXXX] | 2013-09-20 |
   | (Deprecated)                  |          |           |            |
   | WebRTC Binary                 | 53       | [RFCXXXX] | 2013-09-20 |
   | WebRTC String Partial         | 54       | [RFCXXXX] | 2013-09-20 |
   | (Deprecated)                  |          |           |            |
   | WebRTC String Empty           | 56       | [RFCXXXX] | 2014-08-22 |
   | WebRTC Binary Empty           | 57       | [RFCXXXX] | 2014-08-22 |
   +-------------------------------+----------+-----------+------------+

Harald Alvestrand、Richard Barnes、Adam Bergkvist、Alissa Cooper、Benoit Claise、Spencer Dawkins、Gunnar Hellstrom、Christer Holmberg、Cullen Jennings、Paul Kyzivat、Eric Rescorla、Adam Roach、Irene Ruengeler、Randallからのコメント、アイデア、テキストに感謝しますスチュワート、マーティン・スティーマーリング、ジャスティン・ウベルティ、マグナス・ウェスターランド.  

10.参照 

10.1. 規範的参考文献

[RFC2119] Bradner、S.、「要求レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、1997年3月.  

[RFC3758] Stewart、R.、Ramalho、M.、Xie、Q.、Tuexen、M. 、およびP. Conrad、「ストリーム制御伝送プロトコル（SCTP）部分信頼性拡張」、RFC 3758、2004年5月 

[RFC4347] Rescorla、E. およびN. Modadugu、「データグラムトランスポート層セキュリティ」、RFC 4347、2006年4月.  

[RFC4820] Tuexen、M. 、スチュワート、R. 、およびP. Lei、「ストリーム制御伝送プロトコル（SCTP）のパディングチャンクおよびパラメーター」、RFC 4820、2007年3月.  

[RFC4821] Mathis、M. 、およびJ. Heffner、「パケット化層パスMTUディスカバリー」、RFC 4821、2007年3月.  

[RFC4960]スチュワート、R. 、「ストリーム制御伝送プロトコル」、RFC 4960、2007年9月.  

[RFC5061] Stewart、R.、Xie、Q.、Tuexen、M.、Maruyama、S.、およびM. Kozuka、 "Stream Control Transmission Protocol（SCTP）Dynamic Address Reconfiguration"、RFC 5061、September 2007.  

[RFC5245]ローゼンバーグ、J. 、「対話型接続確立（ICE）：オファー/アンサープロトコルのネットワークアドレス変換（NAT）トラバーサルのプロトコル」、RFC 5245、2010年4月.  

[RFC6347] Rescorla、E.、N. Modadugu、「データグラムトランスポートレイヤーセキュリティバージョン1.2」、RFC 6347、2012年1月.  

[RFC6525]スチュワート、R.、Tuexen、M. 、およびP.レイ、「Stream Control Transmission Protocol（SCTP）Stream Reconfiguration」、RFC 6525、2012年2月. [ID.ietf-tsvwg-sctp-ndata] Stewart、R . 、Tuexen、M.、Loreto、S. 、およびR. Seggelmann、「ストリームスケジューラとストリーム制御伝送プロトコルの新しいデータチャンク」、draft-ietf-tsvwg-sctp- ndata-01（作業中）、 2014年7月.  

[ID.ietf-rtcweb-data-protocol] Jesup、R.、Loreto、S. 、およびM. Tuexen、「WebRTCデータチャネル確立プロトコル」、draft-ietf-rtcweb-data-protocol-08（作業中） 、2014年9月.  

[ID.ietf-tsvwg-sctp-dtls-encaps] Tuexen、M.、Stewart、R.、Jesup、R. 、およびS. Loreto、「SCTPパケットのDTLSカプセル化」、draft-ietf-tsvwg-sctp- dtls -encaps-07（作業中）、2014年12月.  

[ID.ietf-rtcweb-security] Rescorla、E. 、「WebRTCのセキュリティに関する考慮事項」、draft-ietf-rtcweb-security-07（作業中）、2014年7月.  

[ID.ietf-rtcweb-security-arch] Rescorla、E. 、「WebRTC Security Architecture」、draft-ietf-rtcweb-security-arch-10（作業中）、2014年7月.  

[ID.ietf-rtcweb-jsep] Uberti、J.、Jennings、C. 、およびE. Rescorla、「Javascriptセッション確立プロトコル」、draft-ietf-rtcweb-jsep-08（作業中）、2014年10月.  

[ID.ietf-tsvwg-sctp-prpolicies] Tuexen、M.、Seggelmann、R.、Stewart、R. 、およびS. Loreto、「ストリーム制御伝送プロトコルの部分信頼性拡張のための追加ポリシー」、draft-ietf -tsvwg-sctp-prpolicies-06（作業中）、2014年12月.  

[ID.ietf-mmusic-sctp-sdp] Holmberg、C.、Loreto、S. 、およびG. Camarillo、「セッション記述プロトコル（SDP）のストリーム制御伝送プロトコル（SCTP）ベースのメディアトランスポート」、ドラフトietf- mmusic-sctp-sdp-11（作業中）、2014年12月.  

10.2. 参考資料

[RFC1122]ブレーデン、R. 、「インターネットホストの要件-通信層」、STD 3、RFC 1122、1989年10月.  



[RFC5764] McGrew、D. 、およびE. Rescorla、「セキュアリアルタイムトランスポートプロトコル（SRTP）のキーを確立するためのデータグラムトランスポート層セキュリティ（DTLS）拡張」、RFC 5764、2010年5月.  

[RFC6083] Tuexen、M.、Seggelmann、R. 、およびE. Rescorla、「ストリーム制御伝送プロトコル（SCTP）のデータグラムトランスポート層セキュリティ（DTLS）」、RFC 6083、2011年1月.  

[RFC6951] Tuexen、M.、R. Stewart、「エンドホスト間通信のためのストリーム制御伝送プロトコル（SCTP）パケットのUDPカプセル化」、RFC 6951、2013年5月.  

著者のアドレス 

Randell Jesup Mozilla US 

メール：randell-ietf@jesup.org 



サルバトーレロレトエリクソンヒルサランティ11ヨルバス02420 FI 

メール：salvatore.loreto@ericsson.com 



Michael Tuexen Muenster応用科学大学Stegerwaldstrasse 39 Steinfurt 48565 DE 

メール：tuexen@fh-muenster.de


