RFCトランス
個人情報保護方針
連絡先
イチジク
@ tex2e
4572
RFC 4572-Session Description Protocol（SDP）日本語訳のトランスポート層セキュリティ（TLS）プロトコルを介したコネクション型メディアトランスポート
URL：https：//tools.ietf.org/html/rfc4572
パッケージ：RFC 4572-セッション記述プロトコル（SDP）のトランスポート層セキュリティ（TLS）プロトコルを介したコネクション型メディアトランスポート
翻訳：自動翻訳
ネットワークワーキンググループJ.レノックス
コメントの要求：4572コロンビアU. 
更新：4145 2006年7月
カテゴリ：標準化過程
        
セッション記述プロトコル（SDP）のトランスポート層セキュリティ（TLS）プロトコルを介したコネクション型メディアトランスポート

このメモのステータス

このドキュメントは、インターネットコミュニティのインターネット標準追跡プロトコルを指定し、改善のための議論と提案を要求します. このプロトコルの標準化の状態とステータスについては、「インターネット公式プロトコル標準」（STD 1）の最新版を参照してください. このメモの配布は無制限です. 

著作権表示

Copyright（C）The Internet Society（2006）. 

概要

このドキュメントでは、Session Description Protocol（SDP）を使用して、Transport Layer Security（TLS）プロトコルを介して安全なコネクション型メディアトランスポートセッションを確立する方法を指定します. これは、新しいSDPプロトコル識別子「TCP / TLS」を定義します. また、TLSセッションに提示される証明書を識別するSDPの「フィンガープリント」属性の構文とセマンティクスも定義します. このメカニズムにより、セッション記述の整合性が保証されている限り、TLS接続を介したメディア転送を安全に確立できます. 

このドキュメントはRFC4145を拡張および更新します. 

目次

   1.はじめに.........................................................  ..... 3
   2.用語...............................................  ...... 4
   3.概要.........................................................  ......... 4
      3.1. SDP動作モード...................................... 4
      3.2. 脅威モデル............................................... 5
      3.3. 自己署名証明書の必要性...................... 5
      3.4. TLS接続のSDP記述の例................. 6
   4.プロトコル識別子............................................ 6
   5.指紋属性........................................... 7
   6.エンドポイントの識別......................................... 9
      6.1. 証明書の選択......................................... 9
      6.2. 証明書の提示.................................. 10
   7.セキュリティに関する考慮事項........................................ 10
   8.IANAの考慮事項............................................ 12
   9.参考文献...............................................  ...... 14
      9.1. 規範的参考文献...................................... 14
      9.2. 有益な参考資料.................................... 15
        
1.はじめに
セッション記述プロトコル（SDP）[1]は、アナウンスまたは招待状でマルチメディアセッションを記述するための汎用フォーマットを提供します. 多くのアプリケーションでは、マルチメディアセッションの一部として、コネクション型トランスポートを使用するメディアストリームを確立することが望ましいです. RFC 4145、セッション記述プロトコル（SDP）[2]のコネクション型メディアトランスポートは、そのようなコネクション型ストリームを記述および確立するための一般的なメカニズムを指定します. ただし、直接サポートするトランスポートプロトコルはTCPのみです. 多くの場合、セッション参加者は、メディアセッションの機密性、データの整合性、および認証を提供したいと考えています. 

TLSプロトコルを使用すると、アプリケーションは、機密性とデータの整合性を提供するチャネルを介して通信できます. ただし、TLS仕様では、特定のプロトコルがこの安全なチャネルを確立して使用する方法は指定されていません. 特に、TLSは、TLS上で実行されるプロトコルの問題として、認証証明書をどのように解釈および検証するかという問題を残しています. このドキュメントでは、コネクション型メディアトランスポートの場合のそのような使用法を指定します. 

この問題を複雑にしているのは、メディアを交換するエンドポイントが、有名なルート証明機関（CA）によって署名された認証証明書を取得できないことがよくあることです. ほとんどの認証局は、署名された証明書、特にホストベースの証明書に対して課金します. さらに、認証局は署名付き証明書を正しい当事者に発行していることを確認できなければならないため、署名付き証明書を取得するにはかなりの管理オーバーヘッドがあります. さらに、多くの場合、エンドポイントのIPアドレスとホスト名は動的です. たとえば、DHCPから取得できます. DHCPリースの期間中有効なCA署名付き証明書を取得することは実用的ではありません. このようなホストの場合、通常、自己署名証明書が唯一のオプションです. この仕様は、SDP記述の整合性が保証されている場合に、自己署名証明書を安全に使用できるようにするメカニズムを定義します. エンドポイントは、セッションの説明内に「証明書フィンガープリント」と呼ばれる証明書の安全なハッシュを含めることができます. 提供された証明書のフィンガープリントがセッションの説明のフィンガープリントと一致する場合、エンドホストは自己署名証明書も信頼できます. 

このドキュメントの残りの部分は、次のようにレイアウトされています. 問題と脅威のモデルの概要はセクション3に記載されています. セクション4は、SDPでTLSベースのコネクション型メディアを確立するための基本的なメカニズムを示しています. セクション5では、SDPフィンガープリント属性について説明します. これは、SDPコンテンツの整合性が保証されていることを前提として、自己署名証明書の安全な使用を可能にします. セクション6では、提示されるX.509証明書と、それらがTLSでどのように使用されるかについて説明します. セクション7では、追加のセキュリティの考慮事項について説明します. 

2.用語
このドキュメントでは、キーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「MAY」、「OPTIONAL」 RFC 2119 [4]で説明されているように解釈され、準拠する実装の要件レベルを示します. 

3.概要
このセクションでは、コネクション型メディアストリームのTLSトランスポートを動機付ける脅威モデルについて説明します. また、エンドシステムが自己署名証明書を使用する必要性についても詳しく説明します. 

3.1. SDP動作モード
マルチメディアセッションには、アドバタイズとオファーアンサーの2つの主要な操作モードがあります. アドバタイズされたセッションは、より単純なモードです. このモードでは、サーバーは、何らかの方法で、利用可能にしているマルチメディアセッションのSDPセッション記述を公開します. この動作モードの典型的な例は、Session Announcement Protocol（SAP）[15]です. このプロトコルでは、SDPセッションの説明が既知のマルチキャストグループに定期的に送信されます. 従来、これらの説明にはマルチキャスト会議が含まれていましたが、ユニキャストセッションも可能です. （コネクション型メディアは、明らかにマルチキャストを使用できません. ）セッション記述の受信者は、セッション記述で公開されているアドレスに接続します. これらの受信者は、セッションの説明の広告主に以前は知られていない可能性があります. 

あるいは、SDP会議はオファーアンサーモードで動作できます[5]. このモードでは、マルチメディアセッションの2人の参加者が、それらの間でマルチメディアセッションをネゴシエートできます. このモデルでは、一方の参加者がもう一方の参加者にその観点から目的のセッションの説明を提供し、もう一方の参加者が自身の観点から目的のセッションで応答します. このモードでは、セッションの各参加者は他の参加者の知識を持っています. これは、Session Initiation Protocol（SIP）[16]で使用される動作モードです. 

3.2. 脅威モデル
マルチメディア会議の参加者は、メディアセッションの機密性、データの整合性、および認証を保証したいと考えることがよくあります. このセクションでは、さまざまなタイプの攻撃者と、これらの保証に違反しようとする方法について説明します. 次に、TLSプロトコルを使用して攻撃者を阻止する方法について説明します. 

最も単純なタイプの攻撃者は、マルチメディアセッションに関連するトラフィックを受動的にリッスンする攻撃者です. この攻撃者は、たとえば、会議の参加者の1人と同じローカルエリアまたはワイヤレスネットワーク上にいる可能性があります. この種の攻撃者は、接続のデータの整合性や認証を脅かすことはなく、TLSのほとんどすべての操作モードでメディアストリームの機密性を提供できます. 

より高度なのは、ネットワークを介して自分のデータトラフィックを送信できるが、有効なトラフィックを変更またはリダイレクトできない攻撃者です. SDPの「アドバタイズされた」操作モードでは、これはほとんど攻撃とは見なされません. メディアセッションは、ネットワーク上のどこからでも開始されることが期待されています. ただし、SDPのオファー/アンサーモードでは、このタイプの攻撃はより深刻です. 攻撃者は、セッションの一方または両方のエンドポイントへの接続を開始して、エンドポイントになりすましたり、中間者として通信を傍受したりする可能性があります. これらの攻撃を阻止するために、TLSはエンドポイント証明書を使用します. 証明書の秘密鍵が危険にさらされていない限り、エンドポイントには、証明書を検証するための外部の信頼できるメカニズム（最も一般的には、相互に信頼できる認証局）があります. 

最後に、最も深刻なタイプの攻撃者は、セッションの説明を変更またはリダイレクトできる攻撃者です. たとえば、侵害された、または悪意のあるSIPプロキシサーバーです. TLS自体も、TLSを使用するメカニズムも、そのような攻撃者からSDPセッションを保護することはできません. 代わりに、SDP記述自体を何らかのメカニズムで保護する必要があります. たとえば、SIPは、S / MIME [17]を使用してセッション記述を保護する方法を定義します. 

3.3. 自己署名証明書の必要性
SDPセッションの説明は、マルチメディアセッションに参加する必要があるエンドポイントによって作成されます. SIP電話などの多くの場合、このようなエンドポイントには動的に構成されたIPアドレスとホスト名があり、ほぼゼロの構成で展開する必要があります. このようなエンドポイントの場合、実際には、有名な認証局によって署名された証明書を取得することは不可能です. 

2つのエンドポイントに事前の関係がない場合、攻撃者がman-in-the-middle攻撃を開始しないという保証がないため、自己署名証明書は一般に信頼できません. ただし、幸いなことに、SDPセッション記述の整合性が保証されている場合は、それらのSDP記述自体を事前の関係と見なすことができます. 証明書はセッション記述自体に安全に記述できます. これは、SDP属性として証明書の安全なハッシュまたは「証明書フィンガープリント」を提供することによって行われます. このメカニズムについては、セクション5で説明します. 

3.4. TLS接続のSDP記述の例
図1は、TLSを介したT.38ファックスセッションの可用性を通知するSDPオファーを示しています. 簡潔にするために、この例ではセッションの説明の主要部分を省略し、「m」行とその属性のみを示しています. （この例は、protoパラメーターとフィンガープリント属性を除いて、RFC 4145 [2]の最初の例と同じです. ）例のTLS固有の属性の説明については、後続のセクションを参照してください. 

（注：RFCのフォーマット規則により、このドキュメントでは、コンテンツが72文字を超える行にSDPを分割します. バックスラッシュ文字は、この行の折り畳みが行われた場所を示します. このバックスラッシュとその末尾のCRLFおよび空白は、実際のSDPコンテンツには表示されません.  ）

   m=image 54111 TCP/TLS t38
   c=IN IP4 192.0.2.2
   a=setup:passive
   a=connection:new
   a=fingerprint:SHA-1 \
          4A:AD:B9:B1:3F:82:18:3B:54:02:12:DF:3E:5D:49:6B:19:E5:7C:AB
        
図1：TLSメディアストリームを提供するSDPの説明の例

4.プロトコル識別子
SDPの「m」行は、特に、セッション内のメディアに使用されるトランスポートプロトコルを指定します. トランスポートプロトコル識別子の説明については、SDP [1]の「メディアの説明」セクションを参照してください. 

この仕様は、新しいプロトコル識別子「TCP / TLS」を定義します. これは、説明されているメディアがTCPを介したトランスポート層セキュリティプロトコル[3]を使用することを示します. （他のトランスポートプロトコルでのTLSの使用については、このドキュメントでは説明していません. ）「TCP / TLS」プロトコル識別子は、トランスポートプロトコルのみを記述し、上位層プロトコルは記述しません. 「TCP / TLS」を指定する「m」行は、TLS上で実行されているアプリケーションを示すために、fmt識別子を使用してプロトコルをさらに修飾する必要があります. 

この識別子で記述されたメディアセッションは、RFC 4145 [2]で定義された手順に従います. また、その仕様で定義されているSDP属性「setup」および「connection」も使用します. 

5.指紋属性
TLSセッションの当事者は、TLSハンドシェイク手順の一部として認証証明書を提示することにより、IDを示します. 認証証明書は、RFC 3279 [7]、RFC 3280 [8]、およびRFC 4055 [9]でプロファイルされているように、X.509 [6]証明書です. 

メディアストリームを接続に関連付け、メディアストリームへの不正なバージイン攻撃を防ぐために、エンドポイントは証明書のフィンガープリントを提供する必要があります. TLS接続用に提示されたX.509証明書がSDPで提示されたフィンガープリントと一致する場合、エンドポイントは、SDPの作成者が実際に接続のイニシエーターであると確信できます. 

証明書フィンガープリントは、証明書のDER（識別されたエンコーディングルール）形式の安全な一方向ハッシュです. （証明書のフィンガープリントは、X.509証明書を操作するツールによって広くサポートされています. たとえば、コマンド「openssl x509 -fingerprint」を使用すると、opensslパッケージのコマンドラインツールで証明書のフィンガープリントが出力され、MozillaおよびInternetの証明書マネージャーが出力されます. エクスプローラーは、証明書の詳細を表示するときにそれらを表示します. ）

フィンガープリントは、SDPでは属性（「a」行）として表されます. これは、使用されるハッシュ関数の名前と、それに続くハッシュ値自体で構成されます. ハッシュ値は、コロンで区切られた大文字の16進バイトのシーケンスとして表されます. バイト数はハッシュ関数によって定義されます. （これは、opensslおよびブラウザの証明書マネージャで使用される構文です. たとえば、区切りのない小文字の16進バイトを使用するHTTPダイジェスト認証[18]でハッシュ値を表すために使用される構文とは異なります. 一貫性があると感じられました. 指紋の他のアプリケーションではより重要でした. ）

フィンガープリント属性の正式な構文は、図2の拡張バッカスナウア記法[10]に示されています. この構文は、SDP [1]のBNF構文を拡張したものです. 

   attribute              =/ fingerprint-attribute

   fingerprint-attribute  =  "fingerprint" ":" hash-func SP fingerprint

   hash-func              =  "sha-1" / "sha-224" / "sha-256" /
                             "sha-384" / "sha-512" /
                             "md5" / "md2" / token
                             ; Additional hash functions can only come
                             ; from updates to RFC 3279

   fingerprint            =  2UHEX *(":" 2UHEX)
                             ; Each byte in upper-case hex, separated
                             ; by colons.

        
図2：指紋属性の拡張バッカスナウア構文

証明書のフィンガープリントは、証明書の署名アルゴリズムで使用されるものと同じ一方向ハッシュ関数を使用して計算する必要があります. （これにより、証明書に必要なセキュリティプロパティがフィンガープリントにも適用されることが保証されます. また、証明書自体が使用されている限り、フィンガープリントが他のエンドポイントで使用できることが保証されます. ）RFCによって更新されたRFC 3279 [7]に準拠したがって、定義されたハッシュ関数は「SHA-1」[11] [19]、「SHA-224」[11]、「SHA-256」[11]、「SHA-384」[11]です.  、「SHA-512」[11]、「MD5」[12]、および「MD2」[13]、「SHA-1」が優先されます. セクション8で指定されているハッシュ関数テキスト名の新しいIANAレジストリでは、将来のトークンを追加できますが、追加できるのは、RFC3279を更新または廃止するRFCに含まれている場合のみです[7]. 

フィンガープリント属性は、セッションレベルまたはメディアレベルのSDP属性のいずれかです. これがセッションレベルの属性である場合、メディアレベルのフィンガープリント属性が定義されていないすべてのTLSセッションに適用されます. 

6.エンドポイントの識別
6.1. 証明書の選択
X.509証明書は、IDと公開鍵をバインドします. TLSセッションを記述するSDPが整合性保護を提供するメカニズムを介して送信される場合、構文的に有効なIDをアサートする証明書を使用できます. たとえば、HTTP / TLS [20]を介して送信されたSDP記述、またはS / MIME [17]によって保護されたSDP記述は、メディア接続を保護する証明書内のIDをアサートしてもよい[MAY]. 

ホップバイホップの整合性保護のみを提供するセキュリティプロトコル（たとえば、sipsプロトコル[16]、SIP over TLS）は、有効なIDが受け入れられるモードを許可するのに十分に安全であると見なされます. ただし、この事実のセキュリティへの影響については、セクション7を参照してください. 

ただし、SDPが整合性保護されていない状況では、TLS接続に提供される証明書は、接続の適切なIDを証明する必要があります. これらのシナリオでは、エンドポイントによって提示される証明書は、次のように、SDP接続アドレスまたはSDPメッセージの作成者のIDのいずれかを証明する必要があります. 

oメディア記述の接続アドレスがIPアドレスとして指定されている場合、エンドポイントは、セッション記述の「c」行の接続アドレスのIPと完全に一致するiPAddresssubjectAltNameを持つ証明書を使用できます（MAY）. 同様に、メディア記述の接続アドレスが完全修飾ドメイン名として指定されている場合、エンドポイントは、指定された「c」回線接続アドレスと正確に一致するdNSNamesubjectAltNameを持つ証明書を使用できます（MAY）. （ワイルドカードパターンは使用しないでください. ）

oあるいは、セッションのSDPセッション記述が、セッション参加者のIDがURI（Uniform Resource Identifier）によって定義されているプロトコル（SIP [16]など）を介して送信された場合、エンドポイントは、UniformResourceIdentifierを持つ証明書を使用できます（MAY）.  SDPを生成したエンドポイントのIDに対応するsubjectAltName. 有効なURIの詳細は、送信プロトコルによって異なります. （URIの有効性の詳細については、セクション7を参照してください. ）

IDマッチングは、RFC 3280 [8]で指定されているマッチングルールを使用して実行されます. 特定のタイプの複数のIDが証明書に存在する場合（たとえば、複数のdNSName名）、セットのいずれか1つでの一致は許容可能と見なされます. セクション7で説明されているように、証明書キャッシュの使用をサポートするには、エンドポイントはSHOULD

サポートするIDごとに同じ証明書を一貫して提供します. 

6.2. 証明書の提示
すべての場合において、TLSサーバーとして機能するエンドポイント（つまり、コネクション型メディアの用語で「setup：passive」の役割を担うエンドポイント）は、セクション6.1に示されているルールに従って、TLSの開始時に証明書を提示する必要があります. 証明書が元のフィンガープリントと一致しない場合、クライアントエンドポイントはbad_certificateエラーでメディア接続を終了する必要があります. 

SDPオファー/アンサーモデル[5]が使用されている場合、クライアント（「setup：active」ロールを持つエンドポイント）もセクション6.1のルールに従って証明書を提示する必要があります. サーバーは証明書を要求する必要があり、クライアントが証明書を提供しない場合、または証明書が提供されたフィンガープリントと一致しない場合、サーバーエンドポイントはbad_certificateエラーでメディア接続を終了する必要があります. 

オファー/アンサーモデルが使用されている場合、メディア接続がアンサーをアウトレースしてオファーを返す可能性があることに注意してください. したがって、提供者が「setup：passive」または「setup：actpass」ロールを提供した場合、（RFC 4145 [2]で指定されているように）提供者は、提供を送信するとすぐに着信接続のリッスンを開始する必要があります. ただし、TLS接続を介して送信されたデータは、SDP回答で一致するフィンガープリントを受信するまで有効であると想定してはなりません（MUSTNOT）. フィンガープリントが到着すると、クライアントの証明書と一致しない場合、前の段落で述べたように、サーバーエンドポイントはbad_certificateエラーでメディア接続を終了する必要があります. 

オファー/アンサーが使用されていない場合（たとえば、SDPがSession Announcement Protocol [15]を介して送信された場合）、クライアントが証明書のフィンガープリントをサーバーに通信するために使用できる安全なチャネルはありません. この場合、サーバーは、有名な認証局によって署名されている必要があるクライアント証明書を要求する場合があります. または、クライアントが証明書なしで接続できるようにする場合があります. 

7.セキュリティに関する考慮事項
このドキュメント全体は、セキュリティに関係しています. 解決すべき問題はセクション1で対処し、概要はセクション3で示します. SDP全般に適用されるセキュリティの考慮事項については、SDP仕様[1]を参照してください. 

SDPでTCP / TLS接続を提供する（またはSDPオファー/アンサーモードで接続に同意する）ことは、エンドポイントが指定されたフィンガープリントでTLS接続を受け入れる義務を作成しません. 代わりに、エンドポイントは、選択されたTLSストリーム暗号とMACアルゴリズムが上位レベルのアプリケーションのセキュリティニーズを確実に満たすように、標準のTLSネゴシエーション手順を実行する必要があります. （たとえば、TLS_NULL_WITH_NULL_NULLの提供されたストリーム暗号は、ほとんどすべてのアプリケーションシナリオで拒否されるべきです. ）

すべてのSDPメッセージと同様に、TLSストリームを説明するSDPメッセージは、カプセル化アプリケーションプロトコル（SIP、メディアゲートウェイコントロールプロトコル（MGCP）など）で伝達されます. SDPセキュリティ記述の整合性を確保するのはカプセル化プロトコルの責任です. したがって、アプリケーションプロトコルは、独自のセキュリティメカニズム（たとえば、セキュアマルチパート）を呼び出すか、あるいは、下位層のセキュリティサービス（たとえば、TLSまたはIPsec）を利用する必要があります. このセキュリティサービスは、強力なメッセージ認証と効果的なリプレイ保護を提供する必要があります. 

ただし、このような整合性保護が常に可能であるとは限りません. このような場合、エンドシステムは、他の関係者がこのメカニズムを使用して以前に提示した証明書のキャッシュを維持する必要があります. 可能であれば、これまで未知のエンドシステムに関連付けられたセキュリティで保護されていない証明書が提示されたときにユーザーに通知する必要があります. また、過去に通信した相手から別のセキュリティで保護されていない証明書が提示された場合は、強く警告する必要があります. このように、SDPの整合性保護がない場合でも、このドキュメントのメカニズムのセキュリティは、2つの場合にman-in-the-middle攻撃に対して脆弱なSecure Shell（ssh）プロトコル[21]のセキュリティと同等です. 当事者は最初に通信しますが、その後に発生するものを検出できます. （「相手方」の正確な定義に注意してください

相互運用性と展開を支援するために、ホップバイホップの整合性保護のみを提供するセキュリティプロトコル（たとえば、sipsプロトコル[16]、SIP over TLS）は、構文的に有効なIDが受け入れられるモードを許可するのに十分に安全であると見なされます. 証明書. この決定が下されたのは、sipsが現在、短中期的に展開されたネットワークで使用される可能性が最も高い整合性メカニズムであるためです. ただし、このモードでは、SDPの整合性は、SIPプロキシサーバーなどの侵害されたミドルボックスまたは悪意のあるミドルボックスによる攻撃に対して脆弱です. エンドシステムは、ホップバイホップ方式でのみ保護されているSDPセッションについてユーザーに警告する場合があり、TCP / TLSを介して実行されるメディア形式の定義では、エンドツーエンドの整合性メカニズムのみを使用するように指定する場合があります. 

SDPメッセージの送信方法によっては、リモート証明書で提示されたsubjectAltNameがリモートパーティに期待されるかどうかを常に判断できるとは限りません. 特に、ゲートウェイ制御プロトコル[22]によって制御されるエンドポイントによって生成されるコール転送、サードパーティのコール制御、またはセッションの説明を考えると、SIPでは、リモートSDP応答を生成する必要があるエンティティを判別できるとは限りません. 一般に、SDP記述の信頼性と整合性保護を使用しない場合、SIPを介して送信される証明書は、エンドポイントのレコードのSIPアドレスをuniformResourceIndicatorsubjectAltNameとしてアサートする必要があります. エンドポイントが、コールを発信または受信したID以外のID（iPAddressまたはdNSName IDを含む）をアサートする証明書をSIP経由で受信すると、ユーザーに警告し、確認を求める必要があります. これは、証明書が自己署名されているか、認証局によって署名されているかに関係なく適用されます. sip：bob@example.comの証明書は、認証局によって合法的に署名されている場合がありますが、sip：alice@example.comへの呼び出しには受け入れられない場合があります. （この問題は、この仕様に固有の問題ではありません. 同じ考慮事項が、SIPを介して伝送されるS / MIME署名付きSDPにも適用されます. ）

このドキュメントでは、コネクション型チャネルを介してRTPおよびRTP制御プロトコル（RTCP）パケットを安全に転送するためのメカニズムは定義されていません. ワーキンググループでは、コネクション型トランスポート[24]を介してセキュアRTPパケット[23]を送信する方がよいか、またはメカニズムを使用してTLSを介して標準のセキュアでないRTPパケットを送信する方がよいかについてコンセンサスがありませんでした. このドキュメントで説明されています. グループのコンセンサスは、セキュアなコネクション型RTPを必要とするユースケースが提示されるまで待つことでした. 

TLSは、安全なコネクション型メディアにとって常に最適な選択であるとは限りません. 場合によっては、高レベルまたは低レベルのセキュリティプロトコルが適切な場合があります. 

8.IANAの考慮事項
このドキュメントでは、SDPプロト値「TCP / TLS」を定義しています. その形式はセクション4で定義されています. このproto値は、「proto」の下の「Session Description Protocol（SDP）Parameters」の下でIANAによって登録されています. 

このドキュメントでは、SDPセッションとメディアレベルの属性「fingerprint」を定義しています. その形式はセクション5で定義されています. この属性は、「att-field（セッションレベルとメディアレベルの両方）」の「SessionDescriptionProtocol（SDP）Parameters」でIANAによって登録されています. 

SDP仕様[1]は、この仕様で定義されている「TCP / TLS」プロト値のような新しいプロト値を定義する仕様は、メディア形式（fmt）名前空間を管理するためのルールを定義する必要があると述べています. TCP / TLSプロトコルの場合、新しいフォーマットにはMIME登録が関連付けられている必要があります. 形式に既存のMIMEサブタイプを使用することをお勧めします. MIMEサブタイプが存在しない場合は、フォーマットのトランスポートプロトコルを定義する標準トラックRFCを作成または参照することにより、IETFプロセス[14]を通じて適切なサブタイプを登録することをお勧めします. 

この仕様は、「ハッシュ関数テキスト名」という名前の新しいIANAレジストリを作成します. SDPパラメータの一部にはなりません. 

証明書のフィンガープリントに使用されるハッシュ関数の名前は、IANAによって登録されます. ハッシュ関数は、RFC 3279 [7]を更新または廃止する標準トラックRFCによって定義する必要があります. 

新しいハッシュ関数のテキスト名を登録するときは、次の情報を提供する必要があります. 

oハッシュ関数のテキスト名. 

o X.509証明書で使用されるハッシュ関数のオブジェクト識別子（OID）. 

o標準への参照-RFCを追跡し、RFC 3279 [7]を更新または廃止し、X.509証明書でのハッシュ関数の使用を定義します. 

図3には、このレジストリの初期値が含まれています. 

   ハッシュ関数名OIDリファレンス
   ------------------ --- ---------
   "md2" 1.2.840.113549.2.2 RFC 3279
   "md5" 1.2.840.113549.2.5 RFC 3279
   「sha-1」1.3.14.3.2.26RFC 3279
   「sha-224」2.16.840.1.101.3.4.2.4RFC 4055
   「sha-256」2.16.840.1.101.3.4.2.1RFC 4055
   「sha-384」2.16.840.1.101.3.4.2.2RFC 4055
   「sha-512」2.16.840.1.101.3.4.2.3RFC 4055
        
図3：IANAハッシュ関数のテキスト名レジストリ

9.参考文献
9.1. 規範的参考文献
[1] Handley、M.、Jacobson、V. 、およびC. Perkins、「SDP：Session Description Protocol」、RFC 4566、2006年7月. 

[2] Yon、D. およびG. Camarillo、「Session Description Protocol（SDP）におけるTCPベースのメディアトランスポート」、RFC 4145、2005年9月. 

[3] Dierks、T. およびE. Rescorla、「トランスポート層セキュリティ（TLS）プロトコルバージョン1.1」、RFC 4346、2006年4月. 

[4] Bradner、S. 、「要件レベルを示すためにRFCで使用するためのキーワード」、BCP 14、RFC 2119、1997年3月. 

[5] Rosenberg、J. およびH. Schulzrinne、「Session Description Protocol（SDP）を使用したオファー/アンサーモデル」、RFC 3264、2002年6月. 

[6]国際電気通信連合、「情報技術-オープンシステム相互接続-ディレクトリ：公開鍵および属性証明書フレームワーク」、ITU-T勧告X.509、ISO標準9594-8、2000年3月. 

[7] Bassham、L.、Polk、W. 、およびR. Housley、「インターネットX.509公開鍵インフラストラクチャ証明書および証明書失効リスト（CRL）プロファイルのアルゴリズムと識別子」、RFC 3279、2002年4月. 

[8] Housley、R.、Polk、W.、Ford、W. 、およびD. Solo、「Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List（CRL）Profile」、RFC 3280、2002年4月. 

[9] Schaad、J.、Kaliski、B. 、およびR. Housley、「インターネットX.509公開鍵インフラストラクチャ証明書および証明書失効リスト（CRL）プロファイルで使用するRSA暗号化の追加のアルゴリズムと識別子」、RFC 4055 、2005年6月. 

[10] Crocker、D. およびP. Overell、「構文仕様の拡張BNF：ABNF」、RFC 4234、2005年10月. 

[11]米国国立標準技術研究所、「Secure Hash Standard」、FIPS PUB 180-2、2002年8月、<http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf> . 

[12] Rivest、R. 、「MD5メッセージダイジェストアルゴリズム」、RFC 1321、1992年4月. 

[13] Kaliski、B. 、「MD2メッセージダイジェストアルゴリズム」、RFC 1319、1992年4月. 

[14] Freed、N. およびJ. Klensin、「メディアタイプの仕様と登録手順」、BCP 13、RFC 4288、2005年12月. 

9.2. 有益な参考資料
[15] Handley、M.、Perkins、C. 、およびE. Whelan、「Session Announcement Protocol」、RFC 2974、2000年10月. 

[16] Rosenberg、J.、Schulzrinne、H.、Camarillo、G.、Johnston、A.、Peterson、J.、Sparks、R.、Handley、M. 、およびE. Schooler、「SIP：SessionInitiationProtocol」 、RFC 3261、2002年6月. 

[17] Ramsdell、B. 、「Secure / Multipurpose Internet Mail Extensions（S / MIME）Version 3.1 Message Specification」、RFC 3851、2004年7月. 

[18] Franks、J.、Hallam-Baker、P.、Hostetler、J.、Lawrence、S.、Leach、P.、Luotonen、A. 、およびL. Stewart、「HTTP認証：基本およびダイジェストアクセス認証」 、RFC 2617、1999年6月. 

[19] Eastlake、D. およびP. Jones、「US Secure Hash Algorithm 1（SHA1）」、RFC 3174、2001年9月. 

[20] Rescorla、E. 、「HTTP Over TLS」、RFC 2818、2000年5月. 

[21] Ylonen、T. およびC. Lonvick、「The Secure Shell（SSH）Protocol Architecture」、RFC 4251、2006年1月. 

[22] Groves、C.、Pantaleo、M.、Anderson、T. 、およびT. Taylor、「Gateway Control Protocol Version 1」、RFC 3525、2003年6月. 

[23] Baugher、M.、McGrew、D.、Naslund、M.、Carrara、E. 、およびK. Norrman、「The Secure Real-time Transport Protocol（SRTP）」、RFC 3711、2004年3月. 

[24] Lazzaro、J. 、 "Framing Real-time Transport Protocol（RTP）and RTP Control Protocol（RTCP）Packets over Connection-Oriented Transport"、RFC 4571、2006年7月. 

著者の住所

ジョナサンレノックスコロンビア大学コンピュータサイエンス学部450コンピュータサイエンス1214アムステルダムアベニュー、MC 0401ニューヨーク、ニューヨーク10027米国

Eメール：lennox@cs.columbia.edu

完全な著作権表示

Copyright（C）The Internet Society（2006）. 

このドキュメントは、BCP 78に含まれる権利、ライセンス、および制限の対象であり、そこに記載されている場合を除き、作成者はすべての権利を保持します. 

このドキュメントおよびここに含まれる情報は「現状有姿」で提供され、寄稿者、組織HE / SHEが代表するか、（もしあれば）、インターネットソサエティおよびインターネットエンジニアリングタスクフォースがすべての保証を明示的またはここに記載されている情報の使用が、商品性または特定の目的への適合性に関するいかなる権利または黙示の保証も侵害しないことを含むがこれに限定されない、黙示の保証. 

知的財産

IETFは、このドキュメントに記載されているテクノロジの実装または使用に関連すると主張される可能性のある知的財産権またはその他の権利の有効性または範囲、あるいはそのような権利に基づくライセンスが存在する場合としない場合がある範囲について、いかなる立場も取りません. 利用可能である; また、そのような権利を特定するために独自の努力をしたことを表すものでもありません. RFC文書の権利に関する手順に関する情報は、BCP78およびBCP79に記載されています. 

IETF事務局に対して行われたIPR開示のコピー、および利用可能になるライセンスの保証、またはこの仕様の実装者またはユーザーによるそのような所有権の使用に関する一般的なライセンスまたは許可を取得しようとした結果を取得できます.  http://www.ietf.org/iprのIETFオンラインIPRリポジトリから. 

IETFは、この標準を実装するために必要となる可能性のある技術をカバーする可能性のある著作権、特許、特許出願、またはその他の所有権に注意を向けるよう、利害関係者を招待します. 情報をIETF（ietf-ipr@ietf.org）に送信してください. 

了承

RFC Editor機能の資金は、IETF管理サポートアクティビティ（IASA）によって提供されます. 