RFCトランス
個人情報保護方針
連絡先
イチジク
@ tex2e
7741
RFC 7741-VP8ビデオのRTPペイロード形式
URL：https://tools.ietf.org/html/rfc7741
タイトル：RFC 7741-VP8ビデオのRTPペイロード形式
翻訳編集：自動生成
Internet Engineering Task Force（IETF）P. Westin
コメントのリクエスト：7741 H.ランディン
カテゴリ：標準はGoogleを追跡します
ISSN：2070-1721 M.グローバー
                                                                 ツイッター
                                                               J.ウベルティ
                                                             F.ガリガン
                                                                  グーグル
                                                              2016年3月
        
VP8ビデオのRTPペイロード形式

概要

このメモは、VP8ビデオコーデックのRTPペイロード形式について説明しています. ペイロード形式は、低ビットレートのピアツーピアの使用から高ビットレートのビデオ会議までのアプリケーションをサポートするため、幅広い適用性があります. 

このメモのステータス

これはInternet Standards Trackドキュメントです. 

このドキュメントは、IETF（Internet Engineering Task Force）の製品です. これは、IETFコミュニティのコンセンサスを表しています. これは公開レビューを受けており、Internet Engineering Steering Group（IESG）による公開が承認されています. インターネット標準の詳細については、RFC 5741のセクション2を参照してください. 

このドキュメントの現在のステータス、エラッタ、およびフィードバックの提供方法に関する情報は、http：//www.rfc-editor.org/info/rfc7741で入手できます. 

著作権表示

Copyright（c）2016 IETF Trustおよびドキュメントの作成者として識別された人物. 全著作権所有. 

この文書は、BCP 78およびIETF文書に関するIETFトラストの法的規定（http://trustee.ietf.org/license-info）の対象であり、この文書の発行日に有効です. これらのドキュメントは、このドキュメントに関するあなたの権利と制限について説明しているため、注意深く確認してください. このドキュメントから抽出されたコードコンポーネントには、Trust Legal Provisionsのセクション4.eに記載されているSimplified BSD Licenseのテキストが含まれている必要があり、Simplified BSD Licenseに記載されているように保証なしで提供されます. 

目次

   1.はじめに............................................... ..... 3
   2.表記法、定義、および略語..................... 3
   3.メディア形式の説明.................................................. 4
   4.ペイロードのフォーマット.............................................. .... 5
      4.1. RTPヘッダーの使用法........................................... 6
      4.2. VP8ペイロード記述子..................................... 7
      4.3. VP8ペイロードヘッダー........................................ 11
      4.4. 集約および断片化されたペイロード........................ 12
      4.5. アルゴリズムの例........................................................ 13
           4.5.1. フレーム再構成アルゴリズム..................... 13
           4.5.2. パーティション再構築アルゴリズム................. 13
      4.6 VP8 RTPストリームの例................................ 14
           4.6.1. 単一のRTPパケット内のキーフレーム................... 14
           4.6.2. 単一の破棄不可能なVP8インターフレーム
                  RTPパケット. PictureIDなし........................... 14
           4.6.3. 個別のRTPパケット内のVP8パーティション............. 15
           4.6.4. RTPパケット全体でフラグメント化されたVP8フレーム............ 16
           4.6.5. 長いPictureIDを持つVP8フレーム...................... 18
   5. RPSIおよびSLIフィードバックでのVP8の使用........................... 18
      5.1. RPSI ................................................................. ..... 18
      5.2. SLI ................................................................. ...... 19
      5.3. 例................................................................. ..19
   6.ペイロード形式のパラメータ...................................... 21
      6.1. メディアタイプの定義..................................... 21
      6.2. SDPパラメータ............................................ 23
           6.2.1. メディアサブタイプパラメータのSDPへのマッピング......... 23
           6.2.2. オファー/アンサーに関する考慮事項........................ 23
   7.セキュリティに関する考慮事項........................................ 24
   8.輻輳制御................................................................. 24
   9. IANAの考慮事項............................................ 24
   10.参考資料......................................................... ..... 25
      10.1 規範的な参照..................................... 25
      10.2 有益な参照................................... 26
   著者のアドレス............................................... .28
        
1.はじめに
このメモは、VP8ビデオコーデック[RFC6386]を使用してエンコードされたビデオストリームの送信に適用可能なRTPペイロード仕様について説明しています. このドキュメントで説明されている形式は、ピアツーピアアプリケーションとビデオ会議アプリケーションの両方で使用できます. 

VP8は、フレームを「マクロブロック」と呼ばれる正方形のピクセルのサブブロックに分解することに基づいています（[RFC6386]のセクション2を参照）. 以前に構築されたブロックを使用したそのようなサブブロックの予測、およびそのような予測の調整（および予測されないブロックの合成）は、離散コサイン変換（以下、DCTと略記）を使用して行われます. ただし、1つの特殊なケースでは、VP8はDCTの代わりに「ウォルシュ-アダマール」変換（以下、WHTと略記）を使用します. エンコードされたVP8フレームは、[RFC6386]で説明されているように、2つ以上のパーティションに分割されます. 最初のパーティション（予測またはモード）には、すべてのマクロブロックの予測モードパラメータと動きベクトルが含まれています. 残りのパーティションにはすべて、残差の量子化されたDCT / WHT係数が含まれています. フレームごとに1、2、4、または8つのDCT / WHTパーティションがあり、

要約すると、このドキュメントで説明されているペイロード形式は、VP8で次のような多くの機能を有効にします. 

oパーティションの境界を考慮に入れ、損失の堅牢性を向上させ、デコーダーでの効率的なパケット損失の隠蔽を促進します. 

o時間的スケーラビリティ. 

o効率的なエラー回復を可能にする参照フレームの高度な使用. 

o他のフレームのデコードに影響を与えないフレームのマーク付け. これらの非参照フレームは、必要に応じてサーバーまたはメディア対応ネットワーク要素で破棄できます. 

2.表記法、定義、および略語
このドキュメントのキーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「MAY」、および「OPTIONAL」は、 [RFC2119]で説明されているように解釈されます. 

このドキュメントでは、[RFC6386]の定義を使用しています. 特に、次の用語が使用されます. 

キーフレーム：シーケンス内の他のフレームを参照せずにデコードされるフレーム（イントラフレームおよびIフレームとも呼ばれます）. 

インターフレーム：前のフレームを参照してエンコードされたフレーム. 具体的には、最新のキーフレームまでのすべての前のフレーム（予測フレームおよびPフレームとも呼ばれます）. 

ゴールデンフレームとaltrefフレーム：代替予測フレーム. インターフレーム内のブロックは、直前のフレーム内のブロックと最新のゴールデンフレームまたはaltrefフレームを使用して予測できます. すべてのキーフレームは自動的にゴールデンおよびaltrefであり、インターフレームはオプションで最新のゴールデンまたはaltrefフレームを置き換えることができます. 

マクロブロック：Y（輝度）次元が16x16ピクセルで、UおよびV（クロミナンス）次元が8x8ピクセルの正方形のピクセル配列. 

このドキュメントでは、[RFC4585]の2つの定義も使用されています. 

RPSI：参照画像選択表示. デコーダーが特定のフレームを正しくデコードしたことをエンコーダーに知らせるフィードバックメッセージ. 

SLI：スライス損失の表示. 1つまたは複数のマクロブロックの損失または破損を検出したことをデコーダーにエンコーダーに通知させるフィードバックメッセージ. 

3.メディア形式の説明
VP8コーデックは、フレーム間予測に3つの異なる参照フレームを使用します. 前のフレーム、ゴールデンフレーム、およびaltrefフレームです. インターフレーム内のブロックは、直前のフレーム内のブロックと最新のゴールデンフレームまたはaltrefフレームを使用して予測できます. すべてのキーフレームは自動的にゴールデンおよびaltrefであり、インターフレームはオプションで最新のゴールデンまたはaltrefフレームを置き換えることができます. ゴールデンフレームとaltrefフレームを使用して、ドロップされたフレームへの耐性を高めることもできます. このメモのペイロードの仕様には、参照フレームの高度な使用を可能にする要素が含まれています. 

3つの参照フレームタイプの1つの具体的な使用例は、時間的なスケーラビリティです. 適切な方法で参照階層を設定することにより、最大5つの時間レイヤーをエンコードできます. （時間スケーラビリティの参照階層を設定する方法は、このメモの範囲外です. ）時間スケーラビリティのサポートは、セクション4.2で説明されているオプションのTL0PICIDXおよびTID / Y / KEYIDXフィールドによって提供されます. ビデオコーディングの時間スケーラビリティの一般的な説明については、[Sch07]を参照してください. 

VP8コーデックのもう1つの特性は、エンコードされたデータにデータ分割を適用することです. したがって、「VP8データ形式とデコードガイド」[RFC6386]で説明されているように、エンコードされたVP8フレームは2つ以上のパーティションに分割できます. 最初のパーティション（予測またはモード）には、すべてのマクロブロックの予測モードパラメータと動きベクトルが含まれています. 残りのパーティションにはすべて、残差の変換係数が含まれています. 最初のパーティションは、残りの残りのパーティションなしでデコード可能です. フレームの一部が失われた場合でも、後続のパーティションは役立つ場合があります. したがって、このドキュメントでは、フレームを送信者が各データパーティションを使用して個別のパケットにパケット化することを推奨しています. これは、デコーダー側のエラー隠蔽に役立ちます. セクション4で説明するペイロード形式は、最初のパーティションが利用できない場合でもパーティションを識別できるフィールドを提供します. あるいは、送信側はデータパーティションを単一のデータストリームに集約し、オプションで、パーティションの境界を考慮せずに複数のパケットに分割できます. 受信機は、最初のパーティションの長さ情報を使用して、デコード中にパーティションを識別できます. 

フォーマット仕様については、セクション4で説明します. セクション5では、RTCP技術を使用して参照フレームの受信を確認する方法について説明します. 

ペイロードのパーティション分割と確認応答方法はどちらも、ペイロード形式に含まれる3つのフィールド「PID」、「1番目のパーティションサイズ」、および「PictureID」フィールドの動機として機能します. 時間的にスケーラブルなストリームをエンコードする機能は、「TL0PICIDX」および「TID」フィールドを動機付けます. 

4.ペイロード形式
このセクションでは、エンコードされたVP8ビットストリームがRTPにカプセル化される方法について説明します. ネットワーク損失を処理するには、RTP / AVPF [RFC4585]の使用をお勧めします. 仕様のすべての整数フィールドは、ネットワークオクテット順の符号なし整数としてエンコードされます. 

4.1. RTPヘッダーの使用
VP8の一般的なRTPペイロード形式を以下に示します. 

      0 1 2 3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- +-+-+-+-+-+-+-+
     | V = 2 | P | X | CC | M | PT | シーケンス番号|
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- +-+-+-+-+-+-+-+
     | タイムスタンプ|
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- +-+-+-+-+-+-+-+
     | 同期ソース（SSRC）識別子|
     + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = +
     | 寄稿ソース（CSRC）識別子|
     | .... |
     + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = + = +
     | VP8ペイロード記述子（整数＃オクテット）|
     ：：
     | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     | ：VP8ペイロードヘッダー（3オクテット）|
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- +-+-+-+-+-+-+-+
     | VP8 pyld hdr：|
     +-+-+-+-+-+-+-+-+ |
     ：VP8ペイロードのオクテット4..N：
     | |
     | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     | ：オプションのRTPパディング|
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- +-+-+-+-+-+-+-+
        
VP8ペイロード記述子とVP8ペイロードヘッダーについては、セクション4.2と4.3で説明します. Pビットが設定されていない限り、オプションのRTPパディングを含めてはなりません. この図は、フレームの最初のパケットのフォーマットを具体的に示しています. 後続のパケットにはVP8ペイロードヘッダーが含まれず、フレームペイロードに後のオクテットが含まれます. 

図1

マーカービット（M）：ビデオ形式でのMビットの通常の使用に合わせて、各エンコードフレームの最後のパケットに設定する必要があります. これにより、デコーダーは画像のデコードを完了することができます. そうでなければ、フレームが完了したことを次のパケットが明示的に知るのを待つ必要があるかもしれません. 

ペイロードタイプ（PT）：このパケット形式のRTPペイロードタイプの割り当ては、このドキュメントの範囲外であり、ここでは指定しません. 

タイムスタンプ：RTPタイムスタンプは、フレームがサンプリングされた時刻を示します. クロックの粒度は90 kHzであるため、1のデルタは1 / 90,000秒を表します. 

残りのRTP固定ヘッダーフィールド（V、P、X、CC、シーケンス番号、SSRC、およびCSRC識別子）は、[RFC3550]のセクション5.1で指定されているとおりに使用されます. 

4.2. VP8ペイロード記述子
RTPヘッダーの後の最初のオクテットは、次の構造を持つVP8ペイロード記述子です. 左側にPictureIDのシングルオクテットバージョン（Mビットを0に設定）を示し、右側にデュアルオクテットバージョン（Mビットを1に設定）を示します. 

         0 1 2 3 4 5 6 7                      0 1 2 3 4 5 6 7
        +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+
        |X|R|N|S|R| PID | (REQUIRED)        |X|R|N|S|R| PID | (REQUIRED)
        +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+
   X:   |I|L|T|K| RSV   | (OPTIONAL)   X:   |I|L|T|K| RSV   | (OPTIONAL)
        +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+
   I:   |M| PictureID   | (OPTIONAL)   I:   |M| PictureID   | (OPTIONAL)
        +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+
   L:   |   TL0PICIDX   | (OPTIONAL)        |   PictureID   |
        +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+
   T/K: |TID|Y| KEYIDX  | (OPTIONAL)   L:   |   TL0PICIDX   | (OPTIONAL)
        +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+
                                       T/K: |TID|Y| KEYIDX  | (OPTIONAL)
                                            +-+-+-+-+-+-+-+-+
                                 Figure 2
        
X：拡張制御ビットが存在します. 1に設定されている場合、必須の最初のオクテットの直後に拡張オクテットを提供する必要があります. ビットがゼロの場合、すべてのオプションフィールドを省略しなければなりません. 注：このXビットは、RTPヘッダーのXビットと混同しないでください. 

R：ビットは将来の使用のために予約されています. 0に設定する必要があり、レシーバーによって無視される必要があります. 

N：非参照フレーム. 1に設定すると、フレームは他の将来または過去のフレームに影響を与えることなく破棄できます. フレームの参照ステータスが不明な場合は、このビットを0に設定して、参照に必要なフレームの破棄を回避する必要があります（SHOULD）. 

参考情報：このドキュメントでは、エンコードされたフレームが非参照であるかどうかを判断する方法については説明していません. 符号化されたフレームの参照ステータスは、好ましくは、エンコーダの実装から提供される. 

S：VP8パーティションの開始. RTPパケットの最初のペイロードオクテットが新しいVP8パーティションの始まりである場合は1に設定する必要があり、それ以外の場合は1にしないでください. 符号化された各フレームの最初のパケットでは、Sビットを1に設定する必要があります. 

PID：パーティションインデックス. パケットの最初のペイロードオクテットが属するVP8パーティションを示します. 最初のVP8パーティション（モードとモーションベクトルを含む）は、PID = 0でラベル付けする必要があります. PIDは、後続のパーティションごとに1ずつインクリメントする必要がありますが、すべてのパケットで0に保つ必要があります. PIDは7以下にする必要があります. エンコードされたフレームの複数のパケットに同じPIDが含まれる場合、そのPIDを持つ最初のパケット以外のパケットにはSビットを設定してはなりません（MUST NOT）. 

最初のオクテットでXビットが1に設定されている場合、拡張制御ビットフィールドオクテットが2番目のオクテットとして提供される必要があります. Xビットが0の場合、拡張制御ビットフィールドのオクテットは存在してはならず（MUST NOT）、拡張（I、L、T、またはK）は許可されません. 

I：PictureIDが存在します. 1に設定する場合、PictureIDは拡張ビットフィールドの後に存在し、以下のように指定する必要があります. それ以外の場合、PictureIDは存在してはなりません. 

L：TL0PICIDXが存在します. 1に設定される場合、TL0PICIDXが存在し、以下のように指定されなければならず、Tビットは1に設定されている必要があります. それ以外の場合、TL0PICIDXは存在してはなりません. 

T：TIDが存在します. 1に設定されている場合、TID / Y / KEYIDXオクテットが存在する必要があります. オクテットのTID | Y部分は、次のように指定する必要があります. K（下記）が1に設定され、Tが0に設定されている場合、TID / Y / KEYIDXオクテットが存在しなければなりませんが、TIDフィールドは無視されなければなりません（MUST）. TもKも1に設定されていない場合、TID / Y / KEYIDXオクテットは存在してはなりません（MUST NOT）. 

K：KEYIDXが存在します. 1に設定されている場合、TID / Y / KEYIDXオクテットが存在する必要があります. オクテットのKEYIDX部分は、以下のように指定する必要があります. T（上記）が1に設定され、Kが0に設定されている場合、TID / Y / KEYIDXオクテットが存在しなければなりませんが、KEYIDXフィールドは無視されなければなりません（MUST）. TもKも1に設定されていない場合、TID / Y / KEYIDXオクテットは存在してはなりません（MUST NOT）. 

RSV：将来の使用のために予約されているビット. 0に設定する必要があり、レシーバーによって無視される必要があります. 

拡張ビットフィールドの後に、有効になっている拡張データフィールドを続けます. 

PictureID拡張：Iビットが1に設定されている場合、PictureID拡張フィールドが存在しなければならず、それ以外の場合は存在してはなりません. フィールドは2つの部分で構成されています. 

M：最初のオクテットの最上位ビットは拡張フラグです. Mが設定されている場合、PictureIDフィールドの残りの部分には15​​ビットが含まれている必要があり、そうでない場合は7ビットが含まれている必要があります. 注：このMビットは、RTPヘッダーのMビットと混同しないでください. 

PictureID：7ビットまたは15ビット（図2ではそれぞれ左と右に表示）、Mビットを含まない. これはフレームの実行インデックスであり、ランダムな値で開始することができ、後続の各フレームで1ずつ増加する必要があり、最大ID（すべてのビットセット）に達した後に0にラップする必要があります. PictureIDの7ビットまたは15ビットは、Mビットの後の最初のビットから始まり、最上位から最下位へと進みます. 送信側は7ビットまたは15ビットのインデックスを選択し、それに応じてMビットを設定します. 受信者は、PictureIDのビット数がセッションを通じて同じであると想定してはなりません（MUST NOT）. すべてのビットが1に設定された7ビットのPictureIDを送信すると、送信者はPictureIDを0にラップするか、15ビットに拡張して、インクリメントを続行できます. 

TL0PICIDX拡張：Lビットが1に設定されている場合、TL0PICIDX拡張フィールドが存在しなければならず、それ以外の場合は存在してはなりません. フィールドは次の1つの部分で構成されています. 

TL0PICIDX：8ビットの時間レベル0のインデックス. TL0PICIDXは、時間ベースレイヤーフレームの実行インデックスです. つまり、TIDが0に設定されたフレームです. TIDが0より大きい場合、TL0PICIDXは、現在の画像がどのベースレイヤーフレームに依存するかを示します. TL0PICIDXは、TIDが0の場合にインクリメントする必要があります. インデックスはランダムな値で開始される場合があり、最大数255に達した後に0にラップする必要があります. TL0PICIDXの使用は、TIDの存在に依存します. したがって、TL0PICIDXを使用する場合は常にTIDを使用することをお勧めします. 

TID / Y / KEYIDX拡張：TまたはKビットのいずれかが1に設定されている場合、TID / Y / KEYIDX拡張フィールドが存在する必要があります. TとKの両方がゼロの場合、存在してはなりません. フィールドは3つの部分で構成されています. 

TID：2ビットの時間層インデックス. Tビットが0に設定されている場合、受信者はTIDフィールドを無視する必要があります. TIDフィールドは、パケットが表す一時レイヤを示します. 

最下層、つまりベース層は、TIDを0に設定する必要があります. 上位層は、層階層内の位置に従ってTIDを増分する必要があります（SHOULD）. 

Y：1レイヤー同期ビット. 現在のフレームが、TL0PICIDXが現在のフレームと等しいベースレイヤー（TID = 0）フレームのみに依存する場合は、Yビットを1に設定する必要があります（SHOULD）. 現在のフレームが、TL0PICIDXが現在のフレームと等しいベースレイヤー（TID = 0）フレーム以外のフレームに依存する場合は、Yビットを0に設定する必要があります. さらに、現在のフレームに続くフレームが、TL0PICIDXが現在のフレームと等しいベースレイヤーフレームよりも古い非ベースレイヤーフレームに依存している場合は、Yビットを0に設定する必要があります. Tビットが0のときにYビットが設定されている場合、現在のフレームは、KEYIDXフィールドの変更によって通知された過去のベースレイヤー（TID = 0）キーフレームのみに依存する必要があります. さらに、

参考情報：このドキュメントでは、フレームの依存状態を判断する方法については説明していません. この情報は、好ましくはエンコーダの実装から提供されます. ステータスが不明の場合は、Yビットを安全に0に設定できます. 

KEYIDX：5ビットの一時キーフレームインデックス. Kビットが0に設定されている場合、受信者はKEYIDXフィールドを無視する必要があります. KEYIDXフィールドは、キーフレームの実行中のインデックスです. KEYIDXはランダムな値で開始する場合があり、最大数31に達した後で0にラップする必要があります. 使用中、KEYIDXはキーフレームとインターフレームの両方に存在する必要があります（SHOULD）. 送信者は、後続のフレームの解釈に重要なパラメーターの更新を伝えるキーフレームのKEYIDXをインクリメントする必要があり、これらの重要な更新を含まないキーフレームのKEYIDXは変更しないでください. KEYIDXが存在する場合、最後のKEYIDXラップアラウンド後に同じKEYIDXのキーフレームを受信して​​デコードしていない場合、レシーバーはインターフレームをデコードしてはなりません（SHOULD NOT）. 

参考情報：このドキュメントでは、キーフレームが重要なパラメーターを更新するかどうかを判断する方法については説明していません. この情報は、好ましくはエンコーダの実装から提供されます. この情報を持たない送信者は、KEYIDXフィールドを省略するか（Kを0に設定）、すべてのキーフレームでKEYIDXをインクリメントします. 後者の利点は、キーフレームの損失がレシーバーによって検出され、再送信のシグナルを送信したり、新しいキーフレームを要求したりできることです. 

参考情報：VP8ストリームのスプライシングを行う実装では、TL0PICIDXおよびKEYIDXをインクリメントするためのルールがスプライス全体で確実に守られるようにする必要があります. これには、スプライス後にTL0PICIDXおよびKEYIDXの値を書き換える必要がある可能性があります. 

4.3. VP8ペイロードヘッダー
エンコードされたVP8フレームの始まりは、[RFC6386]のセクション9.1で「非圧縮データチャンク」と呼ばれ、このRTP形式のペイロードヘッダーとしても機能します. コーデックビットストリーム形式は、非圧縮データチャンクの2つの異なるバリアントを指定します. インターフレーム用の3オクテットバージョンとキーフレーム用の10オクテットバージョンです. 最初の3オクテットは両方の亜種に共通です. キーフレームの場合、残りの7オクテットは、このRTP形式の残りのペイロードの一部と見なされます. ヘッダーは、ペイロード記述子のSビットが1でPIDがゼロのパケットにのみ存在することに注意してください. 同じフレームの後続のパケットには、ペイロードヘッダーは含まれません. 

最初のパーティションの長さは、常にVP8ペイロードヘッダーの最初のパーティションサイズパラメータから取得できます. VP8ビットストリーム形式[RFC6386]は、複数のDCT / WHTパーティションが作成される場合、各パーティションの開始位置が最初の（予測またはモード）パーティションの最後にあることを指定しています. このRTPペイロード仕様では、ロケーションオフセットは最初のパーティションの一部と見なされます. 

                             0 1 2 3 4 5 6 7
                            +-+-+-+-+-+-+-+-+
                            |Size0|H| VER |P|
                            +-+-+-+-+-+-+-+-+
                            |     Size1     |
                            +-+-+-+-+-+-+-+-+
                            |     Size2     |
                            +-+-+-+-+-+-+-+-+
                            | Octets 4..N of|
                            | VP8 payload   |
                            :               :
                            +-+-+-+-+-+-+-+-+
                            | OPTIONAL RTP  |
                            | padding       |
                            :               :
                            +-+-+-+-+-+-+-+-+

                                 Figure 3

パケタイザはPビットにアクセスする必要があります. 他のフィールドは[RFC6386]、セクション9.1で定義されており、それらの意味はパケット化プロセスに影響しません. これらのフィールドはいずれも、パケット化プロセスによって変更されません. 

P：逆キーフレームフラグ. 0に設定すると、現在のフレームがキーフレームになります. 1に設定すると、現在のフレームはインターフレームになります. [RFC6386]で定義

4.4. 集約および断片化されたペイロード
セクション1で説明するように、エンコードされたVP8フレームは2つ以上のパーティションに分割できます. このRTP仕様を実装するパケタイザが、エンコードされたフレーム内のパーティション境界に注意を払うのはオプションです. フレームのパケット化がパーティション境界を考慮せずに行われる場合、PIDフィールドはすべてのパケットに対して0に設定される場合があり、Sビットは最初以外のパケットに対して1に設定されてはなりません（MUST NOT）. 

セクション3で提案されている推奨される使用法に従い、各パケットが1つのパーティションからのデータを運ぶ場合、セクション4.2で説明されているSビットおよびPIDフィールドを使用して、パケットの内容を示す必要があります. PIDフィールドは、ペイロードの最初のオクテットが属するパーティションを示し、Sビットは、パケットが新しいパーティションで開始することを示します. 

パケタイザがパーティションの境界に注意を払わない場合、1つのパケットにパーティションのフラグメント、完全なパーティション、またはフラグメントとパーティションの集約を含めることができます. ペイロードにはパーティション境界の明示的なシグナリングはありません. 最初のパーティションの最後にあるパーティションの長さを使用して、境界を識別する必要があります. パーティションはデコード順に集約する必要があります. 異なるパーティションからの2つのフラグメントは、1つ以上の完全なパーティションと共に同じパケットに集約される場合があります. 

すべての場合において、パケットのペイロードには、1つのビデオフレームからのデータのみが含まれている必要があります. その結果、特定のフレームからのデータを運ぶパケットのセットには、フレームの最初のパケットで運ばれるVP8ペイロードヘッダー（セクション4.3を参照）が1つだけ含まれます. フレームのデータを運ぶ最後の、または唯一のパケットは、RTPヘッダーにMビットが設定されている必要があります. 

4.5. アルゴリズムの例
4.5.1. フレーム再構成アルゴリズム
フレーム再構成アルゴリズムの例. 

1：特定のRTPタイムスタンプを持つすべてのパケットを収集します. 

2：シーケンス番号でソートされたパケットを順番に調べ、パケットが欠落している場合は、[RFC4585]で定義されているようにNACKを送信するか、欠落しているパーティションでデコードします. 以下のセクション4.5.2を参照してください. 

3：フレームにシーケンス番号の欠落がなく、フレームの最初のパケットにpartId = 0のS = 1が含まれ、フレームの最後のパケットにマーカービットが設定されている場合、フレームは完全です. 

4.5.2. パーティション再構築アルゴリズム
パーティション再構築アルゴリズムの例. アルゴリズムは、パーティションが個別のパケットにあるRECOMMENDEDユースケースにのみ適用されます. 

1：新しいパーティションの開始をスキャンします. S = 1. 

2：パーティションの終わりを検出するためにスキャンを続行します. したがって、新しいS = 1（前のパケットはパーティションの終わりでした）が検出されるか、マーカービットが設定されます. パーティションが終了する前に損失が検出された場合は、このパーティションのすべてのパケットを破棄し、手順1からスキャンを繰り返します. 

3：パケットを完全なパーティションに保存し、フレームの最後に到達するまでステップ1からスキャンを繰り返します. 

4：すべての完全なパーティションをデコーダに送信します. 完全なパーティションが見つからない場合は、フレーム全体を破棄します. 

4.6 VP8 RTPストリームの例
VP8 RTPペイロードの使用方法の例をいくつか以下に示します. 

4.6.1. 単一のRTPパケットのキーフレーム
      0 1 2 3 4 5 6 7
     +-+-+-+-+-+-+-+-+
     | RTPヘッダー|
     | M = 1 |
     +-+-+-+-+-+-+-+-+
     | 1 | 0 | 0 | 1 | 0 | 0 0 0 | X = 1; S = 1; PID = 0
     +-+-+-+-+-+-+-+-+
     | 1 | 0 | 0 | 0 | 0 0 0 0 | 私= 1
     +-+-+-+-+-+-+-+-+
     | 0 0 0 1 0 0 0 1 | PictureID = 17
     +-+-+-+-+-+-+-+-+
     |サイズ0 | 1 | VER | 0 | P = 0
     +-+-+-+-+-+-+-+-+
     | サイズ1 |
     +-+-+-+-+-+-+-+-+
     | サイズ2 |
     +-+-+-+-+-+-+-+-+
     | VP8ペイロード|
     +-+-+-+-+-+-+-+-+
        
4.6.2. 単一のRTPパケット内の破棄できないVP8インターフレーム. PictureIDがありません

      0 1 2 3 4 5 6 7
     +-+-+-+-+-+-+-+-+
     | RTPヘッダー|
     | M = 1 |
     +-+-+-+-+-+-+-+-+
     | 0 | 0 | 0 | 1 | 0 | 0 0 0 | X = 0; S = 1; PID = 0
     +-+-+-+-+-+-+-+-+
     |サイズ0 | 1 | VER | 1 | P = 1
     +-+-+-+-+-+-+-+-+
     | サイズ1 |
     +-+-+-+-+-+-+-+-+
     | サイズ2 |
     +-+-+-+-+-+-+-+-+
     | VP8ペイロード|
     +-+-+-+-+-+-+-+-+
        
4.6.3. 個別のRTPパケット内のVP8パーティション
最初のRTPパケット. 最初のパーティションを完成させます. 

      0 1 2 3 4 5 6 7
     +-+-+-+-+-+-+-+-+
     | RTPヘッダー|
     | M = 0 |
     +-+-+-+-+-+-+-+-+
     | 1 | 0 | 0 | 1 | 0 | 0 0 0 | X = 1; S = 1; PID = 0
     +-+-+-+-+-+-+-+-+
     | 1 | 0 | 0 | 0 | 0 0 0 0 | 私= 1
     +-+-+-+-+-+-+-+-+
     | 0 0 0 1 0 0 0 1 | PictureID = 17
     +-+-+-+-+-+-+-+-+
     |サイズ0 | 1 | VER | 1 | P = 1
     +-+-+-+-+-+-+-+-+
     | サイズ1 |
     +-+-+-+-+-+-+-+-+
     | サイズ2 |
     +-+-+-+-+-+-+-+-+
     | オクテット4..L of |
     | 最初のVP8 |
     | パーティション|
     ：：
     +-+-+-+-+-+-+-+-+
        
2番目のRTPパケット. 完全な2番目のパーティション. 

      0 1 2 3 4 5 6 7
     +-+-+-+-+-+-+-+-+
     | RTPヘッダー|
     | M = 1 |
     +-+-+-+-+-+-+-+-+
     | 1 | 0 | 0 | 1 | 0 | 0 0 1 | X = 1; S = 1; PID = 1
     +-+-+-+-+-+-+-+-+
     | 1 | 0 | 0 | 0 | 0 0 0 0 | 私= 1
     +-+-+-+-+-+-+-+-+
     | 0 0 0 1 0 0 0 1 | PictureID = 17
     +-+-+-+-+-+-+-+-+
     | 残りのVP8 |
     | パーティション|
     ：：
     +-+-+-+-+-+-+-+-+
        
4.6.4. RTPパケット全体でフラグメント化されたVP8フレーム
最初のRTPパケット. 最初のパーティションを完成させます. 

      0 1 2 3 4 5 6 7
     +-+-+-+-+-+-+-+-+
     | RTPヘッダー|
     | M = 0 |
     +-+-+-+-+-+-+-+-+
     | 1 | 0 | 0 | 1 | 0 | 0 0 0 | X = 1; S = 1; PID = 0
     +-+-+-+-+-+-+-+-+
     | 1 | 0 | 0 | 0 | 0 0 0 0 | 私= 1
     +-+-+-+-+-+-+-+-+
     | 0 0 0 1 0 0 0 1 | PictureID = 17
     +-+-+-+-+-+-+-+-+
     |サイズ0 | 1 | VER | 1 | P = 1
     +-+-+-+-+-+-+-+-+
     | サイズ1 |
     +-+-+-+-+-+-+-+-+
     | サイズ2 |
     +-+-+-+-+-+-+-+-+
     | 完了|
     | 最初に|
     | パーティション|
     ：：
     +-+-+-+-+-+-+-+-+
        
2番目のRTPパケット. 2番目のパーティションの最初のフラグメント. 

      0 1 2 3 4 5 6 7
     +-+-+-+-+-+-+-+-+
     | RTPヘッダー|
     | M = 0 |
     +-+-+-+-+-+-+-+-+
     | 1 | 0 | 0 | 1 | 0 | 0 0 1 | X = 1; S = 1; PID = 1
     +-+-+-+-+-+-+-+-+
     | 1 | 0 | 0 | 0 | 0 0 0 0 | 私= 1
     +-+-+-+-+-+-+-+-+
     | 0 0 0 1 0 0 0 1 | PictureID = 17
     +-+-+-+-+-+-+-+-+
     | 最初の断片|
     | 秒の|
     | パーティション|
     ：：
     +-+-+-+-+-+-+-+-+
        
3番目のRTPパケット. 2番目のパーティションの2番目のフラグメント. 

      0 1 2 3 4 5 6 7
     +-+-+-+-+-+-+-+-+
     | RTPヘッダー|
     | M = 0 |
     +-+-+-+-+-+-+-+-+
     | 1 | 0 | 0 | 0 | 0 | 0 0 1 | X = 1; S = 0; PID = 1
     +-+-+-+-+-+-+-+-+
     | 1 | 0 | 0 | 0 | 0 0 0 0 | 私= 1
     +-+-+-+-+-+-+-+-+
     | 0 0 0 1 0 0 0 1 | PictureID = 17
     +-+-+-+-+-+-+-+-+
     | ミッドフラグメント|
     | 秒の|
     | パーティション|
     ：：
     +-+-+-+-+-+-+-+-+
        
4番目のRTPパケット. 2番目のパーティションの最後のフラグメント. 

      0 1 2 3 4 5 6 7
     +-+-+-+-+-+-+-+-+
     | RTPヘッダー|
     | M = 1 |
     +-+-+-+-+-+-+-+-+
     | 1 | 0 | 0 | 0 | 0 | 0 0 1 | X = 1; S = 0; PID = 1
     +-+-+-+-+-+-+-+-+
     | 1 | 0 | 0 | 0 | 0 0 0 0 | 私= 1
     +-+-+-+-+-+-+-+-+
     | 0 0 0 1 0 0 0 1 | PictureID = 17
     +-+-+-+-+-+-+-+-+
     | 最後の断片|
     | 秒の|
     | パーティション|
     ：：
     +-+-+-+-+-+-+-+-+
        
4.6.5. 長いPictureIDを持つVP8フレーム
PictureID = 4711 = 001001001100111バイナリ（最初の7ビット：0010010、最後の8ビット：01100111）. 

      0 1 2 3 4 5 6 7
     +-+-+-+-+-+-+-+-+
     | RTPヘッダー|
     | M = 1 |
     +-+-+-+-+-+-+-+-+
     | 1 | 0 | 0 | 1 | 0 | 0 0 0 | X = 1; S = 1; PID = 0
     +-+-+-+-+-+-+-+-+
     | 1 | 0 | 0 | 0 | 0 0 0 0 | I = 1;
     +-+-+-+-+-+-+-+-+
     | 1 0 0 1 0 0 1 0 | 長いPictureIDフラグ= 1
     | 0 1 1 0 0 1 1 1 | PictureID = 4711
     +-+-+-+-+-+-+-+-+
     |サイズ0 | 1 | VER | 1 |
     +-+-+-+-+-+-+-+-+
     | サイズ1 |
     +-+-+-+-+-+-+-+-+
     | サイズ2 |
     +-+-+-+-+-+-+-+-+
     | オクテット4..N of |
     | VP8ペイロード|
     ：：
     +-+-+-+-+-+-+-+-+
        
5. VPSIとRPSIおよびSLIフィードバックの併用
セクション4.2で定義されているVP8ペイロード記述子には、オプションのPictureIDパラメータが含まれています. このパラメータは、主に参照画像選択表示（RPSI）とスライス損失表示（SLI）の使用を可能にするために含まれています. どちらも[RFC4585]で定義されています. 

5.1. RPSI
RPSIは、RTCPベースのフィードバック形式内で定義されたペイロード固有のフィードバックメッセージです. RPSIメッセージは受信者によって生成され、2つの方法で使用できます. デコーダーによって損失が検出されたときに優先参照画像（できれば、デコーダーが完全であると知っている参照）に信号を送るか、特定の参照画像の正しい復号を確認するための正のフィードバック情報として使用できます. 正帰還方式は、ポイントツーポイント（ユニキャスト）通信に使用されるVP8に役立ちます. VP8でのRPSIの使用は、コーデックの2つの特別な参照フレーム（ゴールデンフレームとaltrefフレーム）の特別な更新パターンと組み合わせることが好ましく、これらのフレームでは、交互に飛び跳ねて更新されます. レシーバーがゴールデンフレームまたはaltrefフレームを受信して​​正しくデコードすると、そのフレームのペイロード記述子にPictureIDがある場合、受信者はRPSIメッセージを送信者に送り返すだけでこれを確認できます. メッセージ本文（つまり、[RFC4585]の「ネイティブRPSIビット文字列」）は、単に受信したフレームのPictureIDです. 

5.2. SLI
SLIは、RTCPベースのフィードバック形式内で定義された別のペイロード固有のフィードバックメッセージです. SLIメッセージは、フレームで損失または破損が検出されたときに受信者によって生成されます. SLIメッセージのフォーマットは次のとおりです[RFC4585]：

      0 1 2 3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- +-+-+-+-+-+-+-+
     | 最初に| 番号| PictureID |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- +-+-+-+-+-+-+-+
        
図4

ここで、[RFC4585]で定義されているように、Firstは最初の失われたブロックのマクロブロックアドレス（スキャン順）、Numberは失われたブロックの数です. PictureIDは、損失または破損が発生したコーデック固有の画像識別子の最下位6ビットです. VP8の場合、このコーデック固有の識別子は、ペイロード記述子から読み取られる現在のフレームのPictureIDです. 現在のフレームのペイロード記述子にPictureIDがない場合、受信者はSLIメッセージで最後に受信したPictureID + 1を送信できます（MAY）. フレームの一部だけが破損している場合でも、レシーバーはFirstパラメーターを0に設定し、Numberパラメーターをフレームあたりのマクロブロックの総数に設定できます（MAY）. 送信者がSLIメッセージを受信すると、最後に受信したRPSIメッセージからの知識を利用できます. 

5.3. 例
RPSIとSLIの使用は、例に最もよく示されています. この例では、エンコーダーは、最後に送信されたゴールデンフレームがRPSIメッセージで確認されるまで、altrefフレームを更新しない場合があります. 更新がしばらくして受信されない場合は、代わりに新しいゴールデンフレーム更新が送信されます. 新しいゴールデンフレームが確立されて確認されると、altrefフレームの更新時に同じルールが適用されます. 

   + ------- + ------------------- + --------------------- ---- + ------------- +
   | イベント| 送信者| レシーバー| 設立|
   | | | | リファレンス|
   + ------- + ------------------- + --------------------- ---- + ------------- +
   | 1000 | ゴールデンフレームを送信します. | |
   | | PictureID = 0 | | |
   | | | | |
   | | | 受信とデコード| |
   | | | ゴールデンフレーム| |
   | | | | |
   | 1001 | | RPSI（0）を送信する| |
   | | | | |
   | 1002 | RPSI（0）を受信する| | ゴールデン|
   | | | | |
   | ... | （通常の送信| | |
   | | フレーム）| | |
   | | | | |
   | 1100 | altrefフレームを送信する| | |
   | | PictureID = 100 | | |
   | | | | |
   | | | Altrefが壊れているか| ゴールデン|
   | | | 失われた| |
   | | | | |
   | 1101 | | SLI（100）を送信する| ゴールデン|
   | | | | |
   | 1102 | SLI（100）を受け取る| | |
   | | | | |
   | 1103 | |でフレームを送信 | |
   | | |への参照 | |
   | | ゴールデン| | |
   | | | | |
   | | | 受信とデコード| ゴールデン|
   | | | フレーム（デコーダーの状態| |
   | | | 復元済み）| |
   | | | | |
   | ... | （通常の送信| | |
   | | フレーム）| | |
   | | | | |
   | 1200 | altrefフレームを送信する| | |
   | | PictureID = 200 | | |
   | | | | |
   | | | 受信とデコード| ゴールデン|
   | | | altrefフレーム| |
   | | | | |
   | 1201 | | RPSI（200）を送信する| |
   | | | | |
   | 1202 | RPSI（200）を受け取る| | altref |
   | | | | |
        
   | ... | （通常の送信| | |
   | | フレーム）| | |
   | | | | |
   | 1300 | ゴールデンフレームを送信します. | |
   | | PictureID = 300 | | |
   | | | | |
   | | | 受信とデコード| altref |
   | | | ゴールデンフレーム| |
   | | | | |
   | 1301 | | RPSI（300）を送信する| altref |
   | | | | |
   | 1302 | RPSIが失われた| | |
   | | | | |
   | 1400 | ゴールデンフレームを送信します. | |
   | | PictureID = 400 | | |
   | | | | |
   | | | 受信とデコード| altref |
   | | | ゴールデンフレーム| |
   | | | | |
   | 1401 | | RPSI（400）を送信する| |
   | | | | |
   | 1402 | RPSI（400）を受け取る| | ゴールデン|
   + ------- + ------------------- + --------------------- ---- + ------------- +
        
表1：送信者と受信者間のシグナリングの例

スキームは、フィードバックメッセージの損失に対して堅牢であることに注意してください. RPSIが失われた場合、送信者は確立された参照を解放せずに、しばらくしてゴールデン（またはaltref）を更新しようとします. また、SLIが失われた場合、受信者は、画像が破損している限り、[RFC4585]で指定されているRTCP送信タイミング制限で許可されている間隔でSLIメッセージを送信し続けることができます. 

6.ペイロード形式パラメーター
このペイロード形式には、2つのオプションパラメータがあります. 

6.1. メディアタイプの定義
この登録は、[RFC6838]および次の[RFC4855]で定義されたテンプレートを使用して行われます. 

タイプ名：ビデオ

サブタイプ名：VP8

必須パラメーター：なし. 

オプションのパラメーター：

これらのパラメーターは、レシーバー実装の機能を通知するために使用されます. 実装がメディアを受け入れる用意がある場合は、両方のパラメーターを指定する必要があります. これらのパラメーターを他の目的で使用してはなりません（MUST NOT）. 

max-fr：max-frの値は、デコーダーがデコードできる最大フレームレートを1秒あたりのフレーム数の単位で示す整数です. 

max-fs：max-fsの値は、デコーダーがデコードできるマクロブロック単位の最大フレームサイズを示す整数です. 

マクロブロックのフレームの幅と高さがint（sqrt（max-fs * 8））より小さい限り、デコーダーはこのフレームサイズをデコードできます. たとえば、max-fsが1200の場合（640x480の解像度をサポートできます）は、最大1552ピクセル（97マクロブロック）の幅と高さをサポートします. 

エンコーディングに関する考慮事項：このメディアタイプはRTPでフレーム化され、バイナリデータを含みます. [RFC6838]のセクション4.8を参照してください. 

セキュリティに関する考慮事項：RFC 7741のセクション7を参照してください. 

相互運用性に関する考慮事項：なし. 

公開された仕様：VP8ビットストリーム形式[RFC6386]およびRFC 7741. 

このメディアタイプを使用するアプリケーション：例：Video over IP、ビデオ会議. 

フラグメント識別子の考慮事項：N / A. 

追加情報：なし. 

詳細について連絡する人とメールアドレス：Patrik Westin、patrik.westin @ gmail.com

使用目的：COMMON

使用制限：このメディアタイプはRTPフレーミングに依存するため、RTP [RFC3550]を介した転送に対してのみ定義されます. 

作者：Patrik Westin、patrik.westin @ gmail.com

変更管理者：IESGから委任されたIETFペイロードワーキンググループ. 

6.2. SDPパラメータ
受信者は、このメモで指定されていないfmtpパラメータを無視しなければなりません（MUST）. 

6.2.1. メディアサブタイプパラメータのSDPへのマッピング
メディアタイプvideo / VP8文字列は、Session Description Protocol（SDP）[RFC4566]のフィールドに次のようにマッピングされます. 

o SDPの「m =」行のメディア名はビデオである必要があります. 

o SDPの「a = rtpmap」行のエンコーディング名はVP8（メディアサブタイプ）である必要があります. 

o「a = rtpmap」行のクロックレートは90000でなければなりません. 

o SDPを使用してレシーバー機能を宣言する場合、パラメーター「max-fs」および「max-fr」を「a = fmtp」行に含める必要があります. これらのパラメータは、parameter = valueペアのセミコロンで区切られたリストの形式で、メディアサブタイプ文字列として表されます. 

6.2.1.1. 例
SDPでのメディア表現の例は次のとおりです. 

   m =ビデオ49170 RTP / AVPF 98
   a = rtpmap：98 VP8 / 90000
   a = fmtp：98 max-fr = 30; max-fs = 3600;
        
6.2.2. オファー/アンサーの考慮事項
VP8コーデックは、エンコードされたピクセル数にほぼ比例する複雑なデコードを提供します. パラメータ「max-fr」と「max-fs」はセクション6.1で定義されており、マクロブロックサイズは[RFC6386]で定義されている16x16ピクセルです. これらの制限を確立するには、max-fsパラメータとmax-frパラメータを使用する必要があります. 

7.セキュリティに関する考慮事項
この仕様で定義されたペイロード形式を使用するRTPパケットは、RTP仕様[RFC3550]、およびRTP / AVP [RFC3551]、RTP / AVPF [RFC4585]、RTP / SAVPなどの該当するすべてのRTPプロファイルで説明されているセキュリティの考慮事項に従います.  [RFC3711]、またはRTP / SAVPF [RFC5124]. ただし、「RTPプロトコルフレームワークのセキュリティ保護：RTPが単一のメディアセキュリティソリューションを義務付けない理由」[RFC7202]が説明しているように、機密性などの基本的なセキュリティ目標を達成するために使用されるソリューションを話し合ったり義務付けたりすることは、RTPペイロード形式の責任ではありません.  、整合性、および一般的なRTPのソースの信頼性. この責任は、アプリケーションでRTPを使用するすべての人にあります. 彼らは、「RTPセッションを保護するためのオプション」[RFC7201]で利用可能なセキュリティメカニズムと重要な考慮事項に関するガイダンスを見つけることができます. アプリケーションは、1つ以上の適切な強力なセキュリティメカニズムを使用する必要があります. このセキュリティの考慮事項セクションの残りの部分では、ペイロード形式自体のセキュリティに影響を与えるプロパティについて説明します. 

このRTPペイロード形式とそのメディアデコーダーは、パケット処理の受信側の計算の複雑さに大きな違いを示さないため、病理学的データの受信が原因でサービス拒否の脅威をもたらす可能性はほとんどありません. また、RTPペイロード形式にはアクティブコンテンツが含まれていません. 

8.輻輳制御
RTPの輻輳制御は、RFC 3550 [RFC3550]および適用可能なRTPプロファイルに従って使用する必要があります（SHALL）. たとえば、RFC 3551 [RFC3551]. 輻輳制御メカニズムは、リアルタイムのエンコードシナリオで、特定のターゲットレートでエンコードするようにエンコーダーに指示することにより、伝送レートを適応させることができます. メディア認識ネットワーク要素は、セクション4.2のVP8ペイロード記述子の情報を使用して、非参照フレームを識別し、ネットワークの輻輳を低減するためにそれらを破棄する場合があります. ストリームが暗号化されている場合、非参照フレームの破棄はできないことに注意してください（非参照マーカーが暗号化されているため）. 

9. IANAに関する考慮事項
IANAは、セクション6.1で説明されているようにメディアタイプを登録しています. 

10.リファレンス
10.1 規範的な参考文献
[RFC2119] Bradner、S. 、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、DOI 10.17487 / RFC2119、1997年3月、<http://www.rfc-editor.org/info/ rfc2119>. 

[RFC3550] Schulzrinne、H.、Casner、S.、Frederick、R. 、およびV. Jacobson、「RTP：A Transport Protocol for Real-Time Applications」、STD 64、RFC 3550、DOI 10.17487 / RFC3550、2003年7月、 <http://www.rfc-editor.org/info/rfc3550>. 

[RFC3551] Schulzrinne、H. およびS. Casner、「Minimal Controlを使用したオーディオおよびビデオ会議のRTPプロファイル」、STD 65、RFC 3551、DOI 10.17487 / RFC3551、2003年7月、<http：//www.rfc-editor.  org / info / rfc3551>. 

[RFC4566] Handley、M.、Jacobson、V. 、およびC. Perkins、「SDP：Session Description Protocol」、RFC 4566、DOI 10.17487 / RFC4566、2006年7月、<http://www.rfc-editor.org/ info / rfc4566>. 

[RFC4585] Ott、J.、Wenger、S.、Sato、N.、Burmeister、C. 、およびJ. Rey、「​​リアルタイム転送制御プロトコル（RTCP）ベースのフィードバック用の拡張RTPプロファイル（RTP / AVPF） "、RFC 4585、DOI 10.17487 / RFC4585、2006年7月、<http://www.rfc-editor.org/info/rfc4585>. 

[RFC4855] Casner、S. 、「RTPペイロード形式のメディアタイプ登録」、RFC 4855、DOI 10.17487 / RFC4855、2007年2月、<http://www.rfc-editor.org/info/rfc4855>. 

[RFC6386] Bankoski、J.、Koleszar、J.、Quillio、L.、Salonen、J.、Wilkins、P.、and Y. Xu、 "VP8 Data Format and Decoding Guide"、RFC 6386、DOI 10.17487 / RFC6386、 2011年11月、<http://www.rfc-editor.org/info/rfc6386>. 

[RFC6838] Freed、N.、Klensin、J. 、およびT. Hansen、「メディアタイプの仕様と登録手順」、BCP 13、RFC 6838、DOI 10.17487 / RFC6838、2013年1月、<http：//www.rfc- editor.org/info/rfc6838>. 

10.2 参考情報
[RFC3711]バウアー、M. 、マクルー、D. 、ナスルンド、M. 、カララ、E. 、およびK.ノーマン、「Secure Real-time Transport Protocol（SRTP）」、RFC 3711、DOI 10.17487 / RFC3711、3月2004、<http://www.rfc-editor.org/info/rfc3711>. 

[RFC5124] Ott、J. およびE. Carrara、「リアルタイム転送制御プロトコル（RTCP）ベースのフィードバック用の拡張セキュアRTPプロファイル（RTP / SAVPF）」、RFC 5124、DOI 10.17487 / RFC5124、2008年2月、<http ：//www.rfc-editor.org/info/rfc5124>. 

[RFC7201] Westerlund、M. およびC. Perkins、「RTPセッションを保護するためのオプション」、RFC 7201、DOI 10.17487 / RFC7201、2014年4月、<http://www.rfc-editor.org/info/rfc7201>. 

[RFC7202] Perkins、C. およびM. Westerlund、「RTPフレームワークの保護：RTPが単一のメディアセキュリティソリューションを義務付けない理由」、RFC 7202、DOI 10.17487 / RFC7202、2014年4月、<http：//www.rfc- editor.org/info/rfc7202>. 

[Sch07] Schwarz、H.、Marpe、D. 、およびT. Wiegand、「H.264 / AVC標準のスケーラブルビデオコーディング拡張機能の概要」、ビデオテクノロジーのための回路およびシステムに関するIEEEトランザクション、第17巻：問題9、DOI 10.1109 / TCSVT.2007.905532、2007年9月、<http://dx.doi.org/10.1109/TCSVT.2007.905532>. 

著者のアドレス

Patrik Westin Google、Inc. 1600 Amphitheatre Parkway Mountain View、CA 94043アメリカ合衆国

   メール：patrik.westin@gmail.com
        
Henrik F Lundin Google、Inc. Kungsbron 2ストックホルム11122スウェーデン

   メール：hlundin@google.com
        
Michael Glover Twitter Boston 10 Hemlock Way Durham、NH 03824 United States

   メール：michaelglover262@gmail.com
        
Justin Uberti Google、Inc. 747 6th Street South Kirkland、WA 98033アメリカ合衆国

   メール：justin@uberti.name
        
フランクガリガンGoogle、Inc. 1600 Amphitheatre Parkway Mountain View、CA 94043アメリカ合衆国

   メール：fgalligan@google.com
        