RFCトランス
個人情報保護方針
連絡先
イチジク
@ tex2e
4588
RFC4588-RTP再送信ペイロード形式日本語訳
URL：https：//tools.ietf.org/html/rfc4588
パッケージ：RFC4588-RTP再送信ペイロード形式
翻訳：自動生成
ネットワークワーキンググループJ.レイ
コメントのリクエスト：4588パナソニック
カテゴリ：標準化過程D.レオン
                                                              コンサルタント
                                                             A.宮崎
                                                               パナソニック
                                                                V.バルサ
                                                                   ノキア
                                                            R.ハケンバーグ
                                                               パナソニック
                                                               2006年7月
        
RTP再送信ペイロード形式

このメモのステータス

このドキュメントは、インターネットコミュニティのインターネット標準追跡プロトコルを指定し、改善のための議論と提案を要求します. このプロトコルの標準化の状態とステータスについては、「インターネット公式プロトコル標準」（STD 1）の最新版を参照してください. このメモの配布は無制限です. 

著作権表示

Copyright（C）The Internet Society（2006）. 

概要

RTP再送信は、遅延境界が緩和されたリアルタイムアプリケーションに効果的なパケット損失回復手法です. このドキュメントでは、再送信を実行するためのRTPペイロード形式について説明します. 再送信されたRTPパケットは、元のRTPストリームとは別のストリームで送信されます. 受信者から送信者へのフィードバックが利用可能であると想定されています. 特に、RTCPベースのフィードバック（RTP / AVPFと表記）の拡張RTPプロファイルで定義されているReal-time Transport Control Protocol（RTCP）フィードバックがこのメモで利用可能であると想定されています. 

目次

   1.はじめに.........................................................  ..... 3
   2.用語...............................................  ...... 3
   3.再送信スキームの要件と設計根拠... 4
      3.1. 多重化スキームの選択................................. 6
   4.再送信ペイロードフォーマット................................... 7
   5.再送信と元のストリームの関連付け.............. 9
      5.1. 再送信セッションの共有............................. 9
      5.2. CNAMEの使用................................................ ..9
      5.3. 受信者での関連付け................................ 9
   6.RTCPベースのフィードバックのために拡張RTPプロファイルとともに使用する...... 11
      6.1. 送信者でのRTCP ........................................ 11
      6.2. RTCPレシーバーレポート..................................... 11
      6.3. 再送信要求................................... 12
      6.4. タイミングルール.............................................. 13
   7.輻輳制御............................................. 13
   8.再送信ペイロードフォーマットMIMEタイプ登録........... 15
      8.1. はじめに.............................................. 15
      8.2. オーディオ/ rtxの登録................................. 16
      8.3. ビデオ/ rtxの登録................................. 17
      8.4. text / rtxの登録.................................. 18
      8.5. アプリケーション/ rtxの登録........................... 19
      8.6. SDPへのマッピング............................................ 20
      8.7. セッション多重化を使用したSDPの説明................. 20
      8.8. SSRCを使用したSDPの説明-多重化.................... 21
   9.RTSPの考慮事項............................................ 22
      9.1. SSRCを使用したRTSP制御-多重化....................... 22
      9.2. セッション多重化によるRTSP制御.................... 22
      9.3. 再送信ストリームのRTSP制御................. 23
      9.4. キャッシュ制御............................................. 23
   10.実装例....................................... 23
      10.1. 最小限の受信機の実装例................ 24
      10.2. マルチキャストでのレイヤードエンコードメディアの再送信..... 25
   11.IANAの考慮事項........................................... 26
   12.セキュリティに関する考慮事項....................................... 26
   13.謝辞.............................................. 27
   14.参考文献...............................................  ..... 27
      14.1. 規範的参考文献..................................... 27
      14.2. 有益な参考資料................................... 28
   付録A.Rtxの数を制御する方法. パケットあたり......... 29
        
1.はじめに
RTP送信者と受信者の間のパケット損失は、受信メディアの品質を大幅に低下させる可能性があります. パケット損失の回復力を高めるために、前方誤り訂正（FEC）、再送信、インターリーブなどのいくつかの手法を検討できます. RFC 2354 [8]では、さまざまなオプションについて説明しています. 

特定のアプリケーションの修復手法を選択するときは、アプリケーションの許容可能な遅延を考慮に入れる必要があります. マルチメディア会議の場合、対話性を保証するために、エンドツーエンドの遅延は最大で数百ミリ秒である必要があります. これは通常、再送信の使用を除外します. 

十分な待ち時間があれば、修復スキームの効率を高めることができます. 送信者は、受信者でのプレイアウト時間の前に損失に対応するために、受信者のフィードバックを使用することができます. 

マルチメディアストリーミングの場合、ユーザーはセッションセットアップの一部として初期遅延を許容できるため、数秒のエンドツーエンドの遅延が許容される場合があります. このドキュメントで定義されているRTP再送信は、このようなアプリケーションを対象としています. 

さらに、ここで定義されているRTP再送信方法は、ユニキャストおよび（小さな）マルチキャストグループに適用できます. このドキュメントは、再送信されたRTPパケットのペイロード形式を定義し、再送信に関与する送信者と受信者のプロトコルルールを提供します. 

この再送信ペイロード形式は、RTCPベースのフィードバック用の拡張RTPプロファイルであるAVPF [1]で使用するために設計されました. また、将来定義される他のRTPプロファイルで使用される可能性があります. 

AVPFプロファイルにより、より頻繁なフィードバックと早期のフィードバックが可能になります. これは、汎用フィードバックメッセージ、つまりNACKと、コーデックおよびアプリケーション固有のフィードバックメッセージを定義します. 詳細は[1]を参照してください. 

2.用語
このドキュメントでは、次の用語が使用されています. 

CSRC：貢献元. [3]を参照してください. 

元のパケット：RTP送信者によって初めて送信されたユーザーデータを運ぶRTPパケット. 

元のストリーム：元のパケットのRTPストリーム. 

再送信パケット：失われた元のパケットの代わりに受信者が使用するRTPパケット. このような再送信パケットは、元のRTPパケットに関連付けられていると言われます. 

再送信要求：RTP受信者が、RTP送信者が特定の元のパケットの再送信パケットを送信するように要求できる手段. 通常、[1]で指定されているRTCP NACKパケットは、失われたパケットの再送信要求として使用されます. 

再送信ストリーム：元のストリームに関連付けられた再送信パケットのストリーム. 

セッション多重化：元のストリームと関連する再送信ストリームが2つの異なるRTPセッションに送信されるスキーム. 

SSRC：同期ソース. [3]を参照してください. 

SSRC多重化：元のストリームと再送信ストリームが異なるSSRC値で同じRTPセッションで送信されるスキーム. 

このドキュメントのキーワード「MUST」、「MUST NOT」、「REQUIRED」、「SHALL」、「SHALL NOT」、「SHOULD」、「SHOULD NOT」、「RECOMMENDED」、「MAY」、「OPTIONAL」は次のとおりです.  RFC 2119 [2]で説明されているように解釈されます. 

3.再送信スキームの要件と設計根拠
ストリーミングメディアの修復方法としてRTPで再送信を使用することは、遅延境界が緩和され、完全な信頼性が要件ではないシナリオで適切です. より具体的には、RTP再送信により、信頼性と遅延のトレードオフが可能になります. つまり、エンドポイントは、指定されたバッファリング時間が経過した後、失われたパケットの再送信をあきらめる可能性があります. したがって、TCPとは異なり、RTP再送信によって引き起こされる行頭ブロッキングはありません. 実装者は、完全な信頼性が必要な場合、またはより高い遅延とジッターを許容できる場合は、TCPまたはその他のトランスポートオプションを検討する必要があることに注意する必要があります. 

このドキュメントで定義されているRTP再送信スキームは、次の一連の要件を満たすように設計されています. 

1.一般的なRTPおよびRTCPメカニズムを壊してはなりません. 2.ユニキャストおよび小規模なマルチキャストグループに適している必要があります. 3.ミキサーとトランスレーターで動作する必要があります. 4.すべての既知のペイロードタイプで機能する必要があります. 5.セッションでの複数のペイロードタイプの使用を妨げてはなりません. 

6.多種多様なペイロード形式をサポートするために、RTP受信者は、受信したRTPシーケンス番号のギャップの結果として失われたRTPパケットの数と種類を取得できる必要があります. この要件は、シーケンス番号の保存と呼ばれます. このような要件がなければ、RTPシーケンス番号を使用して失われたパケットを検出する会話型テキスト[9]やほとんどのオーディオ/ビデオストリーミングアプリケーションなどのペイロード形式で再送信を使用することは不可能です. 

RTP再送信のソリューションを設計する場合、元のRTPパケットと再送信されたRTPパケットの多重化についていくつかのアプローチを検討できます. 

1つのアプローチは、元のシーケンス番号でRTPパケットを再送信し、同じRTPストリームで元のパケットと再送信パケットを送信することです. その場合、再送信パケットは元のRTPパケットと同じになります. つまり、同じヘッダー（したがって同じシーケンス番号）と同じペイロードになります. ただし、このようなアプローチは、RTCP統計を破壊するため、受け入れられません. 結果として、要件1は満たされません. 正しいRTCP統計では、RTPストリーム内のすべてのRTPパケットについて、シーケンス番号を1つ増やす必要があります. 

別のアプローチは、異なるペイロードタイプ値を使用して、同じRTPストリーム内の元のRTPパケットと再送信パケットを多重化することです. このようなアプローチでは、元のパケットと再送信パケットは同じシーケンス番号スペースを共有します. その結果、RTP受信者は、失われた元のパケットの数と元のパケット（シーケンス番号）を推測できません. 

言い換えれば、このアプローチは、シーケンス番号の保存要件（要件6）を満たしていません. これは、要件4が満たされないことを意味します. ミキサーおよびトランスレータとの相互運用性も、送信側RTPストリーム内のこの新しい再送信ペイロードタイプを理解していない場合、より困難になります. これらの理由により、同じRTPストリーム内の元のパケットと再送信パケットのペイロードタイプの多重化に基づくソリューションは除外されます. 

最後に、元のパケットと再送信パケットは、2つの別々のストリームで送信される場合があります. これらの2つのストリームは、2つの異なるセッション（セッション多重化）で送信するか、同じセッションで異なるSSRC値（SSRC多重化）を使用して送信することで多重化できます. 元のパケットと再送信パケットは同じタイプのメディアを伝送するため、RTP [3]のセクション5.2のRTP多重化に対する異議はこの場合には適用されません. 

ミキサーとトランスレータは、元のストリームを処理し、再送信ストリームを利用できない場合は単に破棄する場合があります. 

一方、元のパケットと再送信パケットを2つの別々のストリームで送信するだけでは、要件1と6を満たしません. この目的のために、このドキュメントでは、再送信されたパケットに元のシーケンス番号を含めます. 

このように、2つの別々のストリームを使用すると、このセクションにリストされているすべての要件が満たされます. 

3.1. 多重化スキームの選択
セッション多重化とSSRC多重化には、長所と短所が異なります. 

セッション多重化は、元のストリームとは異なるRTPセッション（RTP [3]で定義）で再送信ストリームを送信することに基づいています. つまり、元のストリームと再送信ストリームは、異なるネットワークアドレスやポート番号に送信されます. 個別のセッションがあると、柔軟性が高まります. マルチキャストでは、元のストリームと再送信ストリームに2つの別々のセッションを使用することで、受信者は再送信ストリームを伝送するRTPセッションにサブスクライブするかどうかを選択できます. 元のセッションはシングルソースマルチキャストでもかまいませんが、個別のユニキャストセッションを使用して各受信者に再送信を伝達し、その結果、要求した再送信パケットのみを受信します. 

個別のセッションを使用すると、ネットワークによる差別化処理も容易になり、ミキサー、トランスレーター、およびパケットキャッシュでの処理が簡素化される場合があります. 

SSRC多重化では、元のストリームと再送信ストリームに1つのセッションが必要です. これにより、多数の同時セッションに関与するストリーミングサーバーとミドルウェアがポートの使用を最小限に抑えることができます. 

この再送信ペイロード形式により、ユニキャストセッションのセッション多重化とSSRC多重化の両方が可能になります. 実装の観点からは、2つのアプローチの間にほとんど違いはありません. したがって、相互運用性を最大化するために、両方の多重化アプローチが送信者と受信者によってサポートされるべきである[SHOULD]. マルチキャストセッションの場合、SSRC多重化をマルチキャストセッションで使用すると、元のストリームと再送信ストリームの関連付けに問題があるため、セッション多重化を使用する必要があります（動機についてはセクション5.3を参照）. 

4.再送信ペイロード形式
再送信パケットの形式を以下に示します. 

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         RTP Header                            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |            OSN                |                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
   |                  Original RTP Packet Payload                  |
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        
RTPヘッダーの使用法は次のとおりです. 

セッション多重化の場合、元のストリームと再送信ストリームに同じSSRC値を使用する必要があります. 元のセッションまたは再送信セッションのいずれかでSSRC衝突が発生した場合、RTP仕様では、衝突が発生したセッションでRTCPBYEパケットを送信する必要があります. さらに、RTCP BYEパケットは、それ自体のセッションで関連するストリームにも送信する必要があります. 新しいSSRC識別子を取得した後、両方のストリームのSSRCをこの値に設定する必要があります. 

SSRC多重化の場合、RTPの要求に応じて、元のストリームと再送信ストリームに2つの異なるSSRC値を使用する必要があります. 元のストリームまたは再送信ストリームのいずれかでSSRC衝突が検出された場合、RTP仕様では、このストリームに対してRTCPBYEパケットを送信する必要があります. RTCP BYEパケットは、関連するストリームに送信してはなりません（MUSTNOT）. したがって、SSRC衝突が発生したストリームのみが、新しいSSRC値を選択する必要があります. 受信側での元のストリームと再送信ストリームのSSRCの関連付けへの影響については、セクション5.3を参照してください. 

どちらの多重化スキームでも、シーケンス番号には標準の定義があります. つまり、再送信ストリームで送信される先行パケットのシーケンス番号より1つ大きくなければなりません. 

再送信パケットのタイムスタンプは、元のタイムスタンプ、つまり元のパケットのタイムスタンプに設定する必要があります. 結果として、再送信ストリームの最初のパケットの初期RTPタイムスタンプはランダムではありませんが、再送信される最初のパケットの元のタイムスタンプと等しくなります. セキュリティへの影響については、このドキュメントの「セキュリティに関する考慮事項」セクションを参照してください. 

実装者は、パケットが再送信される時間と元のタイムスタンプとの間にほとんど相関関係がない可能性があるため、再送信ストリームのRTCPジッター値が実際のネットワークジッターを反映していないことに注意する必要があります. 

ペイロードタイプは動的です. 再送信を使用する複数のペイロードタイプが元のストリームに存在する場合、これらのそれぞれについて、動的ペイロードタイプを再送信ペイロード形式にマップする必要があります. 元のペイロードタイプと再送信ペイロードタイプの間のマッピングがSessionDescription Protocol（SDP）でどのように行われるかの仕様については、セクション8.1を参照してください. 

再送信パケットのタイムスタンプには元のメディアタイムスタンプが含まれているため、再送信ペイロードタイプで使用されるタイムスタンプクロックレートは、関連する元のペイロードタイプで使用されるものと同じである必要があります. したがって、RTPストリームが異なるクロックレートのペイロードタイプを伝送する場合、これは関連する再送信ストリームにも当てはまります. RTPストリームは通常、異なるクロックレートのペイロードタイプを伝送しないことに注意してください. 

RTP再送信パケットのペイロードは、再送信ペイロードヘッダーとそれに続く元のRTPパケットのペイロードで構成されます. 再送信ペイロードヘッダーの長さは2オクテットです. このペイロードヘッダーには、OSN（元のシーケンス番号）という1つのフィールドのみが含まれ、関連する元のRTPパケットのシーケンス番号に設定する必要があります. 元のペイロードタイプに固有の可能なペイロードヘッダーを含む、元のRTPパケットペイロードは、再送信ペイロードヘッダーの直後に配置する必要があります. 

複数のレートでのエンコードをサポートするペイロード形式の場合、元のRTPパケットと同じペイロードを再送信する代わりに、送信者はより低いレートでエンコードされた同じデータを再送信できます（MAY）. これは、再送信ストリームの帯域幅の使用を制限することを目的としています. その際、送信者は、失われた元のパケットのペイロードに基づいてエンコードされた可能性のある、送信済みの元のパケットのペイロードを受信者が引き続きデコードできることを確認する必要があります. さらに、送信者がより低いレートで再送信することを選択した場合、元のRTPパケットのペイロードヘッダーの値が再送信パケットに適用されなくなり、レートの変更を反映するために再送信パケットで変更する必要がある場合があります. 

元のRTPヘッダーにプロファイル固有の拡張機能が含まれている場合、再送信パケットには、このプロファイルで実行されているアプリケーションで期待されるように、固定RTPヘッダーの直後に同じ拡張機能を含める必要があります. この場合、再送信ペイロードヘッダーはプロファイル固有の拡張の後に配置する必要があります. 

元のRTPヘッダーがRTPヘッダー拡張子を持っていた場合、再送信パケットは同じヘッダー拡張子を持っている必要があります. このヘッダー拡張子は、RTP [3]で指定されているように、固定RTPヘッダーの直後に配置する必要があります. この場合、再送信ペイロードヘッダーはヘッダー拡張の後に配置する必要があります. 

元のRTPパケットにRTPパディングが含まれている場合、再送信パケットを作成する前に、そのパディングを削除する必要があります. 再送信パケットのパディングが必要な場合は、他のRTPパケットと同様にパディングを実行する必要があり、パディングビットを設定する必要があります. 

元のRTPヘッダーのマーカービット（M）、CSRCカウント（CC）、およびCSRCリストは、再送信パケットのRTPヘッダーに「そのまま」コピーする必要があります. 

5.再送信と元のストリームの関連付け
5.1. 再送信セッションの共有
セッション多重化の場合、再送信セッションは正確に1つの元のセッションにマップする必要があります. つまり、同じ再送信セッションを異なる元のセッションに使用することはできません. 

再送信セッションの共有が許可されている場合、受信者は、参加していない可能性のある元のセッションの再送信を受信するため、問題になります. たとえば、音声のみを受信したい受信者は、音声とビデオのセッションが同じ再送信セッションを共有している場合、再送信されたビデオパケットも受信します. 

5.2. CNAMEの使用
セッション多重化とSSRC多重化の両方の場合で、送信者は元のストリームとそれに関連する再送信ストリームに同じRTCP CNAME [3]を使用する必要があります. 

5.3. 受信者での関連付け
複数の元のストリームと再送信ストリームを受信する受信者は、各再送信ストリームを元のストリームに関連付ける必要があります. 関連付けは、セッション多重化とSSRC多重化のどちらが使用されているかによって異なります. 

セッション多重化が使用されている場合、レシーバーは2つのセッションで同じSSRCを持つ2つのストリームを関連付けます. 複数のメディアストリームが同じペイロードタイプ値を持つ可能性があるため、ペイロードタイプフィールドを使用して関連付けを実行できないことに注意してください. 2つのセッションは、それ自体が帯域外に関連付けられています. 2つのセッションのグループ化がSDPでどのように行われるかについては、セクション8を参照してください. 

SSRC多重化が使用されている場合、受信者はまず、セッションで同じCNAMEを持つ2つのストリームを探す必要があります. 同じセッション内の複数の元のストリームが同じCNAMEを共有する可能性があるため、CNAMEでは関連付けを判別するのに十分でない場合があります. たとえば、同じビデオセッションに、異なるSSRCにマッピングし、同じCNAMEと場合によっては同じペイロードタイプ（PT）値を使用する複数のビデオストリームが存在する可能性があります. これらのストリームのそれぞれ（または一部）には、関連する再送信ストリームがあります. 

この場合、同じCNAMEを持つ元のストリームと再送信ストリームの間の関連付けを見つけるために、受信者は次のように動作する必要があります. 

関連付けは通常、受信者が以前に送信された再送信要求と一致する再送信パケットを受信したときに解決できます. 元のシーケンス番号が以前に要求された再送信パケットを受信すると、受信者は、再送信パケットのSSRCが、パケットが要求された送信者SSRCに関連付けられていることを取得できます. 

ただし、セッションの2つの異なる元のストリームに、同じパケットシーケンス番号に対する2つの未処理の要求がある場合、このメカニズムは失敗する可能性があります. 最初のパケットシーケンス番号はランダムであるため、同じパケットシーケンス番号に対して2つの未処理の要求が発生する可能性は非常に低いことに注意してください. それにもかかわらず、ユニキャストの場合のあいまいさを回避するために、受信者は、関連付けが解決される前に、2つの異なる元のストリームで同じパケットシーケンス番号に対する2つの未処理の要求を持ってはなりません（MUSTNOT）. マルチキャストでは、別の受信者が別のストリームから同じシーケンス番号を要求した可能性があるため、このあいまいさを完全に回避することはできません. したがって、SSRC多重化はマルチキャストセッションで使用してはなりません（MUSTNOT）. 

受信者は、2つの送信者が同じSSRCを使用していることを検出した場合、またはRTCP BYEパケットを受信した場合、そのSSRCの再送信の要求を停止する必要があります. 新しいSSRCで元のRTPパケットを受信すると、受信者はこのセクションで説明されているように、SSRCアソシエーションを再度実行する必要があります. 

6.RTCPベースのフィードバックのために拡張RTPプロファイルとともに使用する
このセクションでは、AVPF [1]で示されるRTCPベースのフィードバック用の拡張RTPプロファイルでこのペイロード形式を使用するための一般的なヒントを示します. AVPFプロファイルによって導入される変更を除いて、一般的なRTCP送受信ルールとRTPで指定されているRTCPパケット形式が適用されることに注意してください. つまり、AVPFプロファイルはRTCPタイミングルールを緩和し、追加の汎用RTCPフィードバックメッセージを指定します. 詳細は[1]を参照してください. 

6.1. 送信者でのRTCP
セッション多重化の場合、RTPの規則に従って、元のストリームの送信者レポート（SR）パケットが元のセッションで送信され、再送信ストリームのSRパケットが再送信セッションで送信されます. 

SSRC多重化の場合、元のストリームと再送信ストリームの両方のSRパケットは、RTPのルールに従って同じセッションで送信されます. 元のストリームと再送信ストリームは、RTCP帯域幅の計算に関する限り、同じRTPセッションに属する独立した送信者と見なされ、送信者に割り当てられたRTCP帯域幅を等しく共有しています. 

セッション多重化とSSRC多重化のどちらの場合も、RTPで指定されているように、BYEパケットを両方のストリームに送信する必要があることに注意してください. つまり、元のストリームに対してのみBYEパケットを送信するだけでは不十分です. 

6.2. RTCPレシーバーレポート
セッション多重化の場合、レシーバーは、元のストリームと再送信ストリームのレポートブロックを、別々のRTPセッションに属する別々のレシーバーレポート（RR）パケットで送信します. 元のストリームを報告するRRパケットは元のRTPセッションで送信され、再送信ストリームを報告するRRパケットは再送信セッションで送信されます. これら2つのセッションのRTCP帯域幅は、個別に選択できます（たとえば、RTCP帯域幅修飾子[4]を使用）. 

SSRC多重化の場合、セッションが1つしかないため、受信者は元のストリームと再送信ストリームのレポートブロックを同じRRパケットで送信します. 

6.3. 再送信要求
AVPFプロファイルで定義されたNACKフィードバックメッセージ形式は、受信者が再送信要求を送信するために使用する必要があります. 受信者がパケットを要求することを選択するかどうかは、実装の問題です. 実際の受信機の実装では、許容できるアプリケーションの遅延、ネットワーク環境、メディアタイプなどの要素を考慮に入れる必要があります. 

受信者は通常、再送信されたパケットが受信時にまだ有用であるかどうかを評価する必要があります. 欠落しているパケットのタイムスタンプは、元のストリームで欠落しているパケットによって引き起こされたシーケンス番号のギャップの前後のパケットのタイムスタンプから推定できます. ほとんどの場合、タイムスタンプの何らかの形式の線形推定で十分です. 

さらに、受信者は送信者へのラウンドトリップ時間（RTT）の見積もりを計算する必要があります. これは、たとえば、再送信遅延を測定して、そのパケットに対してNACKが送信された後に再送信パケットを受信することによって実行できます. この見積もりは、過去の観測、RTCPレポートのラウンドトリップ時間（利用可能な場合）、またはその他の手段から取得することもできます. 受信者がRTTを推定するための標準的なメカニズムは、「RTP制御プロトコル拡張レポート（RTCP XR）」[11]で指定されています. 

受信者は、欠落しているシーケンス番号を検出するとすぐに再送信要求を送信するべきではありませんが、パケットの並べ替えを補うために遅延を追加する必要があります. この余分な遅延は、たとえば、経験したパケットの並べ替えの過去の観察に基づいている可能性があります. パケットの並べ替えがまれであるか行われない環境では、たとえば、基盤となるデータリンク層が順序付けられた配信を提供する場合、遅延は非常に小さいか、値がゼロになる可能性があることに注意してください. このような場合、適切な「並べ替え遅延」アルゴリズムは、実際にはタイマーベースではなく、パケットベースである可能性があります. たとえば、ギャップが検出された後にn個のパケットが受信された場合、パケットは故障ではなく、本当に失われたと見なされる可能性があります. 

NACKまたは再送信パケットの損失に対する堅牢性を高めるために、受信者は同じパケットに対して新しいNACKを送信する場合があります. これは、複数の再送信と呼ばれます. 欠落しているパケットに対して新しいNACKを送信する前に、受信者はタイマーに依存して、前回の再送信の試行が失敗したことを合理的に確認し、不要な再送信を回避する必要があります. タイマー値は、観測されたラウンドトリップ時間に基づくものとします. 静的値または適応値を使用できます. たとえば、アダプティブタイマーは、同じパケットに対する新しい要求ごとにその値を変更するタイマーである可能性があります. これを見つけるための実験が行われていないため、このドキュメントでは、この適応値の計算方法に関するガイドラインは提供されていません. 

NACKは、元のRTPストリームに対してのみ送信する必要があります. そうしないと、受信者が再送信ストリームでNACKを送信して複数の再送信を実行したい場合、受信者は元のシーケンス番号と要求したパケットのタイムスタンプ推定を知ることができません. 

付録Aは、再送信の数を制御する方法に関するいくつかのガイドラインを示しています. 

6.4. タイミングルール
NACKフィードバックメッセージは、AVPF [1]に従って、通常の完全な複合RTCPパケットまたは初期のRTCPパケットで送信できます. 初期のパケットでNACKを送信すると、特定のパケット損失に対してより迅速に対応できます. ただし、その場合、初期RTCPパケットが送信された直後に新しいパケット損失が発生した場合、受信者は初期パケットの次の通常のRTCP複合パケットを待機する必要があります. 通常のRTCPコンパウンドでのみNACKを送信すると、元のパケット損失を検出してからそのパケットのNACKを送信できるようになるまでの最大遅延が減少します. 実装者は、使用されているアプリケーションに対するこの事実の考えられる影響を考慮する必要があります. 

さらに、受信者は、通常のRTCP複合パケット間の最小間隔を利用できます. この間隔を使用すると、定期的な受信者のレポートを最小限に抑えながら、受信者がより頻繁なフィードバックを必要とする期間（パケット損失率が高い時間など）に早期のRTCPパケットを送信できるようになります. RTCPパケットにはNACKが含まれていないために抑制される場合がありますが、送信された場合と同じRTCP帯域幅が使用可能である必要があることに注意してください. 最小間隔の使用の詳細については、AVPF [1]を参照してください. 

7.輻輳制御
RTP再送信は、ネットワークの輻輳を増加させるリスクをもたらします. ベストエフォート環境では、パケット損失は輻輳によって引き起こされます. したがって、元のストリームの速度を低下させることなく古いデータを再送信することによって損失に対応すると、輻輳がさらに増加し​​ます. 再送信を使用するには、実装は以下の推奨事項に従う必要があります. 

再送信スキームが使用されるRTPプロファイルは、さまざまな環境で適切な輻輳制御メカニズムを定義します. プロファイルのルールに従って、RTPアプリケーションは、他のTCPまたはRTPフローに対して公平であるように、許容可能なビットレートとパケットレートを決定できます. 

RTPアプリケーションが再送信を使用する場合、許容可能なパケットレートとビットレートには、元のデータと再送信されたデータの両方が含まれます. これにより、再送信を使用するアプリケーションが、そうでないアプリケーションと同じ公平性を実現することが保証されます. このようなルールは、実際には次のアクションに変換されます. 

拡張サービスを使用する場合は、ビットレートとパケットレートの合計が要求されたサービスのビットレートを超えないようにする必要があります. 要求されたサービスが実際に提供されていることをさらに監視する必要があります. ベストエフォート環境では、送信者は、元のストリームのパケットレートとビットレートを下げることなく（たとえば、データをより低いレートでエンコードすることによって）再送信パケットを送信するべきではありません（SHOULDNOT）. 

さらに、送信者は、ビットレートを制限するために、重要と見なすパケットのみを選択的に再送信し、他のパケットのNACKメッセージを無視してもよい[MAY]. 

これらの輻輳制御メカニズムは、パケット損失率を許容可能なパラメータ内に維持する必要があります. 輻輳制御のコンテキストでは、同じネットワークパスを通過し、同じネットワーク状態を経験しているTCPフローが、合理的なタイムスケールで、RTPフローが達成するスループット以上の平均スループットを達成する場合、パケット損失は許容できると見なされます. 輻輳が制御されていない場合は、再送信を使用しないでください. 

サーバー（または再送信要求を行うクライアント）が特定のパケットまたはフレームを再生し続けることが重要であると推定した場合、再送信は、たとえば、輻輳によってパケット損失が発生しないワイヤレスリンクで送信される場合があります. または、バッファがいっぱいになるようにRTSP PAUSEが発行された場合（RTSP PAUSEは再送信の送信に影響しません）. 

最後に、伝送速度（または階層化されたマルチキャストセッションにサブスクライブされた層の数）を調整するか、受信者がセッションを離れるように調整する必要がある場合があります. 

8.再送信ペイロード形式MIMEタイプ登録
8.1. 前書き
このドキュメントでは、「rtx」、「rtx-time」、および「apt」のMIMEサブタイプ名とパラメータが紹介されています. 

ペイロードタイプ番号への再送信ストリームに使用されるバインディングは、rtpmap属性によって示されます. バインディングで使用されるMIMEサブタイプ名は「rtx」です. 

「apt」（関連付けられたペイロードタイプ）パラメータは、再送信ペイロードタイプを関連付けられた元のストリームペイロードタイプにマップするために使用する必要があります. 複数の元のペイロードタイプを使用する場合は、複数の「apt」パラメータを含めて、各元のペイロードタイプを異なる再送信ペイロードタイプにマッピングする必要があります. 

オプションのペイロード形式固有のパラメータ「rtx-time」は、送信者が再送信に使用できるバッファに元のRTPパケットを保持する最大時間を示します. 今回は、パケットの最初の送信から始まります. 

構文は次のとおりです. 

      a = fmtp：<number> apt = <apt-value>; rtx-time = <rtx-time-val>
        
どこ

<number>：rtpmap属性で再送信ペイロード形式に割り当てられた動的ペイロードタイプ番号を示します. 

<apt-value>：この再送信ストリームペイロードタイプが関連付けられている元のストリームペイロードタイプの値です. 

<rtx-time-val>：送信者がRTPパケットを再送信に使用できるバッファに保持する時間をミリ秒単位で指定します（パケットが最初に送信された時間から測定）. 再送信ストリームにrtx-timeパラメータがないということは、最大再送信時間が定義されていないことを意味しますが、他の方法でネゴシエートされる場合があります. 

8.2. オーディオ/ rtxの登録
MIMEタイプ：オーディオ

MIMEサブタイプ：rtx

必要なパラメーター：

rate：RTPタイムスタンプクロックレートは、再送信されるメディアのRTPタイムスタンプクロックレートと同じです. 

apt：関連するペイロードタイプ. このパラメーターの値は、関連付けられた元のストリームのペイロードタイプです. 

オプションのパラメータ：

rtx-time：送信者がRTPパケットを再送信に使用できるバッファに保持する時間をミリ秒単位で示します（パケットが最初に送信されたときから測定）. 

エンコーディングに関する考慮事項：このタイプは、RTPを介した転送に対してのみ定義されています. 

セキュリティに関する考慮事項：RFC4588のセクション12を参照してください

相互運用性に関する考慮事項：なし

公開された仕様：RFC 4588

このメディアタイプを使用するアプリケーション：マルチメディアストリーミングアプリケーション

追加情報：なし

詳細についてお問い合わせいただく担当者とメールアドレス：jose.rey@eu.panasonic.com davidleon123@yahoo.com avt@ietf.org

使用目的：COMMON

著者：ホセレイデビッドレオン

コントローラーの変更：IESGから委任されたIETF AVT WG

8.3. ビデオ/ rtxの登録
MIMEタイプ：ビデオ

MIMEサブタイプ：rtx

必要なパラメーター：

rate：RTPタイムスタンプクロックレートは、再送信されるメディアのRTPタイムスタンプクロックレートと同じです. 

apt：関連するペイロードタイプ. このパラメーターの値は、関連付けられた元のストリームのペイロードタイプです. 

オプションのパラメータ：

rtx-time：送信者がRTPパケットを再送信に使用できるバッファに保持する時間をミリ秒単位で示します（パケットが最初に送信されたときから測定）. 

エンコーディングに関する考慮事項：このタイプは、RTPを介した転送に対してのみ定義されています. 

セキュリティに関する考慮事項：RFC4588のセクション12を参照してください

相互運用性に関する考慮事項：なし

公開された仕様：RFC 4588

このメディアタイプを使用するアプリケーション：マルチメディアストリーミングアプリケーション

追加情報：なし

詳細についてお問い合わせいただく担当者とメールアドレス：jose.rey@eu.panasonic.com davidleon123@yahoo.com avt@ietf.org

使用目的：COMMON

著者：ホセレイデビッドレオン

コントローラーの変更：IESGから委任されたIETF AVT WG

8.4. text / rtxの登録
MIMEタイプ：テキスト

MIMEサブタイプ：rtx

必要なパラメーター：

rate：RTPタイムスタンプクロックレートは、再送信されるメディアのRTPタイムスタンプクロックレートと同じです. 

apt：関連するペイロードタイプ. このパラメーターの値は、関連付けられた元のストリームのペイロードタイプです. 

オプションのパラメータ：

rtx-time：送信者がRTPパケットを再送信に使用できるバッファに保持する時間をミリ秒単位で示します（パケットが最初に送信されたときから測定）. 

エンコーディングに関する考慮事項：このタイプは、RTPを介した転送に対してのみ定義されています. 

セキュリティに関する考慮事項：RFC4588のセクション12を参照してください

相互運用性に関する考慮事項：なし

公開された仕様：RFC 4588

このメディアタイプを使用するアプリケーション：マルチメディアストリーミングアプリケーション

追加情報：なし

詳細についてお問い合わせいただく担当者とメールアドレス：jose.rey@eu.panasonic.com davidleon123@yahoo.com avt@ietf.org

使用目的：COMMON

著者：ホセレイデビッドレオン

コントローラーの変更：IESGから委任されたIETF AVT WG

8.5. アプリケーション/ rtxの登録
MIMEタイプ：アプリケーション

MIMEサブタイプ：rtx

必要なパラメーター：

rate：RTPタイムスタンプクロックレートは、再送信されるメディアのRTPタイムスタンプクロックレートと同じです. 

apt：関連するペイロードタイプ. このパラメーターの値は、関連付けられた元のストリームのペイロードタイプです. 

オプションのパラメータ：

rtx-time：送信者がRTPパケットを再送信に使用できるバッファに保持する時間をミリ秒単位で示します（パケットが最初に送信されたときから測定）. 

エンコーディングに関する考慮事項：このタイプは、RTPを介した転送に対してのみ定義されています. 

セキュリティに関する考慮事項：RFC4588のセクション12を参照してください

相互運用性に関する考慮事項：なし

公開された仕様：RFC 4588

このメディアタイプを使用するアプリケーション：マルチメディアストリーミングアプリケーション

追加情報：なし

詳細についてお問い合わせいただく担当者とメールアドレス：jose.rey@eu.panasonic.com davidleon123@yahoo.com avt@ietf.org

使用目的：COMMON

著者：ホセレイデビッドレオン

コントローラーの変更：IESGから委任されたIETF AVT WG

8.6. SDPへのマッピング
MIMEメディアタイプ仕様で運ばれる情報には、RTPセッションを記述するために一般的に使用されるSDP [5]のフィールドへの特定のマッピングがあります. SDPを使用してRTPストリームの再送信を指定する場合、マッピングは次のように行われます. 

-MIMEタイプ（ "video"）、（ "audio"）、（ "text"）、および（ "application"）は、メディア名としてSDP "m ="に含まれます. 

-MIMEサブタイプ（ "rtx"）は、エンコード名としてSDP "a = rtpmap"に含まれます. 「a = rtpmap」のRTPクロックレートは、再送信ペイロードタイプのクロックレートである必要があります. 詳細については、セクション4を参照してください. 

-AVPFプロファイル固有のパラメータ「ack」および「nack」はSDP「a = rtcp-fb」に含まれます. いくつかのSDP「a = rtcp-fb」は、いくつかのタイプのフィードバックに使用されます. 詳細については、AVPFプロファイル[1]を参照してください. 

-再送信ペイロード形式固有のパラメータ「apt」および「rtx-time」は、パラメータ=値のペアのセミコロンで区切られたリストとしてSDP「a = fmtp」に格納されます. 

-残りのパラメーターは、パラメーター=値のペアのセミコロン区切りのリストとしてMIMEメディアタイプ文字列から直接コピーすることにより、SDPの「a = fmtp」属性に入れられます. 

次のセクションでは、SDPの説明の例をいくつか示します. これらの例のいくつかでは、このドキュメントの列幅の制約を満たすために長い行が折りたたまれています. 行末の円記号（ "\"）とそれに続くキャリッジリターンは無視する必要があります. 

8.7. セッション多重化を使用したSDPの説明
セッション多重化の場合、SDP記述には、RTPセッションごとに1つのメディア仕様「m」行が含まれます. SDPは、RFC 3388 [6]で定義されているフロー識別（FID）セマンティクスを使用して、元のおよび関連する再送信セッションの「m」行のグループ化を提供する必要があります. 

次の例では、ポート49170と49174の2つの元のAMRとMPEG-4ストリームと、ポート49172と49176の対応する再送信ストリームをそれぞれ指定しています. 

   v = 0
   o = mascha 2980675221 2980675778 IN IP4 host.example.net
   c = IN IP4 192.0.2.0
   a = group：FID 1 2 a = group：FID 3 4
   m = audio 49170 RTP / AVPF 96
   a = rtpmap：96 AMR / 8000
   a = fmtp：96 octet-align = 1
   a = rtcp-fb：96ナック
   a = mid：1
   m = audio 49172 RTP / AVPF 97
   a = rtpmap：97 rtx / 8000
   a = fmtp：97 apt = 96; rtx-time = 3000
   a = mid：2
   m =ビデオ49174RTP / AVPF 98
   a = rtpmap：98 MP4V-ES / 90000
   a = rtcp-fb：98ナック
   a = fmtp：98 profile-level-id = 8; config = 01010000012000884006682C209 \
   0A21F
   a = mid：3
   m =ビデオ49176RTP / AVPF 99
   a = rtpmap：99 rtx / 90000
   a = fmtp：99 apt = 98; rtx-time = 3000
   a = mid：4
        
SDP記述の特殊なケースは、元のセッション「m」行と再送信セッション「m」行が1つだけ含まれる記述です. グループ化は明白であり、この特殊なケースでのみFIDセマンティクスを省略できます. 

これを次の例に示します. これは、単一の元のMPEG-4ストリームとそれに対応する再送信セッションのSDP記述です. 

   v = 0
   o = mascha 2980675221 2980675778 IN IP4 host.example.net
   c = IN IP4 192.0.2.0
   m =ビデオ49170RTP / AVPF 96
   a = rtpmap：96 MP4V-ES / 90000
   a = rtcp-fb：96ナック
   a = fmtp：96 profile-level-id = 8; config = 01010000012000884006682C209 \
   0A21F
   m =ビデオ49172RTP / AVPF 97
   a = rtpmap：97 rtx / 90000
   a = fmtp：97 apt = 96; rtx-time = 3000
        
8.8. SSRCを使用したSDPの説明-多重化
   以下は、RTPビデオのSDP記述の例です. 
   SSRCを使用したセッション-と同様のパラメータを使用した多重化
   上記のシングルセッションの例：v = 0
   o = mascha 2980675221 2980675778 IN IP4 host.example.net
   c = IN IP4 192.0.2.0
   m =ビデオ49170RTP / AVPF 96 97
   a = rtpmap：96 MP4V-ES / 90000
   a = rtcp-fb：96ナック
   a = fmtp：96 profile-level-id = 8; config = 01010000012000884006682C209 \
   0A21F
   a = rtpmap：97 rtx / 90000
   a = fmtp：97 apt = 96; rtx-time = 3000
        
9.RTSPの考慮事項
リアルタイムストリーミングプロトコル（RTSP）、RFC 2326 [7]は、リアルタイムプロパティを持つデータの配信を制御するためのアプリケーションレベルのプロトコルです. このセクションでは、再送信を使用するRTPセッションの制御に関連する問題について説明します. 

9.1. SSRCによるRTSP制御-多重化
SSRC多重化の場合、「m」行には元のペイロードタイプと再送信ペイロードタイプの両方が含まれ、単一のRTSP「制御」属性があります. 受信者は「m」行を使用して、メディアセッション全体のセットアップとティアダウンを要求します. Transportヘッダーに含まれるRTPプロファイルは、AVPFプロファイルまたは拡張フィードバックを可能にする別の適切なプロファイルである必要があります. SSRC値がSETUP応答のTransportヘッダーに含まれている場合、それは元のストリームの値でなければなりません. 

セッションの元のメディアストリームの送信を制御するために、受信者は通常どおりPLAYおよびPAUSE要求をセッションの送信者に送信します. PLAY応答でRTP固有のパラメーターを設定するために使用されるRTP-infoヘッダーは、元のストリームのRTP情報に従って設定する必要があります. 

受信者が元のストリームの受信を開始すると、追加のRTSPシグナリングなしでRTCPNACKを介した再送信を要求できます. 

9.2. セッション多重化によるRTSP制御
セッション多重化の場合、各SDP「m」行にはRTSP「制御」属性があります. したがって、再送信が使用される場合、元のセッションと再送信の両方に独自の「制御」属性があります. 受信者は、セクション8で指定されているように、FIDセマンティクスを介して元のセッションと再送信セッションを関連付けることができます. 

元のストリームと再送信ストリームは、それぞれのメディアの「制御」属性を介して個別に設定および破棄されます. Transportヘッダーに含まれるRTPプロファイルは、元のセッションと再送信セッションの両方の拡張フィードバックを可能にするAVPFプロファイルまたは別の適切なプロファイルである必要があります. 

RTSPプレゼンテーションは集約制御をサポートする必要があり、セッションレベルのRTSPURLを含める必要があります. 受信者は、元のセッションとそれに関連する再送信セッションに集約制御を使用する必要があります. そうしないと、2つの異なる「session-id」値、つまり元のセッションと再送信セッションの異なる値が必要になり、送信者はそれらを関連付ける方法を知りません. 

次に、セッションレベルの「control」属性を通常どおりに使用して、元のストリームの再生を制御します. 受信者が元のストリームの受信を開始すると、追加のRTSPシグナリングなしでRTCPを介して再送信を要求できます. 

9.3. 再送信ストリームのRTSP制御
再送信の性質上、再送信パケットの送信は、RTSPPLAYおよびPAUSE要求を介して制御されるべきではありません（SHOULDNOT）. PLAYおよびPAUSE要求は、再送信ストリームに影響を与えるべきではありません（SHOULDNOT）. 再送信パケットは、状態に関係なく、元のRTCPストリームの受信者要求に応じて送信されます. 

9.4. キャッシュ制御
再送信ストリームはキャッシュされるべきではありません（SHOULDNOT）. 

セッション多重化の場合、再送信ストリームの「Cache-Control」ヘッダーを「no-cache」に設定する必要があります. 

SSRC多重化の場合、SDPには単一の「m」行があるため、RTSPは再送信ストリームに独立したキャッシングを指定できません. したがって、実装者は、SSRC多重化セッションをキャッシュするかどうかを決定するときに、この事実を考慮に入れる必要があります. 

10.実装例
このドキュメントでは、相互運用性に必要な送信者と受信者の動作のみを義務付けています. さらに、特定の環境を対象とした場合のレート制御やバッファ管理などの特定のアルゴリズムにより、再送信の効率が向上する場合があります. 

このセクションでは、この仕様で許可されているさまざまな実装オプションの概要を説明します. 

最初の例では、最小限のレシーバーの実装について説明します. この実装により、失われたRTPパケットを再送信し、再送信の損失を効率的に検出し、必要に応じて複数の再送信を実行することができます. 必要な処理のほとんどはサーバーで行われます. 

2番目の例は、レイヤードエンコーディングと組み合わせて（小さな）マルチキャストグループで再送信を使用する方法を示しています. これは、再送信と階層化されたエンコーディングが補完的な手法である可能性があることを示しています. 

10.1. 最小限の受信機の実装例
このセクションでは、複数の再送信をサポートする実装の例を示します. 送信者は、MPEG-4ビデオRTPペイロード形式を使用してRTPパケットで元のデータを送信します. [1]のように、NACKフィードバックメッセージが使用されることが想定されています. SSRC多重化を使用したSDP記述の例を以下に示します. 

   v = 0
   o = mascha 2980675221 2980675778 IN IP4 host.example.net
   c = IN IP4 192.0.2.0
   m =ビデオ49170RTP / AVPF 96 97
   a = rtpmap：96 MP4V-ES / 90000
   a = rtcp-fb：96ナック
   a = rtpmap：97 rtx / 90000
   a = fmtp：97 apt = 96; rtx-time = 3000
        
フォーマット固有のパラメータ「rtx-time」は、サーバーが送信されたパケットを再送信バッファに3.0秒間バッファリングし、その後、パケットが再送信バッファから削除され、二度と送信されないことを示します. 

この実装例では、再送信を処理するために必要なRTPレシーバー処理が最小限に抑えられています. 受信者は、受信したシーケンス番号で観察されたギャップからパケット損失を検出します. AVPFプロファイル[1]で定義されているように、NACKを介して失われたパケットを送信者に通知します. 受信者は、自身の受信バッファのサイズを決定するために、通知された送信者の再送信バッファの長さを考慮する必要があります. また、バッファ長から、パケットの再送信を要求できる最大回数を導出する必要があります. 

送信者はパケットを選択的に再送信する必要があります. つまり、パケットの重要度、観測されたサービス品質（QoS）、および受信者へのネットワーク接続の輻輳状態に応じて、要求されたパケットを再送信するかどうかを選択する必要があります. 明らかに、状態情報と処理負荷を各受信者に割り当てる必要があるため、送信者の処理は受信者の数とともに増加します. 

10.2. マルチキャストでのレイヤードエンコードメディアの再送信
このセクションでは、マルチキャストセッションで再送信と階層化エンコーディングを組み合わせる方法を示します. 再送信フレームワークは、小規模なマルチキャストアプリケーションに対してのみ提供されることに注意してください. 大規模なグループの信頼できるマルチキャストアプリケーションでのNACK爆縮、フィードバックトラフィックによって引き起こされる深刻な輻輳の問題については、RFC 2887 [10]を参照してください. 

重要度の異なるパケットは、異なるRTPセッションで送信されます. 異なる層に対応する再送信ストリームは、それ自体が異なる再送信層と見なすことができます. さまざまな再送信ストリームの相対的な重要性は、さまざまな元のストリームの相対的な重要性を反映している必要があります. 

マルチキャストでは、このドキュメントのセクション5.3にあるように、元のストリームと再送信ストリームのSSRC多重化は許可されていません. このため、再送信ストリームは、セッション多重化を使用して異なるRTPセッションで送信する必要があります. 

階層化されたエンコードされたメディアのマルチキャスト再送信のSDP記述例を以下に示します. 

   m =ビデオ8000RTP / AVPF 98
   c = IN IP4 224.2.1.0 / 127/3
   a = rtpmap：98 MP4V-ES / 90000
   a = rtcp-fb：98ナック
   m =ビデオ8000RTP / AVPF 99
   c = IN IP4 224.2.1.3/127/3
   a = rtpmap：99 rtx / 90000
   a = fmtp：99 apt = 98; rtx-time = 3000
        
サーバーと受信機は、前の例で示した再送信方法を実装できます. さらに、彼らはそれが属する層に応じて失われたパケットを要求して再送信することを選択するかもしれません. 

11.IANAの考慮事項
新しいMIMEサブタイプ名「rtx」が、「ビデオ」、「オーディオ」、「テキスト」、「アプリケーション」の4つの異なるメディアタイプに登録されました. 追加のREQUIREDパラメーター「apt」とOPTIONALパラメーター「rtx-time」が定義されています. 詳細については、セクション8を参照してください. 

12.セキュリティに関する考慮事項
この仕様で定義されているペイロード形式を使用するRTPパケットは、RTP [3]のセクション9で説明されている一般的なセキュリティの考慮事項の対象となります. 

一般的なストリーミングシナリオでは、メッセージ認証、データの整合性、リプレイ保護、および機密性が求められます. 

認証がない場合、man-in-the-middle攻撃とリプレイ攻撃が可能になる可能性があり、RTP再送信に非常に有害な場合があります. 例：改ざんされたRTCPパケットは、元のデータストリームに割り当てられた実際のビットレートシェアを効果的に減らす不適切な再送信をトリガーする可能性があります. 改ざんされたRTP再送信パケットは、クライアントのデコーダーをクラッシュさせる可能性があります. このドキュメントの. 一方、再生されたパケットは、誤った並べ替えとRTT測定（再送信要求戦略に必要）につながる可能性があり、レシーバーバッファがオーバーフローする可能性があります. 

さらに、データの機密性を確保するために、元のペイロードデータを暗号化する必要があります. 2バイトの再送信ペイロードヘッダーはデータコンテンツに関するヒントを提供しないため、実際には暗号化する必要はありません. 

さらに、このペイロード形式に使用される暗号化メカニズムは、既知の平文攻撃に対する保護を提供することをお勧めします. RTPは、既知の平文攻撃からストリームを保護するために、最初のRTPタイムスタンプをランダムにすることをお勧めします. 初期タイムスタンプは最初に再送信されたパケットのメディアタイムスタンプになるため、このペイロード形式はこの推奨事項に従いません. ただし、元のストリームの最初のタイムスタンプ自体はランダムであるため、元のストリームが暗号化されている場合、最初に再送信されたパケットのタイムスタンプも攻撃者にとってランダムになります. したがって、機密性が損なわれることはありません. 

暗号化を使用して元のストリームでセキュリティサービスを提供する場合は、同等の暗号強度を備えた同じサービスを再送信ストリームで提供する必要があります. 再送信されたストリームと元のストリームに同じキーを使用すると、2回パッドなどのセキュリティ問題が発生する可能性があります. 2タイムパッドの影響とそれらを回避する方法については、Secure Real-Time Transport Protocol（SRTP）[12]のセクション9.1を参照してください. 

このドキュメントの執筆時点では、SRTPは上記のすべてのセキュリティサービスを提供しているわけではありません. これには、少なくとも2つの理由があります. 1）2回のパッドの発生、および2）このペイロード形式は通常RTP / AVPFプロファイルで機能するのに対し、SRTPはRTP / AVPのみをサポートするという事実です. SRTPの適応バリアントは、将来これらの欠点を解決するはずです. 

再送信の使用に関する輻輳制御の考慮事項は、このドキュメントのセクション7で扱われます. 

13.謝辞
このドキュメントの作成に参加してくれたCarstenBurmeisterに感謝します. また、秦浩一、コリン・パーキンス、スティーブン・カスナー、マグナス・ウェスターランド、ホリ・ゴー、ラフル・アガルワルの有益なコメントにも感謝します. 

14.参考文献
14.1. 規範的参考文献
[1] Ott、J.、Wenger、S.、Sato、N.、Burmeister、C. 、およびJ. Rey、「​​リアルタイムトランスポート制御プロトコル（RTCP）ベースのフィードバック用の拡張RTPプロファイル」、RFC 4585、 2006年7月. 

[2] Bradner、S. 、「要件レベルを示すためにRFCで使用するキーワード」、BCP 14、RFC 2119、1997年3月. 

[3] Schulzrinne、H.、Casner、S.、Frederick、R. 、およびV. Jacobson、「RTP：A Transport Protocol for Real-Time Applications」、STD 64、RFC 3550、2003年7月. 

[4] Casner、S. 、「RTP制御プロトコル（RTCP）帯域幅のセッション記述プロトコル（SDP）帯域幅修飾子」、RFC 3556、2003年7月. 

[5] Handley、M. およびV. Jacobson、「SDP：Session Description Protocol」、RFC 2327、1998年4月. 

[6] Camarillo、G.、Eriksson、G.、Holler、J. 、およびH. Schulzrinne、「Session Description Protocol（SDP）におけるメディアラインのグループ化」、RFC 3388、2002年12月. 

[7] Schulzrinne、H.、Rao、A. 、およびR. Lanphier、「Real Time Streaming Protocol（RTSP）」、RFC 2326、1998年4月. 

14.2. 有益な参考文献
[8] Perkins、C. およびO. Hodson、「ストリーミングメディアの修復のオプション」、RFC 2354、1998年6月. 

[9] Hellstrom、G. およびP. Jones、「テキスト会話のためのRTPペイロード」、RFC 4103、2005年6月. 

[10] Handley、M.、Floyd、S.、Whetten、B.、Kermode、R.、Vicisano、L. 、およびM. Luby、「バルクデータ転送のための高信頼マルチキャスト設計スペース」、RFC 2887、2000年8月. 

[11] Friedman、T.、Caceres、R. 、およびA. Clark、「RTP Control Protocol Extended Reports（RTCP XR）」、RFC 3611、2003年11月. 

[12] Baugher、M.、McGrew、D.、Naslund、M.、Carrara、E. 、およびK. Norrman、「The Secure Real-time Transport Protocol（SRTP）」、RFC 3711、2004年3月. 

付録A.Rtxの数を制御する方法. パケットあたり
可能な限り最良の送信を実現するために、パケットごとの再送信（rtxs. ）の数を見つけることは困難な作業です. もちろん、絶対最小値は1でなければなりません. それ以外の場合は、このペイロード形式を使用しないでください. さらに、発行日現在、著者は、最高のパフォーマンスを得るために使用する必要のあるパケットあたりの再送信回数に関する調査を認識していませんでした. この項目の実装者と研究者を支援するために、このセクションでは、特定の数の再送信を達成するために必要なバッファリング時間の見積もりについて説明します. この時間が計算されると、このドキュメントで定義されているように、SDPパラメータ「rtx-time」を介してクライアントに通信できます. 

A.1. シナリオと仮定
*遅延境界が緩和されたストリーミングシナリオ. クライアントとサーバーには、SDPのパラメーター「rtx-time」で示されるバッファリングスペースが提供されます. 

* SSRC多重化再送信スキームで使用されるRTPAVPFプロファイル：元のパケット用に1つのSSRC、再送信パケット用に1つ. 

* SRおよびRRのデフォルトのRTCP帯域幅共有、つまりSR + RR = 0.05. 送信者（2）と受信者（1）があります. 送信者の割合がセッションメンバーの1/4より大きいため、受信者と送信者はRTCP帯域幅シェアの1/3を等しく取得します. 

* avg-rtcp-sizeは約120バイトです. これは、SSRCごとに1つずつ、2つのSRの切り上げ平均であり、CNAMEを使用したIPv6 / UDP / SR / SDESの40/8/28/32バイトを含み、それぞれ105バイトになります. また、IPv6 / UDP / 2 * RR / SDESの場合は40/8/64/32バイトのRRで、157バイトになります. 送信者と受信者はRTCP帯域幅を等しく共有するため、avg-rtcp-size =（157 + 105 + 105）/ 3 = 117.3〜 = 120バイトです. この値の重要な特徴は、100バイトを超えるものであるということです. これは、一般的な構成の代表的な数値のようです. 

*使用されるプロファイルはAVPF [1]であり、汎用NACKは再送信の要求に使用されます. これにより、1つのNACKに対して16バイトのオーバーヘッドが追加され、追加のNACKフィードバック制御情報（FCI）フィールドごとに4バイトが追加されます. 

*各パケットが受信される前に、対応する使用可能な再送信数Nを使い果たすという最悪のシナリオを想定しています. これは、パケットが最大2回再送信を要求された場合、その特定のパケットを要求する対応する汎用NACKレポートブロックが2つの連続するRTCPコンパウンドで送信されることを意味します. 同様に、再送信が10回要求された場合、汎用NACKは10回送信されます. この仮定により、RTCPパケットサイズはN * RTCP間隔（秒）後にほぼ一定になります. つまり、avg-rtcp-size = 120 +（receiver-RTCP-bw-share）*（12 + 4 * N）になります. この場合、レシーバーのRTCP帯域幅シェアは1/3です. したがって、avg-rtcp-size = 124 + 4 * N / 3です. 

* 2つの遅延パラメータは概算が難しく、実装に依存する場合があります. したがって、ここでは特定の値を割り当てずに明示的にリストします. 1つはパケット損失検出時間（T2）で、もう1つはフィードバック処理と再送信のキューイング時間（T5）です. 実装者は、これら2つのパラメータに適切な値を割り当てる必要があります. 

グラフィカルに、次のものがあります. 

         送信者
       +-+ --------------------------------- ^ ----- \ ------- ----------
        \ \ / \
         \ \ | |
   SN = 0 \ \ SN = 1 / \ RTX（SN = 0）
           \ \ / \
            バツ \ / \
               `. / \
                 \ / \
                  \ | |
                   \ / \...... 
                    \ / \
       ------------- V ---- D -------- / ---------------------- -V --------
              T1 T2 T3 T4 T5 T1........ 
        レシーバー
        
   伝説：
   =======
   DL：ダウンリンク（クライアント->サーバー）
   UL：アップリンク（サーバー->クライアント）
   時間の単位は秒、sです. 
   ビットレートの単位はビット/秒、bpsです. 
        
   DL送信時間：T1 =物理遅延-DL +
      tx-delay-DL（= avg-pkt-size / DL-bitrate）+到着間隔-遅延-ジッター
        
パケット損失を検出する時間：T2 = pkt-loss-detect-time

パケット損失を報告する時間：T3 = time-to-next-rtcp-report

   UL送信時間：T4 =物理遅延-UL +
      伝送遅延-UL +到着間隔-遅延-ジッター
        
再送信処理時間：T5 =フィードバック処理時間+ rtxキューイング時間

A.2. ゴール
ストリーミングサーバーが各パケットに対して指定された数の再送信を可能にするために使用するバッファリング時間T（）の推定値を見つけるために、N. この時間は、サーバーとクライアントでほぼ等しくなります. クライアントがT1秒後にバッファリングを開始すること. 

A.3. 解決
最初に、1回の再送信の推定値T（1）= Tを見つけます. 

      T = T1 + T2 + T3 + T4 + T5
        
T1 + T4〜 = RTTなので、

      T = RTT + T2 + T3 + T5
        
T3の最悪のケースは、レポートがRTCP間隔全体を待機する必要があり、最大ランダム化係数1.5が適用されると想定することです. したがって、トラフィックバーストを回避するために後続の補正を適用した後（RTP [3]の付録A.7を参照）、T3 = 1.5 / 1.21828 * RTCP-Intervalになります. したがって、

      T = RTT + 1.2312 * RTCP-間隔+ T2 + T5
        
一方、RTCP-Interval = avg-rtcp-size * 8 *（送信者+受信者）/（RR + RS）. このシナリオでは、送信者+受信者= 3; RR + RSは、受信者レポートと送信者レポートの帯域幅の共有であり、この場合、セッション帯域幅のデフォルトの5％bwに等しくなります. 平均RTCPパケットサイズ、avg-rtcp-size = 120バイトを想定しています. したがって：

      T = RTT + 1.2312 * avg-rtcp-size * 8 * 3 /（0.05 * bw）+ T2 + T5
        
1回の再送信. 

N回の再送信を有効にする場合、ストリーミングサーバーまたはクライアントで使用可能なバッファリング時間はおよそ次のとおりです. 

      T（N）= N *（RTT + 1.2312 * avg-rtcp-size * 8 * 3 /（0.05 * bw）+ T2 + T5）
        
ここで、上記のように、

avg-rtcp-size = 120 +（レシーバー-RTCP-bw-share）*（12 + 4 * N）= 120 +（1/3）*（12 + 4 * N）= 124 + 4 * N / 3. 

A.4. 数字
T2とT5の影響を無視する場合、つまり、すべての損失がすぐに検出され、フィードバック処理または再送信キューイングによる追加の遅延がないと仮定すると、Nのさまざまな値に対して次のバッファリング時間があります. 

   いくつかの汎用NACKを備えたRTCP. 可変パケットサイズ= 124 + 4 * N / 3
   バイト
        
   | ============ | ===== | ============================== ======== |
   | RTP BW | RTT | N値|
   | ============ | ===== | 1 2 5 7 10 |
                      | ====================================== |
        
64000 0,05 1,21 2,44 6,28 8,97 13,18 128000 0,05 0,63 1,27 3,27 4,66 6,84 256000 0,05 0,34 0,68 1 76 2,50 3,67 512000 0,05 0,19 0,39 1,00 1,43 2,09 1024000 0,05 0,12 0,25 0,63 0,89 1,29 5000000 0,05 0 、06 0,13 0,33 0,46 0,66 10000000 0,05 0,06 0,11 0,29 0,41 0,58

64000 0,2 1,36 2,74 7,03 10,02 14,68 128000 0,2 0,78 1,57 4,02 5,71 8,34 256000 0,2 0,49 0,98 2 51 3,55 5,17 512000 0,2 0,34 0,69 1,75 2,48 3,59 1024000 0,2 0,27 0,55 1,38 1,94 2,79 5000000 0,2 0 、21 0,43 1,08 1,51 2,16 10000000 0,2 0,21 0,41 1,04 1,46 2,08

64000 1 2,16 4,34 11,03 15,62 22,68 128000 1 1,58 3,17 8,02 11,31 16,34 256000 1 1,29 2,58 6,51 9,15 13 17 512000 1 1,14 2,29 5,75 8,08 11,59 1024000 1 1,07 2,15 5,38 7,54 10,79 5000000 1 1,01 2,03 5,08 7,11 10 、16 10000000 1 1,01 2,01 5,04 7,06 10,08汎用NACKを考慮しない場合のエラーを定量化するために、同じ数値を実行できますが、汎用NACKの寄与を無視します. avg-rtcp-サイズ〜= 120バイト. 以下からわかるように、これにより、帯域幅の値が低く、再送信の回数が多い場合、1〜1.5秒（5〜10％）のバッファ推定エラーが発生する可能性があります. この場合、この効果は低くなります. それでも、特定のシナリオについて慎重に評価する必要があります. そのため、数式にはそれが含まれています. 

   汎用NACKなしのRTCP、固定パケットサイズ〜= 120バイト
        
   | ============ | ===== | ============================== ======== |
   | RTP BW | RTT | N値|
   | ============ | ===== | 1 2 5 7 10 |
                      | ====================================== |
        
64000 0,05 1,16 2,32 5,79 8,11 11,58 128000 0,05 0,60 1,21 3,02 4,23 6,04 256000 0,05 0,33 0,65 1 64 2,29 3,27 512000 0,05 0,19 0,38 0,94 1,32 1,89 1024000 0,05 0,12 0,24 0,60 0,83 1,19 5000000 0,05 0 、06 0,13 0,32 0,45 0,64 10000000 0,05 0,06 0,11 0,29 0,40 0,57

64000 0,2 1,31 2,62 6,54 9,16 13,08 128000 0,2 0,75 1,51 3,77 5,28 7,54 256000 0,2 0,48 0,95 2 39 3,34 4,77 512000 0,2 0,34 0,68 1,69 2,37 3,39 1024000 0,2 0,27 0,54 1,35 1,88 2,69 5000000 0,2 0 、21 0,43 1,07 1,50 2,14 10000000 0,2 0,21 0,41 1,04 1,45 2,07

64000 1 2,11 4,22 10,54 14,76 21,08 128000 1 1,55 3,11 7,77 10,88 15,54 256000 1 1,28 2,55 6,39 8,94 12 77 512000 1 1,14 2,28 5,69 7,97 11,39 1024000 1 1,07 2,14 5,35 7,48 10,69 5000000 1 1,01 2,03 5,07 7,10 10 、14 10000000 1 1,01 2,01 5,04 7,05 10,07

著者の住所

Jose Rey Panasonic R＆D Center Germany GmbHMonzastr. 4c D-63225ランゲン、ドイツ

   電話番号：+ 49-6103-766-134
   ファックス：+ 49-6103-766-166
   Eメール：jose.rey@eu.panasonic.com
        
デビッドレオンコンサルタント

Eメール：davidleon123@yahoo.com

宮崎明弘松下電器産業株式会社1006、門真市門真市、大阪

   電話番号：+ 81-6-6900-9172
   ファックス：+ 81-6-6900-9173
   Eメール：miyazaki.akihiro@jp.panasonic.com
        
Viktor Varsa Nokia Research Center 6000コネクションドライブテキサス州アーヴィング. 米国

電話：1-972-374-1861電子メール：viktor.varsa@nokia.com

Rolf Hakenberg Panasonic R＆D Center Germany GmbHMonzastr. 4c D-63225ランゲン、ドイツ

   電話番号：+ 49-6103-766-162
   ファックス：+ 49-6103-766-166
   Eメール：rolf.hakenberg@eu.panasonic.com
        
完全な著作権表示

Copyright（C）The Internet Society（2006）. 

このドキュメントは、BCP 78に含まれる権利、ライセンス、および制限の対象であり、そこに記載されている場合を除き、作成者はすべての権利を保持します. 

このドキュメントおよびここに含まれる情報は「現状有姿」で提供され、寄稿者、組織の代表者、またはスポンサー（存在する場合）、インターネットソサエティおよびインターネット技術特別調査委員会はすべての保証を否認します. または、ここに記載されている情報の使用が商品性または特定目的への適合性に関するいかなる権利または黙示の保証も侵害しないことを含むがこれに限定されない、黙示の保証を含みます. 

知的財産

IETFは、本書に記載されている技術の実装または使用に関連すると主張される可能性のある知的財産権またはその他の権利の有効性または範囲、あるいはそのような権利に基づくライセンスが可能性がある場合とそうでない場合がある範囲に関して、いかなる立場も取りません. 利用可能である; また、そのような権利を特定するために独自の努力をしたことを表すものでもありません. RFCドキュメントの権利に関する手順に関する情報は、BCP78およびBCP79に記載されています. 

IETF事務局に対して行われたIPR開示のコピー、および利用可能になるライセンスの保証、またはこの仕様の実装者またはユーザーによるそのような所有権の使用に関する一般的なライセンスまたは許可を取得しようとした結果を取得できます.  http://www.ietf.org/iprのIETFオンラインIPRリポジトリから. 

IETFは、この標準の実装に必要となる可能性のあるテクノロジを対象とする可能性のある著作権、特許、特許出願、またはその他の所有権に関心を持ってもらうよう、関係者に呼びかけています. 情報をIETF（ietf-ipr@ietf.org）に送信してください. 

了承

RFC Editor機能の資金は、IETF管理サポートアクティビティ（IASA）によって提供されます. 